#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve typesafety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer commentscanYY_create_buffer

    #define yy_delete_buffer commentscanYY_delete_buffer

    #define yy_scan_buffer commentscanYY_scan_buffer

    #define yy_scan_string commentscanYY_scan_string

    #define yy_scan_bytes commentscanYY_scan_bytes

    #define yy_init_buffer commentscanYY_init_buffer

    #define yy_flush_buffer commentscanYY_flush_buffer

    #define yy_load_buffer_state commentscanYY_load_buffer_state

    #define yy_switch_to_buffer commentscanYY_switch_to_buffer

    #define yypush_buffer_state commentscanYYpush_buffer_state

    #define yypop_buffer_state commentscanYYpop_buffer_state

    #define yyensure_buffer_stack commentscanYYensure_buffer_stack

    #define yylex commentscanYYlex

    #define yyrestart commentscanYYrestart

    #define yylex_init commentscanYYlex_init

    #define yylex_init_extra commentscanYYlex_init_extra

    #define yylex_destroy commentscanYYlex_destroy

    #define yyget_debug commentscanYYget_debug

    #define yyset_debug commentscanYYset_debug

    #define yyget_extra commentscanYYget_extra

    #define yyset_extra commentscanYYset_extra

    #define yyget_in commentscanYYget_in

    #define yyset_in commentscanYYset_in

    #define yyget_out commentscanYYget_out

    #define yyset_out commentscanYYset_out

    #define yyget_leng commentscanYYget_leng

    #define yyget_text commentscanYYget_text

    #define yyget_lineno commentscanYYget_lineno

    #define yyset_lineno commentscanYYset_lineno

        #define yyget_column commentscanYYget_column

        #define yyset_column commentscanYYset_column

    #define yywrap commentscanYYwrap

    #define yyalloc commentscanYYalloc

    #define yyrealloc commentscanYYrealloc

    #define yyfree commentscanYYfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void commentscanYYrestart ( FILE *input_file , yyscan_t yyscanner );
void commentscanYY_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE commentscanYY_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void commentscanYY_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void commentscanYY_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void commentscanYYpush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void commentscanYYpop_buffer_state ( yyscan_t yyscanner );

static void commentscanYYensure_buffer_stack ( yyscan_t yyscanner );
static void commentscanYY_load_buffer_state ( yyscan_t yyscanner );
static void commentscanYY_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE commentscanYY_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE commentscanYY_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE commentscanYY_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *commentscanYYalloc ( yy_size_t , yyscan_t yyscanner );
void *commentscanYYrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void commentscanYYfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer commentscanYY_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 245
#define YY_END_OF_BUFFER 246
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[917] =
    {   0,
      102,  102,  155,  155,  170,  170,  185,  185,  233,  233,
      176,  176,  246,  245,   59,  245,   59,  245,   58,  245,
       59,  245,   59,  245,   59,  245,   59,  245,   57,   59,
      245,   59,  245,   59,  245,   39,   59,  245,   59,  245,
       39,   59,  245,   59,  245,   59,  245,   59,  245,   59,
      245,   57,   59,  245,   59,  245,   59,  245,  117,  245,
      116,  245,  117,  245,  114,  117,  245,  117,  245,  117,
      245,  120,  245,  118,  245,  120,  245,  120,  245,  145,
      245,  144,  245,  142,  145,  245,  145,  245,   97,  245,
       97,  245,   96,  245,   93,   97,  245,   97,  245,   97,

      245,   93,   97,  245,   97,  245,   97,  245,  101,  245,
       98,  245,  101,  245,   99,  101,  245,  101,  245,  101,
      245,  101,  245,  105,  245,  104,  245,  102,  105,  245,
      102,  105,  245,  105,  245,  102,  105,  245,  102,  105,
      245,  105,  245,   97,  245,   96,  245,   97,  245,   97,
      245,   97,  245,   97,  245,   97,  245,  133,  245,  132,
      245,  130,  133,  245,  133,  245,  137,  245,  136,  245,
      137,  245,  137,  245,  141,  245,  140,  245,  141,  245,
      141,  245,  129,  245,  126,  245,  129,  245,  127,  129,
      245,  129,  245,  129,  245,  125,  245,  123,  245,  124,

      125,  245,16505,  122,  125,  245,  125,  245,   79,  245,
       78,  245,   76,   79,  245,   79,  245,   83,  245,   83,
      245,   82,  245,   80,   83,  245,   83,  245,   83,  245,
       80,   83,  245,   83,  245,   83,  245,   87,  245,   86,
      245,   84,   87,  245,   87,  245,   91,  245,   90,  245,
       88,   91,  245,   91,  245,  109,  245,  108,  245,  106,
      109,  245,  109,  245,  111,  113,  245,  112,  245,  113,
      245,  151,  245,  150,  245,  149,  151,  245,  151,  245,
      155,  158,  245,  152,  245,  155,  158,  245,  158,  245,
      158,  245,  161,  245,  160,  245,  159,  161,  245,  161,

      245,  164,  245,  164,  245,  162,  245,  164,  245,  164,
      245,  170,  174,  245,  171,  245,  174,  245,  174,  245,
      174,  245,  174,  245,  174,  245,  148,  245,  146,  245,
      148,  245,  183,  245,  183,  245,  181,  245,  175,  183,
      245,  180,  183,  245,  183,  245,  186,  245,  185,  186,
      245,  184,  245,  186,  245,  193,  194,  245,  192,  245,
      194,  245,  194,  245,  194,  245,  204,  205,  245,  195,
      245,  205,  245,  205,  245,  205,  245,  208,  245,  206,
      245,  208,  245,  216,  245,  214,  245,  213,  216,  245,
      216,  245,  219,  222,  245,  217,  245,  220,  222,  245,

      221,  222,  245,  222,  245,  222,  245,  225,  245,  223,
      245,  225,  245,  228,  245,  227,  245,  226,  228,  245,
      228,  245,  231,  245,  230,  245,  229,  231,  245,  231,
      245,   73,   75,  245,   74,  245,   75,  245,   75,  245,
       75,  245,  167,  245,  166,  245,  165,  167,  245,  167,
      245,   62,   63,  245,   61,  245,   63,  245,   63,  245,
       15,  245,   14,  245,   15,  245,   15,  245,   15,  245,
       13,   15,  245,   15,  245,   15,  245,   15,  245,  233,
      235,  245,  234,  245,  235,  245,  235,  245,  235,  245,
      238,  245,  237,  245,  238,  245,  236,  238,  245,  238,

      245,  241,  244,  245,  239,  245,  242,  244,  245,  243,
      244,  245,  244,  245,  244,  245,  176,  245,  176,  179,
      245,  177,  245,  178,  245,   67,   68,  245,   65,  245,
       66,   68,  245,   68,  245,   68,  245,  210,  245,  209,
      245,  210,  245,  212,  245,  211,  245,  212,  245,   56,
        4,   48,   50,   52,   50,   10,   38,   38,   29,   29,
       29,   36,   37,   31,   38,   39,   29,   29,   29,   29,
       39,   42,   43,   48,   40,  114,  114,  115,  114,  119,
      142,  143,   93,   93,   93,   95,   93,   99,   99,  100,
       99,  102,  102,  102,  102,  102,  102,  103,  102,  130,

      131,  134,  135,  139,  138,  139,  127,  127,  128,  127,
      124,16505, 8313,   76,   76,   77,   80,   80,   80,   81,
       80,   84,   85,   88,   88,   89,  106,  107,  111,  110,
      149,  155,  152,  155,  157,  157,  154,  159,  163,  170,
      173,  172,  147,  175,  180,  182,  185,  184,  193,  204,
      207,  213,  215,  219,  218,  224,  226,  229,   73,  165,
       62,   12,   13,  233,  232,  236,  241,  240,  176,   67,
       38,   29,   49,   47,   55,   50,   55,   55,   55,   50,
       55,   55,   51,   10,    6,   46,    1,    1,    2,   29,
       29,   33,   34,   35,   31,    5,   29,   29,   39,   44,

       47,   41,  114,  114,  142,   93,   99,   99,  102,  102,
      102,  127,  127,   76,   76,   76,   80,   84,   88,   88,
       88,  156,  226,  229,   69,   70,   71,   72,   60,  232,
      236,  236,   64,   29,   54,   55,   54,   50,   54,   55,
       54,   55,   55,   50,   54,   55,   54,   55,   54,   55,
       24,   45,    1,   30,    2,   28,   29,   29,   29,   39,
      114,   92,   99,  102,  102,   94,  127,   76,   76,   84,
       88,   88,  156,  188,  196,   60,   11,  236,   29,   23,
       53,    6,   21,   28,   29,   32,   28,   32,   29,   29,
       39,  114,   99,  102,  127,   76,   76,   88,   88,   11,

       29,    3,   22,    7,   29,   32,   29,   29,   39,  114,
       99,  102,  127,  106,  190,  198,   11,   29,   29,   29,
       29,  114,   99,  102,  127,  169,  189,  187,  197,   29,
       29,   29,   27,   29,   58,  114,  116,  118,  144,   96,
       98,   99,  102,  104,  132,  136,  140,  126,  127,  123,
       78,   82,   86,   90,  108,  112,  150,  153,  160,  162,
      168,  171,  146,  181,  191,  192,  195,  206,  214,  217,
      223,  227,  230,  166,   61,   14,  234,  237,  239,   65,
      209,  211,   27,   29,   25,   20,    8,   17,   16,   29,
       29,   27,   29,    5,  199,   27,   29,    9,   19,   18,

       29,   29,   29,   29,  202,   26,   29,   26,   29,  203,
      200,   26,   29,  203,  201,   56
    } ;

static const flex_int16_t yy_accept[1334] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    6,
        7,    7,    7,    7,    7,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   10,   11,   11,   11,   11,
       11,   12,   13,   13,   13,   13,   13,   13,   13,   14,

       15,   17,   19,   21,   23,   25,   27,   29,   32,   34,
       36,   39,   41,   44,   46,   48,   50,   52,   55,   57,
       59,   61,   63,   65,   68,   70,   72,   74,   76,   78,
       80,   82,   84,   87,   89,   91,   93,   95,   98,  100,
      102,  105,  107,  109,  111,  113,  115,  118,  120,  122,
      124,  126,  128,  131,  134,  136,  139,  142,  144,  146,
      148,  150,  152,  154,  156,  158,  160,  162,  165,  167,
      169,  171,  173,  175,  177,  179,  181,  183,  185,  187,
      189,  192,  194,  196,  198,  200,  204,  207,  209,  211,
      213,  216,  218,  220,  222,  224,  227,  229,  231,  234,

      236,  238,  240,  242,  245,  247,  249,  251,  254,  256,
      258,  260,  263,  265,  268,  270,  272,  274,  276,  279,
      281,  284,  286,  289,  291,  293,  295,  297,  300,  302,
      304,  306,  308,  310,  312,  315,  317,  319,  321,  323,
      325,  327,  329,  331,  333,  335,  337,  339,  342,  345,
      347,  349,  352,  354,  356,  359,  361,  363,  365,  367,
      370,  372,  374,  376,  378,  380,  382,  384,  386,  388,
      391,  393,  396,  398,  401,  404,  406,  408,  410,  412,
      414,  416,  418,  421,  423,  425,  427,  430,  432,  435,
      437,  439,  441,  443,  445,  447,  450,  452,  455,  457,

      459,  461,  463,  465,  467,  469,  471,  474,  476,  478,
      480,  483,  485,  487,  489,  491,  493,  495,  497,  500,
      502,  505,  507,  510,  513,  515,  517,  519,  522,  524,
      526,  529,  531,  534,  536,  538,  540,  542,  544,  546,
      548,  550,  550,  550,  550,  550,  551,  551,  551,  552,
      552,  552,  552,  552,  553,  554,  555,  555,  556,  556,
      556,  556,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  558,  558,  559,  560,  561,  562,  563,
      564,  566,  567,  568,  569,  570,  571,  572,  572,  572,
      572,  572,  572,  572,  573,  574,  575,  575,  576,  576,

      576,  576,  576,  576,  577,  578,  578,  578,  578,  579,
      580,  581,  581,  582,  582,  582,  582,  583,  583,  583,
      583,  583,  584,  585,  585,  585,  585,  586,  586,  587,
      587,  587,  588,  588,  589,  590,  590,  590,  590,  591,
      592,  592,  593,  594,  594,  595,  596,  597,  597,  597,
      598,  598,  599,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  601,  601,  602,  602,
      602,  603,  603,  605,  605,  605,  606,  606,  607,  607,
      607,  608,  609,  609,  609,  609,  610,  611,  611,  613,
      614,  614,  614,  615,  616,  616,  616,  617,  617,  617,

      617,  617,  618,  619,  619,  619,  620,  620,  621,  621,
      621,  622,  623,  623,  623,  624,  624,  624,  625,  626,
      626,  626,  627,  627,  628,  628,  628,  629,  629,  630,
      630,  631,  631,  632,  632,  633,  634,  635,  635,  636,
      637,  637,  638,  638,  639,  639,  639,  639,  639,  640,
      640,  641,  642,  643,  643,  643,  643,  644,  644,  644,
      645,  646,  646,  647,  647,  648,  649,  649,  649,  650,
      650,  650,  650,  651,  651,  651,  651,  651,  651,  651,
      652,  652,  653,  653,  654,  654,  655,  655,  656,  656,
      656,  657,  657,  658,  658,  658,  658,  659,  659,  659,

      659,  660,  660,  660,  660,  661,  661,  662,  662,  662,
      662,  663,  663,  664,  664,  664,  664,  665,  666,  666,
      666,  667,  667,  667,  668,  668,  669,  669,  670,  671,
      671,  671,  671,  671,  672,  673,  673,  673,  673,  673,
      674,  675,  676,  678,  679,  680,  682,  683,  684,  684,
      684,  684,  684,  684,  684,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  686,  686,  686,  686,  686,  686,
      687,  688,  689,  690,  691,  691,  692,  693,  694,  695,
      695,  696,  697,  698,  699,  700,  700,  700,  700,  700,
      701,  702,  702,  703,  704,  704,  705,  705,  706,  706,

      706,  706,  706,  707,  708,  708,  709,  710,  710,  711,
      711,  712,  712,  712,  712,  712,  712,  712,  713,  713,
      714,  714,  715,  716,  717,  717,  717,  718,  719,  719,
      720,  721,  722,  722,  722,  722,  722,  722,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  724,  724,  725,  725,  726,  727,  728,  729,  729,
      729,  730,  730,  730,  730,  730,  731,  731,  732,  732,
      732,  733,  733,  733,  733,  734,  734,  734,  734,  735,
      735,  735,  735,  737,  738,  741,  743,  744,  747,  749,

      751,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  753,  754,
      755,  756,  756,  757,  758,  758,  758,  758,  759,  760,
      761,  761,  761,  761,  762,  762,  762,  762,  763,  763,
      763,  764,  765,  765,  766,  767,  767,  767,  767,  768,
      768,  769,  770,  770,  770,  771,  771,  772,  773,  773,
      773,  773,  773,  773,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  775,  775,  775,  775,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  777,  777,  777,  777,  778,  778,  778,  778,

      779,  779,  779,  779,  779,  779,  780,  780,  781,  781,
      781,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  784,  784,  784,  784,  785,  786,  787,  789,
      790,  791,  792,  792,  793,  793,  793,  793,  794,  795,
      795,  795,  795,  796,  796,  797,  798,  798,  798,  798,
      799,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  801,  801,  801,  801,  801,  801,

      801,  801,  801,  802,  802,  803,  803,  803,  804,  804,
      804,  804,  804,  804,  805,  805,  805,  805,  805,  805,
      806,  807,  808,  809,  810,  811,  811,  811,  811,  812,
      813,  813,  813,  813,  814,  814,  814,  814,  814,  814,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  816,  816,  816,  816,  816,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  820,  821,  822,
      822,  823,  823,  823,  823,  824,  825,  825,  825,  825,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  827,  827,  827,  827,  827,  827,  827,  827,
      828,  829,  829,  829,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  832,  833,  836,  838,  839,
      840,  841,  843,  845,  846,  847,  848,  850,  851,  852,

      853,  854,  855,  856,  857,  858,  859,  860,  861,  861,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      863,  864,  865,  866,  867,  867,  867,  867,  867,  867,
      868,  869,  870,  871,  872,  873,  874,  875,  876,  877,
      878,  879,  880,  881,  882,  883,  885,  886,  886,  886,
      886,  886,  887,  887,  888,  889,  890,  891,  892,  894,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  896,  896,  896,  898,  899,  900,  901,  901,
      901,  901,  901,  902,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  904,

      905,  905,  905,  905,  905,  905,  905,  905,  905,  906,
      906,  906,  908,  910,  910,  910,  910,  910,  911,  912,
      912,  914,  914,  914,  915,  915,  915,  915,  915,  915,
      916,  917,  917
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   23,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   36,   40,   41,   42,   43,   44,   45,
       36,   46,   47,   48,   49,   50,   36,   36,   51,   36,
       52,   53,   54,    1,   55,    1,   56,   57,   58,   59,

       60,   61,   62,   63,   64,   36,   65,   66,   67,   68,
       69,   70,   36,   71,   72,   73,   74,   75,   36,   76,
       77,   36,   78,   79,   80,   81,    1,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82
    } ;

static const YY_CHAR yy_meta[83] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,    1,   29,   30,   31,   28,   28,   28,   28,   28,
       28,   28,   28,   32,   28,   28,   28,   33,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   34,    1,   35,
       36,   37
    } ;

static const flex_int16_t yy_base[1594] =
    {   0,
        0,    0,    0,   81,  160,  241,   81,   82,  322,    0,
      404,    0,  486,  567,  648,  729,  810,    0,  892,    0,
       84,   85,   86,   87,  974, 1055, 1136,    0, 1218,    0,
     1300,    0, 1382,    0, 1464,    0, 1546,    0,   92,   95,
     1628,    0,   98,   99, 1710,    0,  115,  139,  178,  196,
      103,  104, 1792,    0,  204,  215,  199,  229,  232,  499,
      105,  106, 1874,    0,  260,  494,  118,  123, 1956,    0,
     2038,    0,  152,  261,  491,  506,  525,  530, 2120,    0,
      218,  532, 2200, 2201,  560,  585, 2269, 2350,  603,  611,
      140,  273,  667,  734,  144,  147,  175,  219, 6199,12688,

    12688,  606,  222, 6191,    0, 6166,  270,  694, 2426, 2493,
      668, 2567,  989, 1020,  114,  185, 1016, 2647,  280,  525,
    12688,12688, 6188,  498,  578, 2315,12688,12688,   97,  251,
    12688,12688,   91,  543,12688,  761,  765, 2305, 2222, 6170,
     1086,  607,  128,12688,12688, 6186,  661,  753, 6164, 2386,
    12688,12688, 2729, 1013, 1078, 2238,12688, 2392, 2212, 2419,
     2503, 2464, 6167, 2528,  302,12688,12688,    0,  624,12688,
    12688, 6181,  632,12688,12688, 6179, 1012,12688,12688, 6178,
      977, 1058, 2515,12688,12688,  279,12688, 6120,12688,12688,
     2431, 2247,12688, 2546, 2584, 2602, 2610, 6159, 2614, 2380,

      701,12688,12688, 6163, 2412,12688,12688, 2559, 2446,12688,
    12688, 6161, 2476,    0,12688, 2589,12688,12688,    0, 6115,
      586,12688, 6125, 2632, 2809,12688,12688,    0, 6112,12688,
      189,12688, 6168, 6105,    0,12688,12688, 6148, 6152, 6103,
      159,12688,12688, 2634,12688,  518,12688,12688,  773, 2652,
    12688, 2339,12688, 6095,    0,12688,12688,  248,  477,    0,
    12688,12688,  558,  730,12688,12688, 2673,12688,12688,    0,
     2687,    0,12688,12688,12688,12688, 2692,12688,12688, 2699,
    12688,12688,  273, 6092,12688,12688,  292, 6091,    0,12688,
     6088, 6086, 6085,12688,12688,    0, 6081,    0,12688, 6126,

     6078,12688,12688, 6134, 6092, 6072,12688,   90,  501, 6035,
        0,12688,12688, 6017,  461,12688,12688,    0, 6075, 6026,
        0,12688,12688,12688,12688, 2703,    0,    0,12688,12688,
        0,12688,12688, 6025, 6033,12688,12688, 6022,12688,12688,
     6016,  664, 2883, 2957, 2489, 2665, 6014, 6070,12688, 6052,
     6045,    0,  228,  614,12688,12688, 3038, 6043,  278,  501,
     2725,  793, 2729, 2727,  960,  640,  656, 2694,  680,  725,
      748,  963,12688, 6054,  228, 3119, 5968, 2209,12688,12688,
        0, 2783, 2331, 2722, 2819, 2654, 2822, 2831,  511, 2314,
     1046, 1094, 2824,  556, 2858, 2878, 1091,12688, 1098, 1099,

     2883, 2910, 6025,12688, 2214, 2239, 2662, 1121,12688, 2803,
    12688, 5965,  575,    0, 6006, 2299,12688, 5960, 2914, 2921,
     6001, 2927, 2967, 2310, 2510, 3129, 2971, 2553,12688, 5957,
     2596, 5996, 6014,12688, 2928, 2664, 2935, 2564,12688, 2958,
     6013,  764, 3210, 3291, 6012,12688, 3116, 2699, 3118, 6011,
     2707,12688, 3132, 2996, 3159, 5993, 3003, 3163,    0, 3189,
     2774, 3202, 3241, 3026, 2385,    0, 2865,12688, 5950, 6008,
    12688, 2872,12688, 5948, 6006,12688, 3031,12688, 5946, 6004,
    12688, 2960, 2972, 3135, 3038,12688, 3213, 2230, 2555,12688,
     5944, 3245, 3253, 3325, 5985, 3172,12688, 5942, 3331, 3335,

     5983, 3358, 3362, 3268, 3371, 3389, 3279,12688, 5940, 3319,
        0, 5986,    0, 3382,12688, 5937, 3394, 3398, 3402, 5978,
     3407,12688, 5930, 5976, 5931, 3412,12688, 5924,    0, 3425,
    12688, 5923,    0, 5921, 2245,12688, 5933, 5921,12688,    0,
     3429,12688, 5918,    0, 5916,  754, 5972, 5970,12688, 5910,
        0,12688,12688, 5907, 5908, 3433,12688, 5907, 2893,12688,
     2937, 3437,12688, 5906, 3441,12688, 5907, 5904,    0,  488,
     5908,  924,    0, 5899, 5905, 5903,  649, 1026, 3445,12688,
     5892,    0, 3451,12688, 5888,    0, 3455,12688, 5887, 3459,
    12688, 5885, 1095,    0, 5926, 5883, 1106,    0, 5924, 5881,

        0, 5937, 5930,  645,    0, 5877,    0, 2390, 5875, 5933,
    12688, 5927,12688, 5911, 2163, 5871,    0,    0, 5870,  784,
     5916,    0, 5868,    0, 3463,12688, 5867,    0,    0, 5865,
     5902, 5857, 5856, 5857, 2335, 5851, 5891,    0, 5895,  638,
     5883,12688,12688, 5882, 3494, 5880, 5888,12688, 5887, 5871,
     2265, 2259, 2311, 2351, 3467, 2392, 2418, 2576, 2596, 2653,
     1099, 2724, 2829,12688, 2723, 2829, 2893, 2952, 3138, 5885,
      990, 3575,    0, 1011, 5822, 3576,12688,12688,12688, 3654,
        0,    0, 3581, 3593, 3607, 3597, 2204, 3454, 3614,12688,
     3685, 3692, 2475, 3569, 3586, 3588, 5837, 2218, 5836, 3696,

     3709, 5835, 5872, 3594, 3624, 3698, 2412, 3771, 3721, 3739,
     3741, 5883, 3476, 3477, 5831, 5830, 5824, 3672, 3782, 3784,
     5823, 3807, 3817, 3812, 5822, 5818,    0, 5862, 5815, 3840,
     3851, 3855, 5814, 5804, 5812, 5811, 5810,    0, 5807, 5805,
     5804, 5808, 5802, 5801, 5800, 5799, 5790, 5802, 5790, 5793,
     5797, 3184, 5781, 5790, 5790, 5781, 5780, 5774, 5772, 5771,
     2232, 5770, 2423, 5769,12688,12688,12688,12688, 5767, 5802,
     2709, 5730, 2451, 3149, 5721,    0, 5717,12688,  786,    0,
     5760, 5713, 5712, 5711,12688, 5710, 5709, 3209, 3863, 5707,
     5761,    0,12688,12688,12688, 5739, 3736, 5738,    0, 3007,

    12688, 5733, 3155, 3207, 3211, 3265, 3278, 3283, 3318, 3327,
     5738, 3297, 3418, 3592, 3424, 3417, 3422,12688, 3021,12688,
        0, 5680, 3307, 3864, 5679, 3942, 5705, 3881, 3908, 3893,
     3900, 3975, 3979, 3868, 5686, 5685, 3891,12688, 3935, 5682,
     3981, 4058, 4139, 4008,12688, 5681, 5680, 5679, 3987, 5678,
     3896, 4092, 5677, 5675, 5721, 5664, 3986, 4096, 5660, 5659,
     5656, 5655, 5654,    0, 5653, 5652, 5647, 4111, 5646, 5639,
     5638, 5637, 5641, 5633,12688, 5627, 5627, 5630,12688, 5621,
     5629, 5609, 5609, 5612, 5607, 5601, 5600, 5597, 5594, 5591,
     5590, 3481, 5589,    0,    0,    0, 5585, 5584, 2204, 5630,

     5574, 5572, 5571, 5567, 5528, 3924, 4447,12688, 4481, 4023,
    12688, 4468, 3436, 4468, 3548, 3569, 3585, 3615, 3725, 3665,
     3742,12688, 3685, 3712, 3722, 3580, 3930, 4416, 4011, 4120,
     4028, 4112, 4197, 4032, 4430, 4429, 4426, 4152, 4203, 4423,
     4420, 4418, 4177, 4416, 4230, 4236, 4412, 4405, 4404, 4243,
     4266, 4400, 4389, 4388, 4382, 4375, 4369, 4362, 4356, 4345,
     4338, 4326,  617, 4341,  991, 4320, 4322, 4327, 4310, 4302,
     4295, 4294, 4293, 4284, 4283, 4265, 4276,  142, 4259, 4262,
     4255,  949, 4246, 4235, 4232, 4224, 4212, 4202, 4190, 4189,
     4184, 4236, 4230,    0, 4164, 4156, 2583, 4153, 4148, 4135,

     4130, 4119, 4043, 4102, 4128, 4081, 3768,12688, 3800, 3850,
     3838, 3851, 4041,12688, 3867, 4098, 4122, 3947, 3958, 4088,
    12688, 4202, 4224, 4275, 4254, 4052, 4051, 4023, 4284, 4293,
     4017, 4000, 3974, 4290, 3969, 3968, 3961, 3928, 3926,12688,
     3917, 3916, 3908, 3907, 3890, 3874, 3871, 2368, 3858, 3848,
     3840, 3831, 3817, 3821, 3827, 3823, 3812, 3805, 3781, 3777,
     3776, 3770, 3769,12688, 3752,    0,    0, 3741,12688, 3720,
     3585, 3718, 3718, 3721, 3681, 3669, 3664, 3662, 3629, 3628,
     3621, 3594, 3576, 3574,12688, 3602, 3591, 3544, 3539, 3535,
     3534, 3436, 3434, 3430, 4045, 3428, 3420, 3978, 4026, 4033,

     4064, 3417, 4155, 4108, 4137, 2330, 4201, 4280, 4281,    0,
     4296, 3370, 3366, 3362, 4303, 4311, 3358, 3340, 3318, 4341,
     3317, 3309, 3308, 3297, 3286, 3281, 3271, 3270, 3247, 3243,
     3242, 3234, 3229,    0, 3219, 3221, 3195, 3188, 3191, 3172,
     3162,12688, 3144, 3127, 3119, 3110, 3109, 3108,    0,12688,
    12688, 3102, 3098,12688, 3101, 3082, 3070, 3069, 2961, 2943,
     2933, 2932, 2887, 2885, 2878, 2870, 2856, 2851, 2850, 2849,
     2843, 2834, 2829, 2828, 4324, 2816, 2827, 4142, 4164, 2545,
     4323, 4340, 2850, 2838, 4361, 4367, 4368, 4356,12688,12688,
    12688, 4364, 4372,12688,12688,12688, 4366,12688,12688,12688,

    12688,12688,12688,12688,12688,12688,12688,12688, 2790,12688,
     2789, 2791, 2770, 2768, 2740, 2747, 2720, 2724, 2706,12688,
    12688,12688,12688,12688, 2676, 2675, 3640, 2662, 2661,12688,
    12688,12688,12688,12688,12688,12688,12688,12688,12688,12688,
    12688,12688,12688,12688,12688, 4223,12688, 2665, 2652, 2651,
     4376,12688, 4396,12688,12688,12688, 4401, 4403, 4408, 2609,
     2582, 2578, 2561, 2574, 2542, 2543, 2493, 2471, 2472, 2469,
     2446,12688, 2424, 2429, 3700,12688,12688,12688, 2399, 4413,
     2380, 4421, 4426, 4431, 2621, 2308, 2306, 2289, 2270, 2238,
     2213, 2178, 2155, 2133, 1076, 3718, 1018,  728, 4425, 4432,

     2739,  683,  674,  650,  615,  576,  536,  496,12688, 3737,
      470, 4438, 4442, 2475,  458,  251,  240, 3865,12688,  229,
     3875, 2476,  129, 4012,   68, 3069,   50, 4033,  552,12688,
     4448,12688, 4520, 4557, 4594, 4631, 4668, 4705, 4742, 4779,
     4816, 4853, 4890, 4927, 4964, 5001, 5038, 5075, 5112, 5149,
     5186, 5223, 5260, 5297, 5334, 5371, 5408, 5445, 5482, 5519,
     5556, 5593, 5623, 5646, 5671, 5702, 5724, 5755, 5791, 5822,
     5852, 5888, 5924, 5960, 5996, 6033, 6064, 6101, 6133, 6169,
     6205, 6241, 6277, 6298, 6335, 6372, 6409, 6440, 6476, 6512,
     6548, 6584, 6620, 6656, 6686, 6722, 6743, 6780, 6801, 6838,

     6875, 6896, 6933, 6970, 7006, 7039, 7076, 7097, 7134, 7164,
     7194, 7231, 7252, 7289, 7326, 7363, 7400, 7421, 7444, 7481,
     7518, 7555, 7586, 7622, 7652, 7675, 7696, 4426, 4435, 7719,
     7755, 7789, 7820, 7851, 7881, 7911, 7947, 7983, 8020, 8056,
     8086, 8123, 8154, 8185, 8222, 8259, 8291, 8322, 8358, 8394,
     8431, 8467, 8503, 8524, 8561, 8598, 8635, 8666, 8697, 8733,
     8769, 8805, 8841, 8877, 8913, 8943, 8973, 9003, 9039, 9075,
     9096, 9133, 9154, 9191, 9228, 9258, 9279, 9316, 9353, 9389,
     9422, 9459, 9480, 9517, 9547, 9577, 9607, 9637, 9674, 9695,
     9732, 9769, 9806, 9843, 4460, 9875, 9898, 9919, 9956, 9993,

    10030,10066,10093,10130,10151,10174,10211,10247, 4442,10276,
    10311, 4480, 4474,10347,10367,10398,10429,10459,10496,10526,
    10557,10588,10625,10657,10689,10726,10762,10793,10824,10860,
    10896,10926,10956,10992,11028,11058,11095,11125,11155,11187,
     5615,11219,11240,11263,11299,11333,11354,11377,11402,11423,
    11460, 4486,11493,11528,11565, 5605,11601,11621,11652,11689,
    11720,11757,11789,11820,11856,11892,11922,11958,11994,12024,
     5613, 5639,12045,12077,12100,12136,12154,12179,12216,12252,
    12272,12309,12341,12368,12405,12442,12479,12502,12539,12576,
    12613,12650, 5685

    } ;

static const flex_int16_t yy_def[1594] =
    {   0,
     1333, 1333, 1332,    3, 1334, 1334, 1335, 1335, 1332,    9,
     1332,   11, 1336, 1336, 1337, 1337, 1332,   17, 1332,   19,
     1338, 1338, 1339, 1339, 1340, 1340, 1332,   27, 1332,   29,
     1332,   31, 1332,   33, 1332,   35, 1332,   37, 1341, 1341,
     1332,   41, 1342, 1342, 1332,   45, 1343, 1343, 1344, 1344,
     1345, 1345, 1332,   53, 1346, 1346, 1347, 1347, 1348, 1348,
     1349, 1349, 1332,   63, 1350, 1350, 1351, 1351, 1332,   69,
     1332,   71, 1352, 1352, 1352, 1352, 1352, 1352, 1332,   79,
     1353, 1353, 1354, 1354, 1355, 1355, 1356, 1356, 1357, 1357,
     1358, 1358, 1359, 1359, 1360, 1360, 1361, 1361, 1332, 1332,

     1332, 1332, 1332, 1362, 1363, 1364, 1364, 1365, 1332, 1366,
     1367, 1368, 1367, 1332, 1332, 1364, 1364, 1365, 1364, 1332,
     1332, 1332, 1369, 1370, 1370, 1370, 1332, 1332, 1332, 1332,
     1332, 1332, 1371, 1332, 1332, 1332, 1332, 1372, 1373, 1332,
     1374, 1332, 1375, 1332, 1332, 1376, 1377, 1377, 1332, 1377,
     1332, 1332, 1378, 1379, 1379, 1379, 1332, 1379, 1332, 1332,
     1380, 1381, 1332, 1382, 1383, 1332, 1332, 1384, 1332, 1332,
     1332, 1385, 1332, 1332, 1332, 1386, 1332, 1332, 1332, 1387,
     1388, 1388, 1388, 1332, 1332, 1389, 1332, 1332, 1332, 1332,
     1390, 1332, 1332, 1332, 1332, 1391, 1392, 1332, 1393, 1332,

     1394, 1332, 1332, 1395, 1332, 1332, 1332, 1396, 1332, 1332,
     1332, 1397, 1332, 1398, 1332, 1332, 1332, 1332, 1399, 1332,
     1400, 1332, 1401, 1332, 1332, 1332, 1332, 1402, 1332, 1332,
     1332, 1332, 1403, 1332, 1404, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1405, 1332, 1332, 1405, 1332,
     1332, 1332, 1332, 1332, 1406, 1332, 1332, 1332, 1332, 1407,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1408,
     1332, 1409, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1410, 1332, 1332, 1332, 1411, 1332, 1412, 1332,
     1332, 1332, 1332, 1332, 1332, 1413, 1332, 1414, 1332, 1332,

     1332, 1332, 1332, 1415, 1416, 1332, 1332, 1332, 1332, 1332,
     1417, 1332, 1332, 1332, 1332, 1332, 1332, 1418, 1419, 1332,
     1420, 1332, 1332, 1332, 1332, 1332, 1421, 1421, 1332, 1332,
     1422, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1423, 1423, 1332, 1332, 1332, 1424, 1332, 1425,
     1426, 1427, 1332, 1426, 1332, 1332, 1332, 1426, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1428, 1423,  376,  376, 1332, 1332,
     1429, 1430, 1431, 1431, 1431, 1431, 1430, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1426, 1332, 1332, 1426, 1426,

     1332, 1332, 1432, 1332, 1433, 1434, 1433, 1332, 1332, 1433,
     1332, 1332, 1435, 1436, 1332, 1332, 1332, 1332, 1332, 1437,
     1332, 1438, 1438, 1439, 1440, 1437, 1438, 1332, 1332, 1332,
     1440, 1441, 1442, 1332, 1443, 1444, 1443, 1332, 1332, 1443,
     1445, 1445, 1446, 1446, 1445, 1332, 1447, 1448, 1447, 1445,
     1332, 1332, 1447, 1332, 1449, 1332, 1332, 1450, 1451, 1450,
     1452, 1449, 1450, 1452, 1453, 1454, 1332, 1332, 1332, 1455,
     1332, 1332, 1332, 1332, 1456, 1332, 1332, 1332, 1332, 1457,
     1332, 1458, 1459, 1458, 1332, 1332, 1458, 1332, 1460, 1332,
     1332, 1332, 1461, 1462, 1332, 1332, 1332, 1332, 1332, 1463,

     1332, 1464, 1464, 1465, 1463, 1464, 1332, 1332, 1332, 1465,
     1466, 1467, 1468, 1332, 1332, 1332, 1332, 1469, 1470, 1332,
     1332, 1332, 1332, 1471, 1332, 1332, 1332, 1332, 1472, 1332,
     1332, 1332, 1473, 1332, 1474, 1332, 1475, 1332, 1332, 1476,
     1332, 1332, 1332, 1477, 1332, 1332, 1478, 1478, 1332, 1332,
     1479, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1480, 1332,
     1480, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1481, 1332,
     1332, 1332, 1482, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1483, 1332, 1332, 1332, 1484, 1332, 1332, 1332, 1332,
     1332, 1332, 1485, 1486, 1332, 1332, 1487, 1488, 1332, 1332,

     1489, 1332, 1332, 1332, 1490, 1332, 1491, 1332, 1332, 1492,
     1332, 1493, 1332, 1332, 1332, 1332, 1494, 1495, 1332, 1496,
     1497, 1498, 1332, 1499, 1332, 1332, 1332, 1500, 1501, 1332,
     1332, 1332, 1332, 1332, 1502, 1332, 1503, 1504, 1505, 1332,
     1506, 1332, 1332, 1506, 1332, 1506, 1505, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1507, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1508, 1508, 1509, 1332, 1510, 1502, 1332, 1332, 1332, 1511,
     1512, 1513, 1514, 1514, 1515, 1332, 1332, 1332, 1332, 1332,
     1506, 1332, 1332, 1516, 1516, 1517, 1332, 1518, 1332, 1519,

     1519, 1332, 1520, 1521, 1521, 1522, 1332, 1523, 1524, 1524,
     1525, 1526, 1332, 1527, 1332, 1332, 1332, 1528, 1528, 1529,
     1332, 1530, 1530, 1531, 1332, 1332, 1532, 1533, 1332, 1534,
     1534, 1535, 1332, 1332, 1332, 1332, 1332, 1536, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1537, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1538, 1332, 1539, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1540, 1332, 1332, 1541, 1332, 1332, 1542, 1543,
     1544, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1545, 1332,
     1546, 1547, 1332, 1332, 1332, 1548, 1549, 1548, 1550, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1551, 1551, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1552, 1553, 1332, 1545, 1554, 1555, 1556, 1557, 1557, 1558,
     1332, 1332, 1548, 1559, 1332, 1332, 1560, 1332, 1560, 1332,
     1561, 1562, 1562, 1563, 1332, 1332, 1332, 1332, 1564, 1332,
     1565, 1566, 1332, 1332, 1567, 1332, 1568, 1569, 1332, 1332,
     1332, 1332, 1332, 1570, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1571, 1572, 1573, 1332, 1332, 1574, 1575,

     1332, 1332, 1332, 1332, 1332, 1576, 1332, 1332, 1577, 1578,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1579, 1332, 1332, 1332, 1332, 1332, 1576, 1332, 1332, 1580,
     1580, 1581, 1332, 1559, 1332, 1332, 1332, 1561, 1563, 1332,
     1332, 1332, 1564, 1332, 1566, 1566, 1332, 1332, 1332, 1569,
     1569, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1582, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1583, 1584, 1573, 1332, 1332, 1574, 1332, 1332, 1332,

     1332, 1332, 1576, 1332, 1577, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1585, 1332, 1332, 1579, 1579, 1332, 1332, 1576,
     1332, 1580, 1580, 1581, 1559, 1332, 1332, 1332, 1561, 1563,
     1332, 1332, 1332, 1564, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1586, 1587, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1583, 1584, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1576, 1332, 1332, 1332, 1332, 1332,

     1332, 1585, 1585, 1332, 1332, 1332, 1576, 1580, 1580, 1588,
     1559, 1332, 1332, 1332, 1561, 1563, 1332, 1332, 1332, 1564,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1589, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1590, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1576, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1576, 1580, 1580, 1559, 1332, 1332,
     1332, 1561, 1563, 1332, 1332, 1332, 1564, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1576, 1332, 1332, 1332, 1332,
     1591, 1332, 1592, 1332, 1332, 1332, 1576, 1580, 1332, 1593,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1591, 1591,
     1592, 1592, 1576, 1580, 1593, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1576, 1580,

     1593, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1576, 1580, 1593, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1593, 1332, 1332, 1332, 1593, 1332, 1332, 1593, 1332,
     1593,    0, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332

    } ;

static const flex_int16_t yy_nxt[12771] =
    {   0,
      101,  102,  103,  101,  102,  101,  104,  101,  105,  101,
      101,  101,  101,  101,  101,  106,  101,  107,  108,  101,
      106,  106,  106,  101,  101,  109,  101,  101,  101,  110,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  101,  112,  101,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  113,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  101,  101,  101,
      101,  106,  114,  128,  128,  114,  171,  171,  175,  175,
      172,  172,  176,  176,  215,  115,  116,  215,  117,  118,

      222,  222,  119,  119,  120,  243,  243,  266,  266,  414,
      129,  129,  223,  223,  415,  394,  231,  232,  394,  231,
      279,  233,  411,  614,  411,  279, 1134,  224,  224,  431,
      431,  431,  431,  130,  130, 1328,  173,  173,  177,  177,
      231,  232,  328,  231,  216,  233,  337,  216,  614,  337,
      225,  225,  329,  330,  290,  244,  244,  267,  267,  120,
      121,  121,  122,  121,  121,  121,  123,  234,  121,  121,
      280,  121,  121,  121,  121,  280,  121,  340,  121,  125,
      236,  291,  237,  125,  121,  121,  394,  121,  121,  394,
      546,  234,  238,  546, 1327,  547,  338,  239,  236,  338,

      237,  256, 1069,  257,  291,  252,  253,  240,  252, 1070,
      238,  121,  126,  121,  352,  239,  252,  253,  554,  252,
      299,  340,  555,  345,  346,  240,  345,  341,  258,  640,
      241,  256,  640,  257,  261,  300,  262,  121,  121,  121,
      121,  121,  121,  122,  121,  121,  121,  123,  241,  121,
      121,  259,  121,  121,  121,  121,  254,  121,  258,  121,
      125,  263,  273,  290,  125,  121,  121,  254,  121,  121,
      301,  341,  274,  275,  347,  328,  411,  353,  411,  648,
      488,  259,  648,  488,  264,  329,  330,  354,  672,  276,
      291,  594,  121,  126,  121,  490,  595, 1325,  399,  352,

      400,  400,  400,  464,  464,  464,  464,  570,  673,  352,
      598,  571,  277,  291,  412,  599, 1134, 1134,  121,  121,
      121,  121,  131,  131,  132,  131,  131,  131,  131,  131,
      133,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  131,  134,  131,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  131,

      131,  131,  131,  133,  135,  136,  137,  136,  136,  135,
      135,  135,  138,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  139,  135,  135,  135,  135,  140,  135,  135,
      135,  135,  135,  135,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  135,  142,  135,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  135,  135,  135,  143,  141,  144,  144,  145,  144,
      144,  144,  146,  290,  144,  144,  273,  144,  144,  144,

      144,  261,  144,  262,  144,  148,  274,  275,  290,  148,
      144,  149,  394,  144,  144,  394,  406,  407,  649,  559,
      292,  407,  559,  276,  619, 1323,  401,  290,  263,  401,
      560,  615,  290, 1320,  299,  292,  570,  144,  150,  144,
      572,  618,  402,  292,  416,  417,  277,  416,  393,  300,
      407,  264,  650,  747,  293,  748,  615,  394,  292,  293,
      394, 1318,  312,  144,  144,  144,  144,  144,  144,  145,
      144,  144,  144,  146,  313,  144,  144,  293,  144,  144,
      144,  144,  293,  144,  301,  144,  148,  312,  536,  314,
      148,  144,  149,  414,  144,  144, 1332,  407,  415,  313,

      537,  407, 1134,  393,  682,  322,  418,  342,  428,  429,
      342,  428,  315,  322,  314,  323,  324,  574,  144,  150,
      144,  575, 1331,  323,  324,  467,  468,  576,  467,  577,
      407,  641,  325,  472,  473,  343,  472,  315,  538,  640,
      325, 1317,  640,  352,  144,  144,  144,  144,  151,  151,
      152,  151,  151,  151,  153,  326,  151,  151,  344,  151,
      151,  151,  151,  326,  151,  342,  151,  155,  342,  332,
      430,  155,  151,  156, 1050,  157,  151,  333, 1316,  436,
      437,  662, 1051,  351,  437,  351,  351,  469,  351,  351,
      351, 1052,  333,  343,  333,  474,  661,  352,  767,  151,

      158,  151,  510,  510,  510,  510,  662,  355,  754,  351,
      356,  351,  357,  437,  667, 1134,  344,  356,  356,  334,
      335,  661,  755,  352,  768,  151,  151,  151,  151,  151,
      151,  152,  151,  151,  151,  153,  332,  151,  151,  667,
      151,  151,  151,  151,  333,  151,  359,  151,  155,  351,
     1134, 1315,  155,  151,  156,  546,  157,  151,  546,  333,
      547,  333,  419,  419,  419,  419,  419,  419,  419,  419,
      707, 1332,  437,  668, 1332,  351,  437, 1332,  669,  420,
      151,  158,  151,  420,  421, 1332,  334,  335,  421,  574,
      778,  445,  778,  578,  655,  655,  655,  655,  668,  576,

     1311,  577,  780,  669,  780,  437,  151,  151,  151,  151,
      135,  159,  160,  159,  159,  135,  135,  135,  161,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  162,  135,
      135,  135,  135,  163,  135,  135,  135,  135,  135,  135,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  135,  142,  135,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  135,  135,  135,
      165,  164,  166,  166,  167,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  166,  169,  166,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  166,
      166,  166,  166,  168,  178,  178,  179,  178,  178,  178,
      180,  661,  178,  178,  749,  178,  178,  178,  178,  750,
      178,  819,  178,  182,  819,  483,  484,  182,  178,  178,

      484,  178,  178,  661,  351,  661,  351,  351, 1074,  351,
      351,  351,  674,  477,  478,  674,  477,  395,  352,  446,
      395,  388, 1075,  353,  388,  178,  183,  178,  661,  484,
      661,  448,  449,  396,  389,  389,  449,  390,  391,  393,
      446,  392,  392,  393,  387,  352, 1054,  397,  398,  343,
      397,  178,  178,  178,  178,  178,  178,  179,  178,  178,
      178,  180, 1055,  178,  178,  449,  178,  178,  178,  178,
      351,  178,  344,  178,  182,  479, 1332,  484,  182,  178,
      178,  484,  178,  178, 1332, 1310,  752,  419,  419,  419,
      419,  756,  397,  398,  393,  397, 1332,  449,  393,  693,

      663,  449,  693,  663,  420, 1332,  178,  183,  178,  421,
      484,  424,  687,  594,  688,  688,  688,  399,  595,  400,
      400,  400,  408,  409,  598,  408,  664,  352,  352,  599,
      449, 1308,  178,  178,  178,  178,  184,  184,  185,  184,
      184,  184,  184,  184,  186,  184,  184,  184,  184,  184,
      184,  184,  187,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  184,  188,  184,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  184,  184,  184,  184,  186,  189,  189,
      190,  189,  189,  189,  189,  189,  191,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  189,
      192,  189,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  189,  189,  189,  189,  191,

      193,  194,  195,  194,  194,  193,  193,  193,  196,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  197,  193,
      193,  193,  193,  198,  193,  193,  193,  193,  193,  193,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  193,  200,  193,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  193,  193,  193,
      201,  199,  202,  202,  203,  202,  202,  202,  202,  202,
      204,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  202,  205,  202,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  202,
      202,  202,  202,  204,  206,  206,  207,  206,  206,  206,
      206,  206,  208,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  206,  209,  206,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  206,  206,  206,  206,  208,  210,  210,  211,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  210,  213,  210,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  210,  210,  210,  210,  212,  217,  217,
      218,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  217,
      220,  217,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  217,  217,  217,  217,  219,
      226,  226,  227,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  226,  229,  226,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  226,  226,  226,
      226,  228,  245,  246,  247,  245,  246,  245,  245,  245,

      245,  245,  245,  245,  248,  245,  245,  245,  245,  249,
      249,  245,  249,  249,  249,  245,  245,  245,  245,  245,
      245,  245,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  245,  250,  245,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  245,
      245,  245,  245,  245,  268,  268,  269,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  268,  271,  268,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  268,  268,  268,  268,  270,  281,  281,  282,  281,
      281,  281,  281,  281,  283,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  281,  284,  281,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  281,  281,  281,  281,  283,  285,  285,
      286,  285,  285,  285,  285,  285,  287,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  285,
      288,  285,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  285,  285,  285,  285,  287,
      294,  294,  295,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  294,  297,  294,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  294,  294,  294,

      294,  296,  303,  303,  774,  693,  304,  304,  693, 1134,
      778,  305,  305,  454,  454,  454,  454,  677, 1307,  306,
      306,  678,  780,  426,  426,  426,  426,  307,  307,  774,
      455,  488,  406,  407,  488,  456,  414,  407,  308,  308,
      420,  415,  309,  309,  450,  421,  490,  536,  496,  497,
      594,  496,  310,  310, 1134,  595, 1332,  449,  695,  537,
      679,  449,  695,  308,  308,  446,  407,  309,  309,  316,
      316,  317,  316,  316,  316,  318,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  680,  316,  316, 1134,
      449,  695,  316,  316,  316,  316,  316,  538,  316,  803,

      416,  417,  425,  416,  804, 1306,  419,  419,  419,  419,
      498,  701,  701,  701,  701,  395,  408,  409,  395,  408,
      316,  320,  316,  420,  803,  423,  423,  423,  421,  804,
      424,  686,  674, 1332,  407,  674,  674,  393,  407,  674,
      565,  566, 1305,  565, 1304,  805,  316,  316,  316,  316,
      316,  316,  317,  316,  316,  316,  318,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  407,  316,  316,
      805, 1303, 1302,  316,  316,  316,  316,  316,  410,  316,
     1184,  507,  508,  682,  507,  425,  713,  438,  439,  713,
      438,  567,  393,  451,  452,  770,  451,  459, 1332,  806,

      789,  316,  320,  316, 1332,  437, 1184, 1254,  675,  437,
     1332,  449,  675,  514,  515,  449,  514,  771,  446, 1332,
      454,  454,  454,  454,  806, 1133, 1252,  316,  316,  316,
      316,  360,  492,  492,  492,  492,  807,  455,  437,  446,
     1134,  598,  456,  509,  449,  361,  599,  521,  522,  440,
      521,  494,  494,  494,  495,  453,  362,  894,  363,  364,
      808,  807,  895,  365,  366,  462,  462,  462,  462,  367,
      368,  369,  370,  371,  372,  516,  693,  526,  527,  693,
      526,  362,  455,  363,  364,  808, 1298,  456,  365,  366,
      345,  346, 1297,  345,  367,  368,  369,  370,  371,  372,

      373,  373,  373,  373,  457,  454,  454,  457, 1296,  523,
      374,  431,  431,  431,  431,  459,  485,  486,  373,  485,
      373,  455,  375,  460,  460,  460,  456,  682,  682,  457,
      454,  454,  457, 1332,  484, 1326, 1295, 1294,  484,  528,
      459,  347, 1322, 1293,  461,  375,  455,  499,  499,  499,
      499,  456,  377,  378,  428,  429,  488,  428, 1292,  488,
      517,  517,  517,  517,  500,  438,  439,  484,  438,  501,
      379,  490,  380,  381,  373,  373,  373,  373,  487,  519,
      519,  519,  520,  461,  374,  499,  499,  499,  499,  778,
      530,  531,  373,  530,  373, 1250,  375,  431,  431,  431,

      431,  780,  500,  499,  499,  499,  499,  501, 1291,  809,
     1290,  505,  505,  505,  505,  499,  499,  499,  499,  375,
      500, 1250,  503,  503,  503,  501,  384,  385,  500, 1289,
      386, 1288,  500,  501,  809,  556,  557,  501,  556,  539,
      539,  539,  539,  810,  379, 1287,  380,  381,  397,  398,
     1286,  397,  532,  562,  563,  674,  562,  539,  674,  539,
      355,  540,  351,  356,  351,  357,  345,  346,  810,  345,
      356,  356, 1285,  682,  579,  580,  352,  579, 1278, 1277,
     1332,  407,  504,  705,  540,  407, 1301,  705,  583,  584,
      504,  583, 1276,  587,  588,  663,  587,  558,  663,  359,

      590,  591,  661,  590,  625,  626,  682,  625,  451,  452,
      892,  451,  539,  892,  407,  564,  705,  347,  710,  684,
     1274,  664,  710,  674,  665, 1273,  674,  661,  351,  441,
      441,  675,  441,  441,  441,  442,  581,  441,  441,  666,
      441,  441,  441,  441, 1271,  441, 1270,  441,  444,  665,
      585,  710,  444,  441,  441,  589,  445,  441,  651,  656,
      661,  659,  592,  657,  666,  660,  627,  661,  813,  652,
      653,  654,  658, 1269,  682,  464,  464,  464,  464, 1268,
      441,  444,  441,  651,  656,  661,  659, 1267,  657,  683,
      660,  682,  661,  813,  652,  653,  654,  658,  351,  675,

      351,  351, 1314,  351,  351,  351,  441,  441,  441,  441,
      541,  542,  352,  541, 1266, 1265,  539,  539,  539,  539,
      674,  406,  407,  674, 1264,  401,  407,  677,  401, 1263,
      812,  678,  388,  812,  539,  388,  539,  351,  540,  351,
      351,  402,  351,  351,  351,  389,  389,  393,  390,  391,
     1134,  352,  392,  392,  393,  407,  664, 1262, 1261,  395,
      343,  540,  395,  814,  351, 1256,  467,  468,  696,  467,
      679,  682,  543,  472,  473,  402,  472, 1255, 1247,  689,
      690,  393,  689,  344,  401,  685,  346,  401,  814,  539,
      373,  373,  373,  373,  559,  691,  680,  559, 1245, 1244,

      402,  692,  393,  351, 1243,  560,  393,  352,  373,  393,
      373,  401,  634, 1242,  401,  419,  419,  419,  419, 1241,
     1240, 1239,  426,  426,  426,  426, 1238,  686,  419,  419,
      419,  419,  420,  393,  815,  634,  393,  421, 1332,  420,
     1237, 1332,  377,  378,  421,  420,  436,  437, 1236, 1332,
      421,  437,  424, 1332,  437, 1235,  692, 1234,  437,  815,
      379,  393,  380,  381,  373,  373,  373,  373,  419,  419,
      419,  419,  419,  419,  419,  419,  436,  437,  483,  484,
      437,  437,  373,  484,  373,  420,  634,  437,  393,  420,
      421,  719,  424,  816,  421,  719,  424,  454,  454,  454,

      454,  425, 1233, 1232,  457,  454,  454,  457,  911,  634,
      437,  911,  484, 1231,  455,  459,  377,  378,  816,  456,
      635,  455,  819,  706,  719,  819,  456,  464,  464,  464,
      464, 1230,  477,  478,  379,  477,  380,  381,  642,  485,
      486,  642,  485,  642,  642,  642,  642,  642,  642,  642,
      642,  643,  642,  644,  642,  644,  645,  642,  646,  646,
      646,  642,  642,  642,  642,  642,  642,  647,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  642,
      642,  642,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  642,  642,  642,  642,  644,
      674,  682,  446,  674, 1332, 1329, 1332, 1332, 1332, 1332,
      426,  426,  426,  426,  448,  449, 1332,  449,  446,  449,
     1229,  449, 1228,  446, 1332, 1332, 1332,  420, 1332, 1227,
      448,  449,  421, 1332,  484,  449, 1226, 1225,  484,  446,
      462,  462,  462,  462,  457,  454,  454,  457,  449,  817,
      449, 1332, 1224,  496,  497,  459,  496,  455,  566, 1222,
     1221,  455,  456,  614,  449,  879,  456,  484,  879, 1220,
      457,  454,  454,  457,  817, 1219,  675,  711, 1332, 1332,

     1218,  459,  913,  462,  462,  462,  462,  455,  614,  425,
      441,  441,  456,  441,  441,  441,  707,  820,  441,  441,
      455,  441,  441,  441,  441,  456,  441,  913,  708,  444,
     1217,  483,  484,  444,  441,  441,  484,  445,  441,  461,
     1216,  914,  457,  454,  454,  457,  492,  492,  492,  492,
     1215,  880,  915,  459,  492,  492,  492,  492, 1214,  455,
      820,  441,  444,  441,  456,  484,  914, 1213,  495,  510,
      510,  510,  510,  723,  723,  723,  495,  915,  720, 1212,
      507,  508,  461,  507, 1211, 1209,  820,  441,  441,  441,
      441,  441,  441, 1134,  441,  441,  441,  707,  812,  441,

      441,  812,  441,  441,  441,  441,  916,  441,  926,  441,
      444,  926, 1208, 1207,  444,  441,  441, 1206,  441,  441,
      510,  510,  510,  510,  664,  917,  492,  492,  492,  492,
      918,  916,  499,  499,  499,  499,  505,  505,  505,  505,
     1205, 1204,  441,  444,  441,  494,  494,  494,  495,  500,
      917, 1203,  919,  500,  501,  918, 1202,  920,  501,  499,
      499,  499,  499,  499,  499,  499,  499, 1201,  441,  441,
      441,  441,  505,  505,  505,  505,  500,  919, 1200, 1199,
      500,  501,  920,  514,  515,  501,  514, 1198, 1196,  500,
      499,  499,  499,  499,  501,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  500,  521,  522,
     1195,  521,  501,  526,  527,  504,  526,  520,  731,  731,
      731,  520,  519,  519,  519,  520,  530,  531, 1194,  530,
      541,  542, 1191,  541,  556,  557, 1190,  556,  562,  563,
     1189,  562,  565,  566, 1014,  565,  579,  580,  661,  579,
     1177,  504,  583,  584,  923,  583,  587,  588,  924,  587,
      590,  591,  925,  590,  625,  626, 1007,  625,  655,  655,
      655,  655,  687,  661,  688,  688,  688,  713,  713,  923,
      713,  713,  892,  924, 1176,  892, 1174,  925,  459,  459,
     1173, 1007, 1172,  567,  793,  794,  794,  793,  794,  793,

      793,  793,  793,  793,  793,  793,  793,  795,  793,  796,
      793,  796,  797,  793,  798,  798,  798,  793,  793,  793,
      793,  793,  793,  799,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  793,  800,  793,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  793,  793,  793,  793,  796,  819,  674, 1009,  819,
      674,  926,  674,  820,  926,  674, 1154,  406,  695, 1154,
     1171, 1170,  695,  921,  674, 1169,  921,  674,  689,  690,

     1168,  689, 1085, 1009, 1332,  695,  406,  407, 1085,  695,
     1010,  407,  436,  705,  831,  689,  690,  705,  689,  922,
      692,  695,  351, 1011,  351,  351,  820,  351,  351,  351,
     1167,  832, 1166,  682,  824, 1010,  352,  692,  695,  828,
      407, 1272, 1332,  705, 1272,  682,  705,  705, 1011, 1012,
     1165,  834,  820,  675,  825,  825,  829,  825,  675,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      675,  825,  830,  825, 1012,  692,  705, 1164,  825,  825,
      825,  825,  825,  825, 1163, 1162,  689,  690,  351,  689,
      483,  719,  692,  689,  690,  719,  689,  837,  837,  837,

      837, 1275,  833, 1015, 1275,  825,  825,  825,  692,  832,
      839,  839,  839,  839,  352,  692,  436,  437, 1161, 1309,
     1160,  437, 1309,  838,  719, 1159, 1013,  446, 1015, 1013,
     1018,  825,  825,  823,  825,  825,  838, 1158, 1319,  448,
      710, 1319, 1019, 1017,  710, 1332, 1017,  446,  446,  355,
      437,  351, 1014,  351,  910, 1018,  661, 1332,  710,  448,
      449,  841,  710,  692,  449,  352, 1332, 1019,  446,  922,
      692,  441,  441,  710,  441,  441,  441,  707, 1157,  441,
      441,  661,  441,  441,  441,  441, 1156,  441, 1155,  441,
      843,  710, 1153,  449,  843,  441,  441, 1152,  441,  441,

     1332,  719,  483,  484,  844,  719, 1098,  484,  492,  492,
      492,  492, 1149,  851,  851,  851,  851,  351,  492,  492,
      492,  492,  441,  843,  441, 1148, 1147,  723,  723,  723,
      495, 1098, 1146, 1145,  719,  495,  484,  723,  723,  723,
      495,  517,  517,  517,  517, 1099, 1144,  849,  441,  441,
      441,  441,  517,  517,  517,  517,  857,  857,  857,  857,
      731,  731,  731,  520,  674,  674, 1324,  674,  674, 1324,
     1099,  731,  731,  731,  520, 1143, 1321, 1142,  520, 1321,
     1100, 1101,  674, 1141, 1134,  674,  406,  407, 1140, 1139,
     1138,  407,  837,  837,  837,  837,  661,  851,  851,  851,

      851,  689,  690, 1137,  689, 1100, 1101, 1104,  351,  674,
      351,  351,  674,  351,  351,  351, 1136,  831,  838,  495,
      407,  661,  352,  692, 1135,  674,  906,  927,  674, 1132,
     1131,  674, 1104,  682,  674,  934,  839,  839,  839,  839,
      675,  675,  825,  825,  930,  825, 1130,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  675,  825,
      682,  825,  838, 1129, 1128,  932,  825,  825,  825,  825,
      825,  825, 1127, 1126,  351,  931,  689,  690,  692,  689,
      689,  690, 1125,  689, 1124,  675, 1105,  857,  857,  857,
      857, 1003,  933,  825,  825,  825,  833, 1020,  692,  436,

      437,  675,  692, 1106,  437,  483,  484,  675,  352,  520,
      484, 1105,  926, 1324,  446,  926, 1324, 1123, 1178,  825,
      825,  929,  825,  825, 1122, 1121,  448,  449, 1106,  674,
     1119,  449,  674,  437, 1330,  446,  355, 1330,  351,  484,
      351,  910, 1103, 1178,  674, 1103,  674,  674,  938,  674,
      406,  407,  352,  692,  943,  407, 1118,  692,  441,  441,
      449,  441,  441,  441,  707, 1179,  441,  441, 1014,  441,
      441,  441,  441, 1117,  441,  939,  708,  843, 1180, 1114,
      682,  843,  441,  441,  407,  445,  441, 1023, 1021,  674,
     1179, 1025,  674,  492,  492,  492,  492,  517,  517,  517,

      517, 1175, 1095, 1180,  351,  675, 1181, 1113, 1112,  441,
      843,  441,  946,  946,  946,  495,  951,  951,  951,  520,
      675,  674,  675, 1017,  674,  922, 1017,  351, 1097,  351,
      351, 1181,  351,  351,  351,  441,  441,  441,  441,  441,
      441,  352,  441,  441,  441,  707,  792,  441,  441,  922,
      441,  441,  441,  441, 1182,  441, 1103,  441,  843, 1103,
     1107, 1096,  843,  441,  441,  675,  441,  441,  960,  961,
      436,  437,  682,  962,  963,  437,  964,  965, 1094, 1182,
     1024,  966, 1014, 1183,  967,  968,  969, 1022, 1248, 1093,
      441,  843,  441,  351, 1092,  483,  484,  675,  689,  690,

      484,  689,  674,  674,  437,  674,  674, 1091, 1183,  446,
     1249, 1029, 1090, 1248,  831, 1089,  441,  441,  441,  441,
      692,  448,  449, 1088, 1275,  674,  449, 1275,  674,  484,
      446,  492,  492,  492,  492, 1249, 1034,  492,  492,  492,
      492, 1085, 1085, 1084,  517,  517,  517,  517, 1083, 1082,
      946,  946,  946,  495,  682,  449,  946,  946,  946,  495,
     1185, 1081, 1030,  951,  951,  951,  520,  517,  517,  517,
      517, 1080,  406,  407, 1108,  692,  682,  407,  675,  675,
     1109,  674,  674, 1079,  674,  674,  951,  951,  951,  520,
      351, 1078,  351,  351, 1077,  351,  351,  351, 1110,  446,

      675,  675,  436,  437,  352, 1076,  407,  437,  483,  484,
     1111,  448,  449,  484,  406,  407,  449,  446, 1073,  407,
      446,  436,  437, 1072, 1251,  674,  437, 1251,  674,  448,
      449, 1071,  682,  682,  449, 1068,  437, 1067,  446, 1186,
     1115, 1253,  484, 1066, 1253,  449, 1120, 1065,  407, 1116,
     1252, 1187, 1063, 1062, 1061,  437,  351,  675,  675,  483,
      484, 1060,  674,  449,  484,  674, 1188, 1254,  674, 1259,
      346,  674, 1259, 1192,  406,  407, 1059, 1280,  446,  407,
     1280, 1193,  436,  437,  483,  484, 1058,  437, 1057,  484,
      448,  449, 1056,  484, 1246,  449, 1053, 1282, 1049,  446,

     1282,  675,  674, 1252,  674,  674, 1048,  674,  407, 1259,
      346, 1197, 1259, 1047, 1280, 1046,  437, 1280,  484,  682,
     1260, 1045, 1282, 1254,  449, 1282,  674,  674, 1044,  674,
      674, 1257,  674,  674, 1043,  674,  674, 1258,  675, 1321,
     1252, 1042, 1321, 1321,  675,  675, 1321, 1041, 1254,  345,
      346,  681,  345,  671, 1040,  682,  671,  671,  671, 1039,
      347,  671,  681, 1038, 1037,  681,  681,  681, 1283,  821,
     1284, 1036,  821,  821,  821, 1035,  776, 1033,  675, 1032,
      675, 1299, 1031,  682,  682, 1028, 1300,  776, 1027, 1026,
     1312,  776,  776, 1021,  682, 1008,  681, 1313, 1006,  792,

     1260,  827,  675,  675,  827,  827,  827,  681,  675,  675,
      681,  681,  681,  821, 1004,  675,  821,  821,  821,  675,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  302,  302,  302,

      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  348,  348, 1002,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      350,  776,  827,  827, 1001,  827,  827,  827, 1000,  999,
      992,  998,  776,  992,  992,  992,  776,  776,  622,  992,
      350,  996,  995,  350,  350,  350,  991,  990,  989,  350,
      351,  988,  351,  351,  987,  351,  993,  986,  985,  993,
      993,  993,  351,  351,  984,  993,  351,  351,  351,  983,
      982,  981,  351,  358,  980,  358,  358,  358,  358,  979,
      358,  358,  358,  978,  977,  976,  975,  358,  358,  358,

      974,  358,  358,  358,  973,  972,  971,  358,  376,  376,
      376,  376,  827,  970,  959,  827,  827,  827,  376,  958,
      957,  956,  955,  954,  376,  953,  376,  952,  376,  376,
      376,  949,  376,  376,  376,  376,  376,  376,  382,  513,
      382,  382,  948,  382,  947,  944,  942,  941,  940,  937,
      382,  382,  936,  935,  382,  382,  382,  682,  928,  823,
      382,  383,  383,  383,  383,  664,  912,  352,  352,  908,
      907,  383,  905,  904,  903,  902,  901,  383,  622,  383,
      898,  383,  383,  383,  897,  383,  383,  383,  383,  383,
      383,  403,  403,  893,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  405,  771,
      891,  405,  890,  889,  888,  887,  405,  886,  405,  405,
      405,  405,  405,  885,  884,  405,  883,  882,  405,  405,
      405,  881,  405,  405,  405,  878,  877,  876,  405,  413,
      874,  873,  872,  871,  870,  869,  868,  867,  866,  413,
      865,  413,  413,  863,  862,  861,  860,  859,  856,  413,
      513,  854,  413,  413,  413,  853,  850,  848,  413,  422,
      422,  422,  422,  847,  846,  422,  845,  424,  840,  836,

      835,  823,  818,  802,  801,  422, 1332,  422,  422,  352,
      422,  352,  352,  792,  638,  422,  790,  788,  422,  422,
      422,  787,  786,  422,  422,  427,  427,  427,  427,  785,
      784,  427,  783,  782,  622,  777,  775,  773,  611,  611,
      772,  427,  769,  766,  427,  765,  764,  598,  762,  594,
      760,  427,  759,  758,  427,  427,  427,  757,  753,  427,
      427,  423,  423,  423,  423,  752,  751,  423,  749,  746,
      568,  745,  744,  743,  742,  741,  549,  423,  549,  423,
      423,  740,  423,  739,  543,  538,  737,  423,  736,  735,
      423,  423,  423,  734,  525,  733,  423,  432,  432,  432,

      432,  732,  729,  432,  513,  726,  500,  725,  724,  721,
      481,  717,  476,  716,  471,  715,  455,  707,  707,  707,
      434,  424,  702,  432,  420,  699,  432,  432,  432,  414,
      697,  404,  432,  433,  433,  676,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      435,  670,  352,  435,  352,  638,  349,  636,  435,  633,
      435,  435,  435,  435,  435,  632,  631,  435,  630,  623,
      435,  435,  435,  622,  435,  435,  435,  618,  616,  613,

      435,  443,  443,  611,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  447,  447,
      611,  609,  447,  608,  606,  604,  603,  447,  602,  447,
      447,  447,  447,  447,  600,  596,  447,  447,  568,  447,
      447,  447,  554,  447,  447,  447,  553,  552,  550,  447,
      458,  458,  458,  458,  549,  545,  458,  538,  534,  525,
      458,  513,  500,  491,  481,  476,  458,  471,  458,  458,
      455,  434,  434,  420,  404,  352,  458,  349, 1332,  458,

      458,  458, 1332, 1332,  458,  458,  463,  463,  463,  463,
     1332, 1332,  463, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  463, 1332, 1332,  463, 1332, 1332, 1332, 1332,
     1332, 1332,  463, 1332, 1332,  463,  463,  463, 1332, 1332,
      463,  463,  460,  460,  460,  460, 1332, 1332,  460, 1332,
     1332, 1332,  460, 1332, 1332, 1332, 1332, 1332,  460, 1332,
      460,  460, 1332, 1332, 1332, 1332, 1332, 1332,  460, 1332,
     1332,  460,  460,  460, 1332, 1332, 1332,  460,  465,  465,
      465,  465, 1332, 1332,  465, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332,  465, 1332, 1332,  465,  465,  465,
     1332, 1332, 1332,  465,  466, 1332, 1332,  466, 1332, 1332,
     1332, 1332, 1332, 1332, 1332,  466, 1332, 1332,  466,  466,
      466, 1332, 1332, 1332,  466,  470,  470, 1332,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  475,  475, 1332,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  480,
      480, 1332,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  482, 1332, 1332,  482,
     1332, 1332, 1332, 1332,  482, 1332,  482,  482,  482,  482,
      482, 1332, 1332,  482, 1332, 1332,  482,  482,  482, 1332,
      482,  482,  482, 1332, 1332, 1332,  482,  489, 1332, 1332,
      489, 1332, 1332,  489, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  489, 1332, 1332, 1332,  489, 1332, 1332, 1332, 1332,

     1332, 1332, 1332,  489, 1332, 1332,  489,  489,  489, 1332,
     1332, 1332,  489,  493,  493,  493,  493, 1332, 1332,  493,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  493,  493, 1332, 1332, 1332, 1332, 1332, 1332,  493,
     1332, 1332,  493,  493,  493, 1332, 1332, 1332,  493,  502,
      502,  502,  502, 1332, 1332,  502, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332,  502, 1332,  502,  502, 1332,
     1332, 1332, 1332, 1332, 1332,  502, 1332, 1332,  502,  502,
      502, 1332, 1332,  502,  502,  506,  506,  506,  506, 1332,
     1332,  506, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332,  506, 1332, 1332,  506, 1332, 1332, 1332, 1332, 1332,
     1332,  506, 1332, 1332,  506,  506,  506, 1332, 1332,  506,
      506,  503,  503,  503,  503, 1332, 1332,  503, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332,  503, 1332,  503,
      503, 1332, 1332, 1332, 1332, 1332, 1332,  503, 1332, 1332,
      503,  503,  503, 1332, 1332, 1332,  503,  511,  511,  511,
      511, 1332, 1332,  511, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  511, 1332, 1332,  511,  511,  511, 1332,
     1332, 1332,  511,  512, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332,  512, 1332,  512, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  512, 1332, 1332,  512,  512,  512, 1332,
     1332, 1332,  512,  518,  518,  518,  518, 1332, 1332,  518,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  518,  518, 1332, 1332, 1332, 1332, 1332, 1332,  518,
     1332, 1332,  518,  518,  518, 1332, 1332, 1332,  518,  524,
      524, 1332,  524, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      524, 1332, 1332,  524,  524,  524, 1332, 1332, 1332,  524,
      529,  529, 1332,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529, 1332,  529,
      529,  529,  529,  529,  529,  529,  529,  533, 1332, 1332,
      533, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  533, 1332,
     1332,  533,  533,  533, 1332, 1332, 1332,  533,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535, 1332,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  537,  537, 1332,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537, 1332,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  544, 1332, 1332,  544, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  544, 1332, 1332,  544,  544,  544, 1332,
     1332, 1332,  544,  548,  548, 1332,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      551,  551, 1332,  551, 1332,  551,  551,  551,  551,  551,
      551,  551,  551, 1332,  551,  551,  551,  551, 1332,  551,
      551,  551,  551,  551,  551,  551, 1332,  551, 1332,  551,

      551,  551,  551,  551,  551,  551,  551,  561, 1332, 1332,
      561, 1332, 1332, 1332, 1332, 1332, 1332,  561, 1332, 1332,
     1332, 1332,  561,  561, 1332,  561, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  561, 1332, 1332,  561,  561,  561,  569,
      569, 1332,  569, 1332,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569, 1332,  569, 1332,  569,  569,
      569,  569,  569,  569,  569,  569,  573,  573, 1332,  573,
     1332,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573, 1332,  573, 1332,  573,  573,  573,  573,  573,
      573,  573,  573,  582, 1332, 1332,  582, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  582, 1332, 1332,  582,  582,  582,
     1332, 1332, 1332,  582,  586,  586, 1332,  586,  586,  586,
      586,  586,  586,  586,  586, 1332, 1332,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
     1332,  586, 1332,  586,  586,  586,  586,  586,  586,  586,
      586,  593, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  593, 1332,  593,  593, 1332, 1332, 1332, 1332, 1332,
     1332,  593, 1332, 1332,  593,  593,  593, 1332, 1332, 1332,

      593,  597, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  597, 1332,  597,  597, 1332, 1332, 1332, 1332, 1332,
     1332,  597, 1332, 1332,  597,  597,  597, 1332, 1332, 1332,
      597,  601,  601, 1332,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601, 1332,  601, 1332,
      601,  601,  601,  601,  601,  601,  601,  601,  605, 1332,
     1332,  605, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  605,
     1332, 1332,  605,  605,  605, 1332, 1332, 1332,  605,  607,
      607, 1332,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  607,  607,  607, 1332,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607, 1332,  607,  607,
      607,  607,  607,  607,  607,  607,  610,  610, 1332,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  612,  612, 1332,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      617,  617, 1332,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617, 1332,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617, 1332,  617, 1332,  617,
      617,  617,  617,  617,  617,  617,  617,  620, 1332, 1332,
      620, 1332, 1332, 1332, 1332, 1332,  620, 1332,  620, 1332,
     1332,  620,  620,  620, 1332, 1332, 1332,  620,  621, 1332,
      621,  621,  621,  621,  621, 1332, 1332, 1332, 1332,  621,
     1332,  621, 1332, 1332,  621,  621,  621, 1332, 1332, 1332,
      621,  624,  624, 1332,  624,  624,  624,  624,  624,  624,
      624,  624, 1332, 1332,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  624,  624,  624, 1332,  624, 1332,
      624,  624,  624,  624,  624,  624,  624,  624,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628, 1332,
     1332,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  629,  629, 1332,  629,  629,
      629,  629,  629,  629, 1332,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629, 1332,  629, 1332,
      629,  629,  629, 1332, 1332,  629,  629,  629,  629,  629,
      629,  629,  376,  376,  376,  376, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  376, 1332,
      376, 1332,  376,  376,  376, 1332,  376,  376,  376,  376,
      376,  376,  348,  348, 1332,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  637,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  637,  637, 1332, 1332, 1332, 1332, 1332, 1332,  637,
     1332, 1332,  637,  637,  637, 1332, 1332, 1332,  637,  351,
     1332,  351,  351, 1332,  351, 1332, 1332, 1332, 1332, 1332,

     1332,  351,  351, 1332, 1332,  351,  351,  351, 1332, 1332,
     1332,  351,  639, 1332, 1332,  639, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  639, 1332, 1332,  639,  639,  639, 1332,
     1332, 1332,  639,  382, 1332,  382,  382, 1332,  382, 1332,
     1332, 1332, 1332, 1332, 1332,  382,  382, 1332, 1332,  382,
      382,  382, 1332, 1332, 1332,  382,  383, 1332, 1332,  383,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  383,  383, 1332,  383,  383,  383,  383,  403,
      403, 1332,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  405, 1332, 1332,  405,
     1332, 1332, 1332, 1332,  405, 1332,  405,  405,  405,  405,
      405, 1332, 1332,  405, 1332, 1332,  405,  405,  405, 1332,
      405,  405,  405, 1332, 1332, 1332,  405,  694, 1332, 1332,
      694, 1332, 1332, 1332, 1332,  694, 1332,  694, 1332,  694,
      694,  694, 1332, 1332,  694, 1332, 1332,  694,  694,  694,
     1332,  694,  694,  694, 1332, 1332, 1332,  694,  413, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  413, 1332,

      413,  413, 1332, 1332, 1332, 1332, 1332, 1332,  413, 1332,
     1332,  413,  413,  413, 1332, 1332, 1332,  413,  698, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  698, 1332,
     1332,  698,  698,  698, 1332, 1332, 1332,  698,  427,  427,
      427,  427, 1332, 1332,  427, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  427, 1332, 1332,  427, 1332, 1332,
     1332, 1332, 1332, 1332,  427, 1332, 1332,  427,  427,  427,
     1332, 1332,  427,  427,  423,  423,  423,  423, 1332, 1332,
      423, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

      423, 1332,  423,  423, 1332,  423, 1332, 1332, 1332, 1332,
      423, 1332, 1332,  423,  423,  423, 1332, 1332, 1332,  423,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700, 1332,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  432,  432,  432,
      432, 1332, 1332,  432, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  432, 1332, 1332,  432,  432,  432, 1332,
     1332, 1332,  432,  703, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332,  703, 1332, 1332,  703, 1332,
     1332, 1332, 1332,  703, 1332, 1332,  703,  703,  703, 1332,
     1332, 1332,  703,  433,  433, 1332,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      435, 1332, 1332,  435, 1332, 1332, 1332, 1332,  435, 1332,
      435,  435,  435,  435,  435, 1332, 1332,  435, 1332, 1332,
      435,  435,  435, 1332,  435,  435,  435, 1332, 1332, 1332,
      435,  704, 1332, 1332,  704, 1332, 1332, 1332, 1332,  704,

     1332,  704, 1332,  704,  704,  704, 1332, 1332,  704, 1332,
     1332,  704,  704,  704, 1332,  704,  704,  704, 1332, 1332,
     1332,  704,  441,  441, 1332,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  443,
      443, 1332,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  447,  447, 1332, 1332,

      447, 1332, 1332, 1332, 1332,  447, 1332,  447,  447,  447,
      447,  447, 1332, 1332,  447,  447, 1332,  447,  447,  447,
     1332,  447,  447,  447, 1332, 1332, 1332,  447,  709, 1332,
     1332,  709, 1332, 1332, 1332, 1332,  709, 1332,  709, 1332,
      709,  709,  709, 1332, 1332,  709, 1332, 1332,  709,  709,
      709, 1332,  709,  709,  709, 1332, 1332, 1332,  709,  463,
      463,  463,  463, 1332, 1332,  463, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332,  463, 1332, 1332,  463, 1332,
     1332, 1332, 1332, 1332, 1332,  463, 1332, 1332,  463,  463,
      463, 1332, 1332,  463,  463,  460,  460,  460,  460, 1332,

     1332,  460, 1332, 1332, 1332,  460, 1332, 1332, 1332, 1332,
     1332,  460, 1332,  460,  460, 1332, 1332, 1332, 1332, 1332,
     1332,  460, 1332, 1332,  460,  460,  460, 1332, 1332, 1332,
      460,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712, 1332,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  465,  465,
      465,  465, 1332, 1332,  465, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  465, 1332, 1332,  465,  465,  465,

     1332, 1332, 1332,  465,  714, 1332, 1332,  714, 1332, 1332,
      714, 1332, 1332, 1332,  714, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  714, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      714, 1332, 1332,  714,  714,  714, 1332, 1332, 1332,  714,
      466, 1332, 1332,  466, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  466, 1332, 1332,  466,  466,  466, 1332, 1332, 1332,
      466,  470,  470, 1332,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  475,  475,

     1332,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  480,  480, 1332,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  482, 1332, 1332,  482, 1332, 1332, 1332, 1332,
      482, 1332,  482,  482,  482,  482,  482, 1332, 1332,  482,
     1332, 1332,  482,  482,  482, 1332,  482,  482,  482, 1332,

     1332, 1332,  482,  718, 1332, 1332,  718, 1332, 1332, 1332,
     1332,  718, 1332,  718, 1332,  718,  718,  718, 1332, 1332,
      718, 1332, 1332,  718,  718,  718, 1332,  718,  718,  718,
     1332, 1332, 1332,  718,  489, 1332, 1332,  489, 1332, 1332,
      489, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  489, 1332,
     1332, 1332,  489, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      489, 1332, 1332,  489,  489,  489, 1332, 1332, 1332,  489,
      722,  722,  722,  722, 1332, 1332,  722, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  722,  722,
     1332, 1332, 1332, 1332, 1332, 1332,  722, 1332, 1332,  722,

      722,  722, 1332, 1332, 1332,  722,  493,  493,  493,  493,
     1332, 1332,  493, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  493,  493, 1332, 1332, 1332, 1332,
     1332, 1332,  493, 1332, 1332,  493,  493,  493, 1332, 1332,
     1332,  493,  506,  506,  506,  506, 1332, 1332,  506, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  506, 1332,
     1332,  506, 1332, 1332, 1332, 1332, 1332, 1332,  506, 1332,
     1332,  506,  506,  506, 1332, 1332,  506,  506,  503,  503,
      503,  503, 1332, 1332,  503, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  503, 1332,  503,  503, 1332, 1332,

     1332, 1332, 1332, 1332,  503, 1332, 1332,  503,  503,  503,
     1332, 1332, 1332,  503,  511,  511,  511,  511, 1332, 1332,
      511, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      511, 1332, 1332,  511,  511,  511, 1332, 1332, 1332,  511,
      727, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  727, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      727, 1332, 1332,  727,  727,  727, 1332, 1332, 1332,  727,
      512, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      512, 1332,  512, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

      512, 1332, 1332,  512,  512,  512, 1332, 1332, 1332,  512,
      728, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      728, 1332, 1332,  728,  728,  728, 1332, 1332, 1332,  728,
      730,  730,  730,  730, 1332, 1332,  730, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  730,  730,
     1332, 1332, 1332, 1332, 1332, 1332,  730, 1332, 1332,  730,
      730,  730, 1332, 1332, 1332,  730,  518,  518,  518,  518,
     1332, 1332,  518, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  518,  518, 1332, 1332, 1332, 1332,

     1332, 1332,  518, 1332, 1332,  518,  518,  518, 1332, 1332,
     1332,  518,  524,  524, 1332,  524, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  524, 1332, 1332,  524,  524,  524, 1332,
     1332, 1332,  524,  529,  529, 1332,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529, 1332,  529,  529,  529,  529,  529,  529,  529,  529,
      533, 1332, 1332,  533, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  533, 1332, 1332,  533,  533,  533, 1332, 1332, 1332,
      533,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535, 1332,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  537,  537,
     1332,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537, 1332,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  738, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332,  738, 1332, 1332,  738,  738,
      738, 1332, 1332, 1332,  738,  544, 1332, 1332,  544, 1332,

     1332, 1332, 1332, 1332, 1332, 1332,  544, 1332, 1332,  544,
      544,  544, 1332, 1332, 1332,  544,  548,  548, 1332,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  551,  551, 1332,  551, 1332,  551,  551,
      551,  551,  551,  551,  551,  551, 1332,  551,  551,  551,
      551, 1332,  551,  551,  551,  551,  551,  551,  551, 1332,
      551, 1332,  551,  551,  551,  551,  551,  551,  551,  551,
      561, 1332, 1332,  561, 1332, 1332, 1332, 1332, 1332, 1332,

      561, 1332, 1332, 1332, 1332,  561,  561, 1332,  561, 1332,
     1332, 1332, 1332, 1332, 1332, 1332,  561, 1332, 1332,  561,
      561,  561,  569,  569, 1332,  569, 1332,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569, 1332,  569,
     1332,  569,  569,  569,  569,  569,  569,  569,  569,  573,
      573, 1332,  573, 1332,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573, 1332,  573, 1332,  573,  573,
      573,  573,  573,  573,  573,  573,  582, 1332, 1332,  582,

     1332, 1332, 1332, 1332, 1332, 1332, 1332,  582, 1332, 1332,
      582,  582,  582, 1332, 1332, 1332,  582,  586,  586, 1332,
      586,  586,  586,  586,  586,  586,  586,  586, 1332, 1332,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586, 1332,  586, 1332,  586,  586,  586,  586,
      586,  586,  586,  586,  593, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  593, 1332,  593,  593, 1332, 1332,
     1332, 1332, 1332, 1332,  593, 1332, 1332,  593,  593,  593,
     1332, 1332, 1332,  593,  761, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332,  761, 1332, 1332,  761,  761,  761,
     1332, 1332, 1332,  761,  597, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  597, 1332,  597,  597, 1332, 1332,
     1332, 1332, 1332, 1332,  597, 1332, 1332,  597,  597,  597,
     1332, 1332, 1332,  597,  763, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  763, 1332, 1332,  763,  763,  763,
     1332, 1332, 1332,  763,  601,  601, 1332,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

     1332,  601, 1332,  601,  601,  601,  601,  601,  601,  601,
      601,  605, 1332, 1332,  605, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  605, 1332, 1332,  605,  605,  605, 1332, 1332,
     1332,  605,  607,  607, 1332,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607, 1332,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
     1332,  607,  607,  607,  607,  607,  607,  607,  607,  610,
      610, 1332,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  612,  612, 1332,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  617,  617, 1332,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617, 1332,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617, 1332,
      617, 1332,  617,  617,  617,  617,  617,  617,  617,  617,
      779, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  779,
     1332,  779,  779,  779,  779,  779, 1332, 1332, 1332, 1332,

      779, 1332,  779, 1332, 1332,  779,  779,  779, 1332, 1332,
     1332,  779,  621, 1332,  621,  621,  621,  621,  621, 1332,
     1332, 1332, 1332,  621, 1332,  621, 1332, 1332,  621,  621,
      621, 1332, 1332, 1332,  621,  781, 1332, 1332,  781, 1332,
     1332, 1332, 1332, 1332,  781, 1332,  781, 1332, 1332,  781,
      781,  781, 1332, 1332, 1332,  781,  624,  624, 1332,  624,
      624,  624,  624,  624,  624,  624,  624, 1332, 1332,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624, 1332,  624, 1332,  624,  624,  624,  624,  624,
      624,  624,  624,  628,  628,  628,  628,  628,  628,  628,

      628,  628,  628,  628, 1332, 1332,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      629,  629, 1332,  629,  629,  629,  629,  629,  629, 1332,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629, 1332,  629, 1332,  629,  629,  629, 1332, 1332,
      629,  629,  629,  629,  629,  629,  629,  376, 1332, 1332,
      376, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  376, 1332, 1332,  376,  376,  376,  376,

      637, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  637,  637, 1332, 1332, 1332, 1332, 1332, 1332,
      637, 1332, 1332,  637,  637,  637, 1332, 1332, 1332,  637,
      791,  791, 1332,  791,  791,  791,  791, 1332,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  639,  639, 1332,
      639, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  639, 1332,
     1332,  639,  639,  639, 1332, 1332, 1332,  639,  351, 1332,
      351,  351, 1332,  351, 1332, 1332, 1332, 1332, 1332, 1332,

      351,  351, 1332, 1332,  351,  351,  351, 1332, 1332, 1332,
      351,  811,  811, 1332,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  671, 1332,
     1332,  671, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  671, 1332, 1332,  671,  671,  671,
      822, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  822, 1332,  822, 1332,  822,  822, 1332, 1332, 1332,

     1332, 1332, 1332,  822, 1332, 1332,  822,  822,  822, 1332,
      822,  826,  826, 1332,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  383, 1332,
     1332,  383, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  383,  383, 1332,  383,  383,  383,
      383,  382, 1332,  382,  382, 1332,  382, 1332, 1332, 1332,
     1332, 1332, 1332,  382,  382, 1332, 1332,  382,  382,  382,

     1332, 1332, 1332,  382,  694, 1332, 1332,  694, 1332, 1332,
     1332, 1332,  694, 1332,  694,  694,  694,  694,  694, 1332,
     1332,  694, 1332, 1332,  694,  694,  694, 1332,  694,  694,
      694, 1332, 1332, 1332,  694,  405, 1332, 1332,  405, 1332,
     1332, 1332, 1332,  405, 1332,  405,  405,  405,  405,  405,
     1332, 1332,  405, 1332, 1332,  405,  405,  405, 1332,  405,
      405,  405, 1332, 1332, 1332,  405,  413, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332,  413, 1332,  413,  413,
     1332, 1332, 1332, 1332, 1332, 1332,  413, 1332, 1332,  413,
      413,  413, 1332, 1332, 1332,  413,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  703, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332,  703, 1332, 1332,  703, 1332,
     1332, 1332, 1332,  703, 1332, 1332,  703,  703,  703, 1332,
     1332, 1332,  703,  704, 1332, 1332,  704, 1332, 1332, 1332,
     1332,  704, 1332,  704,  704,  704,  704,  704, 1332, 1332,
      704, 1332, 1332,  704,  704,  704, 1332,  704,  704,  704,
     1332, 1332, 1332,  704,  435, 1332, 1332,  435, 1332, 1332,

     1332, 1332,  435, 1332,  435,  435,  435,  435,  435, 1332,
     1332,  435, 1332, 1332,  435,  435,  435, 1332,  435,  435,
      435, 1332, 1332, 1332,  435,  842,  842, 1332,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  709,  709, 1332, 1332,  709, 1332, 1332, 1332,
     1332,  709, 1332,  709,  709,  709,  709,  709, 1332, 1332,
      709,  709, 1332,  709,  709,  709, 1332,  709,  709,  709,
     1332, 1332, 1332,  709,  447,  447, 1332, 1332,  447, 1332,

     1332, 1332, 1332,  447, 1332,  447,  447,  447,  447,  447,
     1332, 1332,  447,  447, 1332,  447,  447,  447, 1332,  447,
      447,  447, 1332, 1332, 1332,  447,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  714, 1332, 1332,  714, 1332, 1332,  714,
     1332, 1332, 1332,  714, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  714, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  714,
     1332, 1332,  714,  714,  714, 1332, 1332, 1332,  714,  718,

     1332, 1332,  718, 1332, 1332, 1332, 1332,  718, 1332,  718,
      718,  718,  718,  718, 1332, 1332,  718, 1332, 1332,  718,
      718,  718, 1332,  718,  718,  718, 1332, 1332, 1332,  718,
      482, 1332, 1332,  482, 1332, 1332, 1332, 1332,  482, 1332,
      482,  482,  482,  482,  482, 1332, 1332,  482, 1332, 1332,
      482,  482,  482, 1332,  482,  482,  482, 1332, 1332, 1332,
      482,  722,  722,  722,  722, 1332, 1332,  722, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  722,
      722, 1332, 1332, 1332, 1332, 1332, 1332,  722, 1332, 1332,
      722,  722,  722, 1332, 1332, 1332,  722,  852,  852,  852,

      852, 1332, 1332,  852, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332,  852, 1332, 1332, 1332,
     1332, 1332, 1332,  852, 1332, 1332,  852,  852,  852, 1332,
     1332, 1332,  852,  727, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332,  727, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  727, 1332, 1332,  727,  727,  727, 1332,
     1332, 1332,  727,  855, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  855, 1332,  855, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  855, 1332, 1332,  855,  855,  855, 1332,
     1332, 1332,  855,  730,  730,  730,  730, 1332, 1332,  730,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  730,  730, 1332, 1332, 1332, 1332, 1332, 1332,  730,
     1332, 1332,  730,  730,  730, 1332, 1332, 1332,  730,  858,
      858,  858,  858, 1332, 1332,  858, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  858, 1332,
     1332, 1332, 1332, 1332, 1332,  858, 1332, 1332,  858,  858,
      858, 1332, 1332, 1332,  858,  864, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332,  864, 1332, 1332,
     1332, 1332, 1332, 1332, 1332,  864, 1332, 1332,  864,  864,
      864, 1332, 1332, 1332,  864,  875,  875,  875,  875,  875,

      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875, 1332,  875,  875,  875,  875,  875,
      875,  875, 1332,  875,  875, 1332, 1332,  875,  875,  875,
      875,  875,  593, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  593, 1332,  593,  593, 1332, 1332, 1332, 1332,
     1332, 1332,  593, 1332, 1332,  593,  593,  593, 1332, 1332,
     1332,  593,  597, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  597, 1332,  597,  597, 1332, 1332, 1332, 1332,
     1332, 1332,  597, 1332, 1332,  597,  597,  597, 1332, 1332,
     1332,  597,  896, 1332, 1332, 1332, 1332,  896, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332,  896, 1332, 1332,  896,  896,  896,
     1332, 1332, 1332,  896,  779, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  779, 1332,  779,  779,  779,  779,  779,
     1332, 1332, 1332, 1332,  779, 1332,  779, 1332, 1332,  779,
      779,  779, 1332, 1332, 1332,  779,  899, 1332, 1332,  899,
     1332, 1332, 1332, 1332, 1332,  899, 1332,  899, 1332, 1332,
      899,  899,  899, 1332, 1332, 1332,  899,  900, 1332,  900,
      900,  900,  900,  900, 1332, 1332, 1332, 1332,  900, 1332,
      900, 1332, 1332,  900,  900,  900, 1332, 1332, 1332,  900,

      376, 1332, 1332,  376, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332,  376, 1332, 1332,  376,
      376,  376,  376,  791,  791, 1332,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      909, 1332, 1332,  909, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  909, 1332, 1332,  909,  909,  909, 1332, 1332, 1332,
      909,  351, 1332,  351,  351, 1332,  351, 1332, 1332, 1332,

     1332, 1332, 1332,  351,  351, 1332, 1332,  351,  351,  351,
     1332, 1332, 1332,  351,  358, 1332,  358, 1332,  358,  358,
     1332,  358, 1332, 1332, 1332, 1332, 1332, 1332,  358,  358,
     1332, 1332,  358,  358,  358, 1332, 1332, 1332,  358,  639,
     1332, 1332,  639, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
      639, 1332, 1332,  639,  639,  639, 1332, 1332, 1332,  639,
      811,  811, 1332,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  822, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  822, 1332,
      822, 1332,  822,  822, 1332, 1332, 1332, 1332, 1332, 1332,
      822, 1332, 1332,  822,  822,  822, 1332,  822,  825,  825,
     1332,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  826,  826, 1332,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,

      826,  826,  383, 1332, 1332,  383, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  383,  383,
     1332,  383,  383,  383,  383,  382, 1332,  382,  382, 1332,
      382, 1332, 1332, 1332, 1332, 1332, 1332,  382,  382, 1332,
     1332,  382,  382,  382, 1332, 1332, 1332,  382,  405, 1332,
     1332,  405, 1332, 1332, 1332, 1332,  405, 1332,  405,  405,
      405,  405,  405, 1332, 1332,  405, 1332, 1332,  405,  405,
      405, 1332,  405,  405,  405, 1332, 1332, 1332,  405,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  435, 1332, 1332,  435,
     1332, 1332, 1332, 1332,  435, 1332,  435,  435,  435,  435,
      435, 1332, 1332,  435, 1332, 1332,  435,  435,  435, 1332,
      435,  435,  435, 1332, 1332, 1332,  435,  842,  842, 1332,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  447,  447, 1332, 1332,  447, 1332,

     1332, 1332, 1332,  447, 1332,  447,  447,  447,  447,  447,
     1332, 1332,  447,  447, 1332,  447,  447,  447, 1332,  447,
      447,  447, 1332, 1332, 1332,  447,  482, 1332, 1332,  482,
     1332, 1332, 1332, 1332,  482, 1332,  482,  482,  482,  482,
      482, 1332, 1332,  482, 1332, 1332,  482,  482,  482, 1332,
      482,  482,  482, 1332, 1332, 1332,  482,  852,  852,  852,
      852, 1332, 1332,  852, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332,  852, 1332, 1332, 1332,
     1332, 1332, 1332,  852, 1332, 1332,  852,  852,  852, 1332,
     1332, 1332,  852,  945,  945,  945,  945, 1332, 1332,  945,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  945,  945, 1332, 1332, 1332, 1332, 1332, 1332,  945,
     1332, 1332,  945,  945,  945, 1332, 1332, 1332,  945,  855,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  855,
     1332,  855, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  855,
     1332, 1332,  855,  855,  855, 1332, 1332, 1332,  855,  858,
      858,  858,  858, 1332, 1332,  858, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  858, 1332,
     1332, 1332, 1332, 1332, 1332,  858, 1332, 1332,  858,  858,
      858, 1332, 1332, 1332,  858,  950,  950,  950,  950, 1332,

     1332,  950, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  950,  950, 1332, 1332, 1332, 1332, 1332,
     1332,  950, 1332, 1332,  950,  950,  950, 1332, 1332, 1332,
      950,  864, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  864, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  864, 1332, 1332,  864,  864,  864, 1332, 1332, 1332,
      864,  994, 1332, 1332,  994, 1332, 1332, 1332, 1332, 1332,
     1332, 1332,  994, 1332, 1332,  994,  994,  994, 1332, 1332,
     1332,  994,  997, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,  997, 1332,  997,  997,  997,  997,  997, 1332, 1332,

     1332, 1332,  997, 1332,  997, 1332, 1332,  997,  997,  997,
     1332, 1332, 1332,  997,  900, 1332,  900,  900,  900,  900,
      900, 1332, 1332, 1332, 1332,  900, 1332,  900, 1332, 1332,
      900,  900,  900, 1332, 1332, 1332,  900,  376, 1332, 1332,
      376, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332,  376, 1332, 1332,  376,  376,  376,  376,
     1005, 1005, 1332, 1005, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1005, 1332, 1332, 1005, 1005, 1005, 1332, 1332, 1332,
     1005,  358, 1332,  358, 1332,  358,  358, 1332,  358, 1332,

     1332, 1332, 1332, 1332, 1332,  358,  358, 1332, 1332,  358,
      358,  358, 1332, 1332, 1332,  358, 1016, 1016, 1332, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016,  383, 1332, 1332,  383, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  383,
      383, 1332,  383,  383,  383,  383,  382, 1332,  382,  382,
     1332,  382, 1332, 1332, 1332, 1332, 1332, 1332,  382,  382,

     1332, 1332,  382,  382,  382, 1332, 1332, 1332,  382, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1332, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1332, 1064, 1064, 1332,
     1064, 1332, 1064, 1064, 1064, 1064, 1086, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1086, 1332, 1332,
     1086, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1086, 1332,
     1332, 1086, 1086, 1086, 1332, 1332, 1332, 1086, 1087, 1332,
     1332, 1332, 1332, 1332, 1087, 1332, 1332, 1087, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1087, 1332, 1332, 1087, 1087,

     1087, 1332, 1332, 1332, 1087, 1102, 1102, 1332, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1332, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1332,
     1150, 1150, 1332, 1332, 1332, 1150, 1150, 1150, 1150, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1332, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1332, 1151, 1151, 1332,
     1332, 1332, 1151, 1151, 1151, 1151,  351, 1332,  351,  351,
     1332,  351, 1332, 1332, 1332, 1332, 1332, 1332, 1332,  351,
     1332, 1332,  351,  351,  351, 1332, 1332, 1332,  351, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1332, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1332, 1210, 1210, 1332,
     1332, 1332, 1210, 1210, 1210, 1210, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1332, 1223, 1223, 1223, 1223,

     1223, 1223, 1223, 1332, 1223, 1223, 1332, 1332, 1332, 1223,
     1223, 1223, 1223, 1279, 1279, 1332, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1281, 1281, 1332, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281,   99, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332
    } ;

static const flex_int16_t yy_chk[12771] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    4,    7,    8,    4,   21,   22,   23,   24,
       21,   22,   23,   24,   39,    4,    4,   40,    4,    4,

       43,   44,    4,    4,    4,   51,   52,   61,   62,  133,
        7,    8,   43,   44,  133,  115,   47,   47,  115,   47,
       67,   47,  129,  308,  129,   68, 1327,   43,   44,  143,
      143,  143,  143,    7,    8, 1325,   21,   22,   23,   24,
       48,   48,   91,   48,   39,   48,   95,   40,  308,   96,
       43,   44,   91,   91,   73,   51,   52,   61,   62,    4,
        5,    5,    5,    5,    5,    5,    5,   47,    5,    5,
       67,    5,    5,    5,    5,   68,    5,   97,    5,    5,
       49,   73,   49,    5,    5,    5,  116,    5,    5,  116,
      231,   48,   49,  231, 1323,  231,   95,   49,   50,   96,

       50,   57,  978,   57,   73,   55,   55,   49,   55,  978,
       50,    5,    5,    5,  116,   50,   56,   56,  241,   56,
       81,   98,  241,  103,  103,   50,  103,   97,   57,  353,
       49,   58,  353,   58,   59,   81,   59,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    6,    6,   50,    6,
        6,   57,    6,    6,    6,    6,   55,    6,   58,    6,
        6,   59,   65,   74,    6,    6,    6,   56,    6,    6,
       81,   98,   65,   65,  103,   92,  130,  107,  130,  359,
      186,   58,  359,  186,   59,   92,   92,  107,  375,   65,
       74,  283,    6,    6,    6,  186,  283, 1320,  119,  107,

      119,  119,  119,  165,  165,  165,  165,  258,  375,  119,
      287,  258,   65,   74,  130,  287, 1317, 1316,    6,    6,
        6,    6,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   13,   13,   13,   13,
       13,   13,   13,   75,   13,   13,   66,   13,   13,   13,

       13,   60,   13,   60,   13,   13,   66,   66,   76,   13,
       13,   13,  389,   13,   13,  389,  124,  124,  360,  246,
       75,  124,  246,   66,  315, 1315,  120,   77,   60,  120,
      246,  309,   78, 1311,   82,   76,  259,   13,   13,   13,
      259,  315,  120,   75,  134,  134,   66,  134,  120,   82,
      124,   60,  360,  570,   77,  570,  309,  394,   76,   78,
      394, 1308,   85,   13,   13,   13,   13,   14,   14,   14,
       14,   14,   14,   14,   85,   14,   14,   77,   14,   14,
       14,   14,   78,   14,   82,   14,   14,   86,  221,   85,
       14,   14,   14,  413,   14,   14,  125,  125,  413,   86,

      221,  125, 1307,  120, 1329,   89,  134,  102,  142,  142,
      102,  142,   85,   90,   86,   89,   89,  263,   14,   14,
       14,  263, 1329,   90,   90,  169,  169,  263,  169,  263,
      125,  354,   89,  173,  173,  102,  173,   86,  221,  640,
       90, 1306,  640,  354,   14,   14,   14,   14,   15,   15,
       15,   15,   15,   15,   15,   89,   15,   15,  102,   15,
       15,   15,   15,   90,   15,  342,   15,   15,  342,   93,
      142,   15,   15,   15,  963,   15,   15,   93, 1305,  147,
      147,  366,  963,  111,  147,  111,  111,  169,  111,  111,
      111,  963,   93,  342,   93,  173,  367,  111,  604,   15,

       15,   15,  201,  201,  201,  201,  366,  108,  577,  108,
      108,  108,  108,  147,  369, 1304,  342,  108,  108,   93,
       93,  367,  577,  108,  604,   15,   15,   15,   15,   16,
       16,   16,   16,   16,   16,   16,   94,   16,   16,  369,
       16,   16,   16,   16,   94,   16,  108,   16,   16,  111,
     1303, 1302,   16,   16,   16,  546,   16,   16,  546,   94,
      546,   94,  136,  136,  136,  136,  137,  137,  137,  137,
      442,  148,  148,  370,  249,  108,  148,  249,  371,  136,
       16,   16,   16,  137,  136,  249,   94,   94,  137,  264,
      620,  442,  779,  264,  362,  362,  362,  362,  370,  264,

     1298,  264,  620,  371,  779,  148,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   25,   25,   25,   25,   25,   25,
       25,  365,   25,   25,  572,   25,   25,   25,   25,  572,
       25,  671,   25,   25,  671,  181,  181,   25,   25,   25,

      181,   25,   25,  372,  113,  365,  113,  113,  982,  113,
      113,  113,  674,  177,  177,  674,  177,  117,  113,  154,
      117,  114,  982,  117,  114,   25,   25,   25,  372,  181,
      365,  154,  154,  117,  114,  114,  154,  114,  114,  117,
      154,  114,  114,  114,  113,  117,  965,  391,  391,  114,
      391,   25,   25,   25,   25,   26,   26,   26,   26,   26,
       26,   26,  965,   26,   26,  154,   26,   26,   26,   26,
      113,   26,  114,   26,   26,  177,  182,  182,   26,   26,
       26,  182,   26,   26,  155, 1297,  578,  141,  141,  141,
      141,  578,  397,  397,  117,  397,  155,  155,  114,  399,

      661,  155,  399,  661,  141,  155,   26,   26,   26,  141,
      182,  141,  392,  593,  392,  392,  392,  400,  593,  400,
      400,  400,  408,  408,  597,  408,  661,  399,  400,  597,
      155, 1295,   26,   26,   26,   26,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   83,   84,  615,  687,   83,   84,  687, 1294,
      899,   83,   84,  159,  159,  159,  159,  378, 1293,   83,
       84,  378,  899,  139,  139,  139,  139,   83,   84,  615,
      159,  488,  405,  405,  488,  159,  698,  405,   83,   84,
      139,  698,   83,   84,  156,  139,  488,  535,  192,  192,
      761,  192,   83,   84, 1292,  761,  156,  156,  406,  535,
      378,  156,  406,   83,   84,  156,  405,   83,   84,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,  378,   87,   87, 1291,
      156,  406,   87,   87,   87,   87,   87,  535,   87,  651,

      416,  416,  139,  416,  652, 1290,  138,  138,  138,  138,
      192,  424,  424,  424,  424,  390,  126,  126,  390,  126,
       87,   87,   87,  138,  651,  138,  138,  138,  138,  652,
      138,  390,  383,  126,  126,  383,  635,  390,  126,  635,
      252,  252, 1289,  252, 1288,  653,   87,   87,   87,   87,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,  126,   88,   88,
      653, 1287, 1286,   88,   88,   88,   88,   88,  126,   88,
     1106,  200,  200,  383,  200,  138,  465,  150,  150,  465,
      150,  252,  390,  158,  158,  608,  158,  465,  158,  654,

      635,   88,   88,   88,  150,  150, 1106, 1281,  383,  150,
      158,  158,  635,  205,  205,  158,  205,  608,  707,  158,
      160,  160,  160,  160,  654, 1048, 1279,   88,   88,   88,
       88,  109,  191,  191,  191,  191,  656,  160,  150,  707,
     1048,  763,  160,  200,  158,  109,  763,  209,  209,  150,
      209,  191,  191,  191,  191,  158,  109,  773,  109,  109,
      657,  656,  773,  109,  109,  162,  162,  162,  162,  109,
      109,  109,  109,  109,  109,  205,  693,  213,  213,  693,
      213,  109,  162,  109,  109,  657, 1274,  162,  109,  109,
      345,  345, 1273,  345,  109,  109,  109,  109,  109,  109,

      110,  110,  110,  110,  161,  161,  161,  161, 1271,  209,
      110,  425,  425,  425,  425,  161,  183,  183,  110,  183,
      110,  161,  110,  161,  161,  161,  161, 1314, 1322,  164,
      164,  164,  164,  183,  183, 1322, 1270, 1269,  183,  213,
      164,  345, 1314, 1268,  162,  110,  164,  194,  194,  194,
      194,  164,  110,  110,  428,  428,  489,  428, 1267,  489,
      208,  208,  208,  208,  194,  438,  438,  183,  438,  194,
      110,  489,  110,  110,  112,  112,  112,  112,  183,  208,
      208,  208,  208,  161,  112,  195,  195,  195,  195,  997,
      216,  216,  112,  216,  112, 1180,  112,  431,  431,  431,

      431,  997,  195,  196,  196,  196,  196,  195, 1266,  658,
     1265,  197,  197,  197,  197,  199,  199,  199,  199,  112,
      196, 1180,  196,  196,  196,  196,  112,  112,  197, 1264,
      112, 1263,  199,  197,  658,  244,  244,  199,  244,  224,
      224,  224,  224,  659,  112, 1262,  112,  112,  118,  118,
     1261,  118,  216,  250,  250,  386,  250,  224,  386,  224,
      118,  224,  118,  118,  118,  118,  346,  346,  659,  346,
      118,  118, 1260, 1285,  267,  267,  118,  267, 1250, 1249,
      407,  407,  196,  436,  224,  407, 1285,  436,  271,  271,
      197,  271, 1248,  277,  277,  368,  277,  244,  368,  118,

      280,  280,  660,  280,  326,  326,  386,  326,  451,  451,
      771,  451,  224,  771,  407,  250,  436,  346,  448,  386,
     1229,  368,  448,  384,  368, 1228,  384,  660,  118,  153,
      153,  386,  153,  153,  153,  153,  267,  153,  153,  368,
      153,  153,  153,  153, 1226,  153, 1225,  153,  153,  368,
      271,  448,  153,  153,  153,  277,  153,  153,  361,  363,
      662,  364,  280,  363,  368,  364,  326,  364,  665,  361,
      361,  361,  363, 1219,  384,  461,  461,  461,  461, 1218,
      153,  153,  153,  361,  363,  662,  364, 1217,  363,  384,
      364, 1301,  364,  665,  361,  361,  361,  363,  382,  384,

      382,  382, 1301,  382,  382,  382,  153,  153,  153,  153,
      225,  225,  382,  225, 1216, 1215,  225,  225,  225,  225,
      385,  410,  410,  385, 1214,  393,  410,  385,  393, 1213,
      663,  385,  388,  663,  225,  388,  225,  387,  225,  387,
      387,  393,  387,  387,  387,  388,  388,  393,  388,  388,
     1212,  387,  388,  388,  388,  410,  663, 1211, 1209,  395,
      388,  225,  395,  666,  382, 1184,  467,  467,  410,  467,
      385,  385,  225,  472,  472,  395,  472, 1183, 1177,  396,
      396,  395,  396,  388,  401,  387, 1176,  401,  666,  225,
      343,  343,  343,  343,  559,  396,  385,  559, 1174, 1173,

      401,  396,  393,  387, 1172,  559,  401,  396,  343,  388,
      343,  402,  343, 1171,  402,  419,  419,  419,  419, 1170,
     1169, 1168,  420,  420,  420,  420, 1167,  402,  422,  422,
      422,  422,  419,  402,  667,  343,  395,  419,  561,  420,
     1166,  561,  343,  343,  420,  422,  435,  435, 1165,  561,
      422,  435,  422,  437,  437, 1164,  396, 1163,  437,  667,
      343,  401,  343,  343,  344,  344,  344,  344,  423,  423,
      423,  423,  427,  427,  427,  427,  440,  440,  482,  482,
      435,  440,  344,  482,  344,  423,  344,  437,  402,  427,
      423,  483,  423,  668,  427,  483,  427,  454,  454,  454,

      454,  420, 1162, 1161,  457,  457,  457,  457,  800,  344,
      440,  800,  482, 1160,  454,  457,  344,  344,  668,  454,
      344,  457,  819,  440,  483,  819,  457,  464,  464,  464,
      464, 1159,  477,  477,  344,  477,  344,  344,  357,  485,
      485,  357,  485,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      376, 1326,  447,  376,  449, 1326,  376,  376,  376,  376,
      426,  426,  426,  426,  447,  447,  449,  449,  453,  447,
     1158,  449, 1157,  447,  376,  449,  376,  426,  376, 1156,
      453,  453,  426,  484,  484,  453, 1155, 1153,  484,  453,
      455,  455,  455,  455,  458,  458,  458,  458,  447,  669,
      449,  376, 1152,  496,  496,  458,  496,  455, 1148, 1147,
     1146,  458,  455,  774,  453,  752,  458,  484,  752, 1145,
      460,  460,  460,  460,  669, 1144,  376,  453,  376,  376,

     1143,  460,  803,  462,  462,  462,  462,  460,  774,  426,
      443,  443,  460,  443,  443,  443,  443,  788,  443,  443,
      462,  443,  443,  443,  443,  462,  443,  803,  443,  443,
     1141,  487,  487,  443,  443,  443,  487,  443,  443,  455,
     1140,  804,  463,  463,  463,  463,  492,  492,  492,  492,
     1139,  752,  805,  463,  493,  493,  493,  493, 1138,  463,
      788,  443,  443,  443,  463,  487,  804, 1137,  492,  504,
      504,  504,  504,  493,  493,  493,  493,  805,  487, 1136,
      507,  507,  462,  507, 1135, 1133,  788,  443,  443,  443,
      443,  444,  444, 1132,  444,  444,  444,  444,  812,  444,

      444,  812,  444,  444,  444,  444,  806,  444,  823,  444,
      444,  823, 1131, 1130,  444,  444,  444, 1129,  444,  444,
      510,  510,  510,  510,  812,  807,  494,  494,  494,  494,
      808,  806,  499,  499,  499,  499,  500,  500,  500,  500,
     1128, 1127,  444,  444,  444,  494,  494,  494,  494,  499,
      807, 1126,  809,  500,  499,  808, 1125,  810,  500,  502,
      502,  502,  502,  503,  503,  503,  503, 1124,  444,  444,
      444,  444,  505,  505,  505,  505,  502,  809, 1123, 1122,
      503,  502,  810,  514,  514,  503,  514, 1121, 1119,  505,
      506,  506,  506,  506,  505,  517,  517,  517,  517,  518,

      518,  518,  518,  519,  519,  519,  519,  506,  521,  521,
     1118,  521,  506,  526,  526,  500,  526,  517,  518,  518,
      518,  518,  519,  519,  519,  519,  530,  530, 1117,  530,
      541,  541, 1114,  541,  556,  556, 1113,  556,  562,  562,
     1112,  562,  565,  565, 1102,  565,  579,  579,  813,  579,
     1097,  505,  583,  583,  815,  583,  587,  587,  816,  587,
      590,  590,  817,  590,  625,  625,  913,  625,  655,  655,
      655,  655,  688,  813,  688,  688,  688,  713,  714,  815,
      713,  714,  892,  816, 1096,  892, 1094,  817,  713,  714,
     1093,  913, 1092,  565,  645,  645,  645,  645,  645,  645,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  672,  676,  915,  672,
      676,  926,  683,  672,  926,  683, 1071,  694,  694, 1071,
     1091, 1090,  694,  814,  684, 1089,  814,  684,  686,  686,

     1088,  686, 1087,  915,  695,  695,  696,  696, 1086,  695,
      916,  696,  704,  704,  686,  689,  689,  704,  689,  814,
      686,  694,  685,  917,  685,  685,  672,  685,  685,  685,
     1084,  689, 1083,  683,  676,  916,  685,  689,  695,  683,
      696, 1227,  705,  705, 1227,  684,  704,  705,  917,  918,
     1082,  696,  672,  676,  680,  680,  684,  680,  683,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      684,  680,  685,  680,  918,  686,  705, 1081,  680,  680,
      680,  680,  680,  680, 1080, 1079,  691,  691,  685,  691,
      718,  718,  689,  692,  692,  718,  692,  700,  700,  700,

      700, 1275,  691,  920, 1275,  680,  680,  680,  691,  692,
      701,  701,  701,  701,  691,  692,  706,  706, 1078, 1296,
     1077,  706, 1296,  700,  718, 1076,  919,  709,  920,  919,
      923,  680,  680,  680,  680,  680,  701, 1075, 1310,  709,
      709, 1310,  924,  921,  709,  710,  921,  711,  709,  797,
      706,  797,  919,  797,  797,  923,  925,  710,  710,  711,
      711,  706,  710,  691,  711,  797,  710,  924,  711,  921,
      692,  708,  708,  709,  708,  708,  708,  708, 1074,  708,
      708,  925,  708,  708,  708,  708, 1073,  708, 1072,  708,
      708,  710, 1070,  711,  708,  708,  708, 1068,  708,  708,

      719,  719,  720,  720,  711,  719, 1007,  720,  722,  722,
      722,  722, 1065,  724,  724,  724,  724,  797,  723,  723,
      723,  723,  708,  708,  708, 1063, 1062,  722,  722,  722,
      722, 1007, 1061, 1060,  719,  724,  720,  723,  723,  723,
      723,  730,  730,  730,  730, 1009, 1059,  720,  708,  708,
      708,  708,  731,  731,  731,  731,  732,  732,  732,  732,
      730,  730,  730,  730,  789,  824, 1318,  789,  824, 1318,
     1009,  731,  731,  731,  731, 1058, 1321, 1057,  732, 1321,
     1010, 1011,  828, 1056, 1055,  828,  834,  834, 1054, 1053,
     1052,  834,  837,  837,  837,  837, 1012,  851,  851,  851,

      851,  831,  831, 1051,  831, 1010, 1011, 1015,  830,  829,
      830,  830,  829,  830,  830,  830, 1050,  831,  837,  851,
      834, 1012,  830,  831, 1049,  906,  789,  824,  906, 1047,
     1046,  927, 1015,  828,  927,  834,  839,  839,  839,  839,
      789,  824,  826,  826,  828,  826, 1045,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  828,  826,
      829,  826,  839, 1044, 1043,  830,  826,  826,  826,  826,
      826,  826, 1042, 1041,  830,  829,  832,  832,  831,  832,
      833,  833, 1039,  833, 1038,  829, 1018,  857,  857,  857,
      857,  906,  832,  826,  826,  826,  833,  927,  832,  841,

      841,  906,  833, 1019,  841,  849,  849,  927,  833,  857,
      849, 1018,  929, 1324,  844,  929, 1324, 1037, 1098,  826,
      826,  826,  826,  826, 1036, 1035,  844,  844, 1019,  931,
     1033,  844,  931,  841, 1328,  844,  910, 1328,  910,  849,
      910,  910, 1013, 1098, 1003, 1013, 1095, 1003,  841, 1095,
      934,  934,  910,  832,  849,  934, 1032,  833,  842,  842,
      844,  842,  842,  842,  842, 1099,  842,  842, 1013,  842,
      842,  842,  842, 1031,  842,  844,  842,  842, 1100, 1028,
      931,  842,  842,  842,  934,  842,  842,  931,  929, 1020,
     1099,  934, 1020,  852,  852,  852,  852,  858,  858,  858,

      858, 1095, 1003, 1100,  910,  931, 1101, 1027, 1026,  842,
      842,  842,  852,  852,  852,  852,  858,  858,  858,  858,
     1003,  930, 1095, 1017,  930, 1016, 1017,  932, 1006,  932,
      932, 1101,  932,  932,  932,  842,  842,  842,  842,  843,
      843,  932,  843,  843,  843,  843, 1005,  843,  843, 1017,
      843,  843,  843,  843, 1104,  843, 1103,  843,  843, 1103,
     1020, 1004,  843,  843,  843, 1020,  843,  843,  868,  868,
      938,  938,  930,  868,  868,  938,  868,  868, 1002, 1104,
      932,  868, 1103, 1105,  868,  868,  868,  930, 1178, 1001,
      843,  843,  843,  932, 1000,  943,  943,  930,  933,  933,

      943,  933, 1107, 1022,  938, 1107, 1022,  999, 1105,  939,
     1179,  938,  998, 1178,  933,  996,  843,  843,  843,  843,
      933,  939,  939,  995, 1246, 1023,  939, 1246, 1023,  943,
      939,  945,  945,  945,  945, 1179,  943,  946,  946,  946,
      946,  993,  992,  991,  950,  950,  950,  950,  990,  989,
      945,  945,  945,  945, 1022,  939,  946,  946,  946,  946,
     1107,  988,  939,  950,  950,  950,  950,  951,  951,  951,
      951,  987, 1025, 1025, 1022,  933, 1023, 1025, 1107, 1022,
     1023, 1108, 1109,  986, 1108, 1109,  951,  951,  951,  951,
     1024,  985, 1024, 1024,  984, 1024, 1024, 1024, 1024, 1030,

     1246, 1023, 1029, 1029, 1024,  983, 1025, 1029, 1034, 1034,
     1025, 1030, 1030, 1034, 1111, 1111, 1030, 1116,  981, 1111,
     1030, 1115, 1115,  980, 1181, 1175, 1115, 1181, 1175, 1116,
     1116,  979, 1108, 1109, 1116,  977, 1029,  976, 1116, 1108,
     1029, 1182, 1034,  975, 1182, 1030, 1034,  974, 1111, 1030,
     1181, 1109,  973,  972,  971, 1115, 1024, 1108, 1109, 1120,
     1120,  970, 1185, 1116, 1120, 1185, 1111, 1182, 1186, 1187,
     1187, 1186, 1187, 1115, 1188, 1188,  969, 1251, 1193, 1188,
     1251, 1116, 1192, 1192, 1197, 1197,  968, 1192,  967, 1197,
     1193, 1193,  966, 1120, 1175, 1193,  964, 1253,  962, 1193,

     1253, 1175, 1257, 1251, 1258, 1257,  961, 1258, 1188, 1259,
     1259, 1120, 1259,  960, 1280,  959, 1192, 1280, 1197, 1186,
     1187,  958, 1282, 1253, 1193, 1282, 1299, 1283,  957, 1299,
     1283, 1185, 1284, 1300,  956, 1284, 1300, 1186, 1185, 1312,
     1280,  955, 1312, 1313, 1186, 1187, 1313,  954, 1282, 1331,
     1331, 1429, 1331, 1428,  953, 1258, 1428, 1428, 1428,  952,
     1259, 1428, 1429,  949,  948, 1429, 1429, 1429, 1257, 1509,
     1258,  947, 1509, 1509, 1509,  944, 1495,  942, 1257,  941,
     1258, 1283,  940, 1284, 1300,  937, 1284, 1495,  936,  935,
     1299, 1495, 1495,  928, 1313,  914, 1512, 1300,  912,  909,

     1331, 1513, 1299, 1283, 1513, 1513, 1513, 1512, 1284, 1300,
     1512, 1512, 1512, 1552,  907, 1312, 1552, 1552, 1552, 1313,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1333, 1333, 1333, 1333, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,

     1337, 1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,

     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1341, 1341, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,

     1345, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,

     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354, 1354,

     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
     1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356,

     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1362, 1362,  905, 1362, 1362, 1362, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1363, 1541, 1556, 1556,  904, 1556, 1556, 1556,  903,  902,
     1571,  901, 1541, 1571, 1571, 1571, 1541, 1541,  900, 1571,
     1363,  898,  897, 1363, 1363, 1363,  893,  891,  890, 1363,
     1364,  889, 1364, 1364,  888, 1364, 1572,  887,  886, 1572,
     1572, 1572, 1364, 1364,  885, 1572, 1364, 1364, 1364,  884,
      883,  882, 1364, 1365,  881, 1365, 1365, 1365, 1365,  880,
     1365, 1365, 1365,  878,  877,  876,  874, 1365, 1365, 1365,

      873, 1365, 1365, 1365,  872,  871,  870, 1365, 1366, 1366,
     1366, 1366, 1593,  869,  867, 1593, 1593, 1593, 1366,  866,
      865,  863,  862,  861, 1366,  860, 1366,  859, 1366, 1366,
     1366,  856, 1366, 1366, 1366, 1366, 1366, 1366, 1367,  855,
     1367, 1367,  854, 1367,  853,  850,  848,  847,  846,  840,
     1367, 1367,  836,  835, 1367, 1367, 1367,  827,  825,  822,
     1367, 1368, 1368, 1368, 1368,  811,  802,  798,  796,  791,
      790, 1368,  787,  786,  784,  783,  782, 1368,  781, 1368,
      777, 1368, 1368, 1368,  775, 1368, 1368, 1368, 1368, 1368,
     1368, 1369, 1369,  772, 1369, 1369, 1369, 1369, 1369, 1369,

     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370,  770,
      769, 1370,  764,  762,  760,  759, 1370,  758, 1370, 1370,
     1370, 1370, 1370,  757,  756, 1370,  755,  754, 1370, 1370,
     1370,  753, 1370, 1370, 1370,  751,  750,  749, 1370, 1371,
      748,  747,  746,  745,  744,  743,  742,  741,  740, 1371,
      739, 1371, 1371,  737,  736,  735,  734,  733,  729, 1371,
      728,  726, 1371, 1371, 1371,  725,  721,  717, 1371, 1372,
     1372, 1372, 1372,  716,  715, 1372,  712,  703,  702,  699,

      697,  675,  670,  650,  649, 1372,  647, 1372, 1372,  646,
     1372,  644,  641,  639,  637, 1372,  636,  634, 1372, 1372,
     1372,  633,  632, 1372, 1372, 1373, 1373, 1373, 1373,  631,
      630, 1373,  627,  623,  621,  619,  616,  614,  612,  610,
      609, 1373,  606,  603, 1373,  602,  600,  599,  596,  595,
      592, 1373,  589,  585, 1373, 1373, 1373,  581,  576, 1373,
     1373, 1374, 1374, 1374, 1374,  575,  574, 1374,  571,  568,
      567,  564,  558,  555,  554,  550,  548, 1374,  547, 1374,
     1374,  545, 1374,  543,  538,  537,  534, 1374,  532,  528,
     1374, 1374, 1374,  525,  524,  523, 1374, 1375, 1375, 1375,

     1375,  520,  516, 1375,  512,  509,  501,  498,  495,  491,
      480,  479,  475,  474,  470,  469,  456,  450,  445,  441,
      433,  432,  430, 1375,  421,  418, 1375, 1375, 1375,  415,
      412,  403, 1375, 1376, 1376,  377, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376,
     1377,  374,  358, 1377,  351,  350,  348,  347, 1377,  341,
     1377, 1377, 1377, 1377, 1377,  338,  335, 1377,  334,  320,
     1377, 1377, 1377,  319, 1377, 1377, 1377,  314,  310,  306,

     1377, 1378, 1378,  305, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
     1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379, 1379,
      304,  301, 1379,  300,  297,  293,  292, 1379,  291, 1379,
     1379, 1379, 1379, 1379,  288,  284, 1379, 1379,  254, 1379,
     1379, 1379,  240, 1379, 1379, 1379,  239,  238,  234, 1379,
     1380, 1380, 1380, 1380,  233,  229, 1380,  223,  220,  212,
     1380,  204,  198,  188,  180,  176, 1380,  172, 1380, 1380,
      163,  149,  146,  140,  123,  106, 1380,  104,   99, 1380,

     1380, 1380,    0,    0, 1380, 1380, 1381, 1381, 1381, 1381,
        0,    0, 1381,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1381,    0,    0, 1381,    0,    0,    0,    0,
        0,    0, 1381,    0,    0, 1381, 1381, 1381,    0,    0,
     1381, 1381, 1382, 1382, 1382, 1382,    0,    0, 1382,    0,
        0,    0, 1382,    0,    0,    0,    0,    0, 1382,    0,
     1382, 1382,    0,    0,    0,    0,    0,    0, 1382,    0,
        0, 1382, 1382, 1382,    0,    0,    0, 1382, 1383, 1383,
     1383, 1383,    0,    0, 1383,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1383,    0,    0, 1383, 1383, 1383,
        0,    0,    0, 1383, 1384,    0,    0, 1384,    0,    0,
        0,    0,    0,    0,    0, 1384,    0,    0, 1384, 1384,
     1384,    0,    0,    0, 1384, 1385, 1385,    0, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1386, 1386,    0, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,

     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387,
     1387,    0, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1387, 1388,    0,    0, 1388,
        0,    0,    0,    0, 1388,    0, 1388, 1388, 1388, 1388,
     1388,    0,    0, 1388,    0,    0, 1388, 1388, 1388,    0,
     1388, 1388, 1388,    0,    0,    0, 1388, 1389,    0,    0,
     1389,    0,    0, 1389,    0,    0,    0,    0,    0,    0,
        0, 1389,    0,    0,    0, 1389,    0,    0,    0,    0,

        0,    0,    0, 1389,    0,    0, 1389, 1389, 1389,    0,
        0,    0, 1389, 1390, 1390, 1390, 1390,    0,    0, 1390,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1390, 1390,    0,    0,    0,    0,    0,    0, 1390,
        0,    0, 1390, 1390, 1390,    0,    0,    0, 1390, 1391,
     1391, 1391, 1391,    0,    0, 1391,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1391,    0, 1391, 1391,    0,
        0,    0,    0,    0,    0, 1391,    0,    0, 1391, 1391,
     1391,    0,    0, 1391, 1391, 1392, 1392, 1392, 1392,    0,
        0, 1392,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1392,    0,    0, 1392,    0,    0,    0,    0,    0,
        0, 1392,    0,    0, 1392, 1392, 1392,    0,    0, 1392,
     1392, 1393, 1393, 1393, 1393,    0,    0, 1393,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1393,    0, 1393,
     1393,    0,    0,    0,    0,    0,    0, 1393,    0,    0,
     1393, 1393, 1393,    0,    0,    0, 1393, 1394, 1394, 1394,
     1394,    0,    0, 1394,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1394,    0,    0, 1394, 1394, 1394,    0,
        0,    0, 1394, 1395,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1395,    0, 1395,    0,    0,    0,    0,
        0,    0,    0, 1395,    0,    0, 1395, 1395, 1395,    0,
        0,    0, 1395, 1396, 1396, 1396, 1396,    0,    0, 1396,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1396, 1396,    0,    0,    0,    0,    0,    0, 1396,
        0,    0, 1396, 1396, 1396,    0,    0,    0, 1396, 1397,
     1397,    0, 1397,    0,    0,    0,    0,    0,    0,    0,
     1397,    0,    0, 1397, 1397, 1397,    0,    0,    0, 1397,
     1398, 1398,    0, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,    0, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399,    0,    0,
     1399,    0,    0,    0,    0,    0,    0,    0, 1399,    0,
        0, 1399, 1399, 1399,    0,    0,    0, 1399, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,    0, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1401, 1401,    0, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,

     1401,    0, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1402,    0,    0, 1402,    0,    0,    0,    0,
        0,    0,    0, 1402,    0,    0, 1402, 1402, 1402,    0,
        0,    0, 1402, 1403, 1403,    0, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1404, 1404,    0, 1404,    0, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404,    0, 1404, 1404, 1404, 1404,    0, 1404,
     1404, 1404, 1404, 1404, 1404, 1404,    0, 1404,    0, 1404,

     1404, 1404, 1404, 1404, 1404, 1404, 1404, 1405,    0,    0,
     1405,    0,    0,    0,    0,    0,    0, 1405,    0,    0,
        0,    0, 1405, 1405,    0, 1405,    0,    0,    0,    0,
        0,    0,    0, 1405,    0,    0, 1405, 1405, 1405, 1406,
     1406,    0, 1406,    0, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406,    0, 1406,    0, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1407, 1407,    0, 1407,
        0, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407,    0, 1407,    0, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1408,    0,    0, 1408,    0,    0,    0,
        0,    0,    0,    0, 1408,    0,    0, 1408, 1408, 1408,
        0,    0,    0, 1408, 1409, 1409,    0, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409,    0,    0, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
        0, 1409,    0, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1410,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1410,    0, 1410, 1410,    0,    0,    0,    0,    0,
        0, 1410,    0,    0, 1410, 1410, 1410,    0,    0,    0,

     1410, 1411,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1411,    0, 1411, 1411,    0,    0,    0,    0,    0,
        0, 1411,    0,    0, 1411, 1411, 1411,    0,    0,    0,
     1411, 1412, 1412,    0, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412,    0, 1412,    0,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1413,    0,
        0, 1413,    0,    0,    0,    0,    0,    0,    0, 1413,
        0,    0, 1413, 1413, 1413,    0,    0,    0, 1413, 1414,
     1414,    0, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,

     1414, 1414, 1414, 1414, 1414,    0, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414,    0, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1415, 1415,    0, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1416, 1416,    0, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,

     1417, 1417,    0, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417,    0, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417,    0, 1417,    0, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1418,    0,    0,
     1418,    0,    0,    0,    0,    0, 1418,    0, 1418,    0,
        0, 1418, 1418, 1418,    0,    0,    0, 1418, 1419,    0,
     1419, 1419, 1419, 1419, 1419,    0,    0,    0,    0, 1419,
        0, 1419,    0,    0, 1419, 1419, 1419,    0,    0,    0,
     1419, 1420, 1420,    0, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420,    0,    0, 1420, 1420, 1420, 1420, 1420, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420,    0, 1420,    0,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,    0,
        0, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1422, 1422,    0, 1422, 1422,
     1422, 1422, 1422, 1422,    0, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422,    0, 1422,    0,
     1422, 1422, 1422,    0,    0, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1423, 1423, 1423, 1423,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1423,    0,
     1423,    0, 1423, 1423, 1423,    0, 1423, 1423, 1423, 1423,
     1423, 1423, 1424, 1424,    0, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1425, 1425,    0,    0,    0,    0,    0,    0, 1425,
        0,    0, 1425, 1425, 1425,    0,    0,    0, 1425, 1426,
        0, 1426, 1426,    0, 1426,    0,    0,    0,    0,    0,

        0, 1426, 1426,    0,    0, 1426, 1426, 1426,    0,    0,
        0, 1426, 1427,    0,    0, 1427,    0,    0,    0,    0,
        0,    0,    0, 1427,    0,    0, 1427, 1427, 1427,    0,
        0,    0, 1427, 1430,    0, 1430, 1430,    0, 1430,    0,
        0,    0,    0,    0,    0, 1430, 1430,    0,    0, 1430,
     1430, 1430,    0,    0,    0, 1430, 1431,    0,    0, 1431,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1431, 1431,    0, 1431, 1431, 1431, 1431, 1432,
     1432,    0, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,

     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1433,    0,    0, 1433,
        0,    0,    0,    0, 1433,    0, 1433, 1433, 1433, 1433,
     1433,    0,    0, 1433,    0,    0, 1433, 1433, 1433,    0,
     1433, 1433, 1433,    0,    0,    0, 1433, 1434,    0,    0,
     1434,    0,    0,    0,    0, 1434,    0, 1434,    0, 1434,
     1434, 1434,    0,    0, 1434,    0,    0, 1434, 1434, 1434,
        0, 1434, 1434, 1434,    0,    0,    0, 1434, 1435,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1435,    0,

     1435, 1435,    0,    0,    0,    0,    0,    0, 1435,    0,
        0, 1435, 1435, 1435,    0,    0,    0, 1435, 1436,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1436,    0,
        0, 1436, 1436, 1436,    0,    0,    0, 1436, 1437, 1437,
     1437, 1437,    0,    0, 1437,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1437,    0,    0, 1437,    0,    0,
        0,    0,    0,    0, 1437,    0,    0, 1437, 1437, 1437,
        0,    0, 1437, 1437, 1438, 1438, 1438, 1438,    0,    0,
     1438,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1438,    0, 1438, 1438,    0, 1438,    0,    0,    0,    0,
     1438,    0,    0, 1438, 1438, 1438,    0,    0,    0, 1438,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439,    0, 1439, 1439, 1439, 1439, 1439,
     1439, 1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440,
     1440,    0,    0, 1440,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1440,    0,    0, 1440, 1440, 1440,    0,
        0,    0, 1440, 1441,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1441,    0,    0, 1441,    0,
        0,    0,    0, 1441,    0,    0, 1441, 1441, 1441,    0,
        0,    0, 1441, 1442, 1442,    0, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
     1443,    0,    0, 1443,    0,    0,    0,    0, 1443,    0,
     1443, 1443, 1443, 1443, 1443,    0,    0, 1443,    0,    0,
     1443, 1443, 1443,    0, 1443, 1443, 1443,    0,    0,    0,
     1443, 1444,    0,    0, 1444,    0,    0,    0,    0, 1444,

        0, 1444,    0, 1444, 1444, 1444,    0,    0, 1444,    0,
        0, 1444, 1444, 1444,    0, 1444, 1444, 1444,    0,    0,
        0, 1444, 1445, 1445,    0, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446,
     1446,    0, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447,    0,    0,

     1447,    0,    0,    0,    0, 1447,    0, 1447, 1447, 1447,
     1447, 1447,    0,    0, 1447, 1447,    0, 1447, 1447, 1447,
        0, 1447, 1447, 1447,    0,    0,    0, 1447, 1448,    0,
        0, 1448,    0,    0,    0,    0, 1448,    0, 1448,    0,
     1448, 1448, 1448,    0,    0, 1448,    0,    0, 1448, 1448,
     1448,    0, 1448, 1448, 1448,    0,    0,    0, 1448, 1449,
     1449, 1449, 1449,    0,    0, 1449,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1449,    0,    0, 1449,    0,
        0,    0,    0,    0,    0, 1449,    0,    0, 1449, 1449,
     1449,    0,    0, 1449, 1449, 1450, 1450, 1450, 1450,    0,

        0, 1450,    0,    0,    0, 1450,    0,    0,    0,    0,
        0, 1450,    0, 1450, 1450,    0,    0,    0,    0,    0,
        0, 1450,    0,    0, 1450, 1450, 1450,    0,    0,    0,
     1450, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451,    0, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1452, 1452,
     1452, 1452,    0,    0, 1452,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1452,    0,    0, 1452, 1452, 1452,

        0,    0,    0, 1452, 1453,    0,    0, 1453,    0,    0,
     1453,    0,    0,    0, 1453,    0,    0,    0,    0,    0,
        0,    0, 1453,    0,    0,    0,    0,    0,    0,    0,
     1453,    0,    0, 1453, 1453, 1453,    0,    0,    0, 1453,
     1454,    0,    0, 1454,    0,    0,    0,    0,    0,    0,
        0, 1454,    0,    0, 1454, 1454, 1454,    0,    0,    0,
     1454, 1455, 1455,    0, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456,

        0, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1457, 1457,    0, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1458,    0,    0, 1458,    0,    0,    0,    0,
     1458,    0, 1458, 1458, 1458, 1458, 1458,    0,    0, 1458,
        0,    0, 1458, 1458, 1458,    0, 1458, 1458, 1458,    0,

        0,    0, 1458, 1459,    0,    0, 1459,    0,    0,    0,
        0, 1459,    0, 1459,    0, 1459, 1459, 1459,    0,    0,
     1459,    0,    0, 1459, 1459, 1459,    0, 1459, 1459, 1459,
        0,    0,    0, 1459, 1460,    0,    0, 1460,    0,    0,
     1460,    0,    0,    0,    0,    0,    0,    0, 1460,    0,
        0,    0, 1460,    0,    0,    0,    0,    0,    0,    0,
     1460,    0,    0, 1460, 1460, 1460,    0,    0,    0, 1460,
     1461, 1461, 1461, 1461,    0,    0, 1461,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1461, 1461,
        0,    0,    0,    0,    0,    0, 1461,    0,    0, 1461,

     1461, 1461,    0,    0,    0, 1461, 1462, 1462, 1462, 1462,
        0,    0, 1462,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1462, 1462,    0,    0,    0,    0,
        0,    0, 1462,    0,    0, 1462, 1462, 1462,    0,    0,
        0, 1462, 1463, 1463, 1463, 1463,    0,    0, 1463,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1463,    0,
        0, 1463,    0,    0,    0,    0,    0,    0, 1463,    0,
        0, 1463, 1463, 1463,    0,    0, 1463, 1463, 1464, 1464,
     1464, 1464,    0,    0, 1464,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1464,    0, 1464, 1464,    0,    0,

        0,    0,    0,    0, 1464,    0,    0, 1464, 1464, 1464,
        0,    0,    0, 1464, 1465, 1465, 1465, 1465,    0,    0,
     1465,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1465,    0,    0, 1465, 1465, 1465,    0,    0,    0, 1465,
     1466,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1466,    0,    0,    0,    0,    0,    0,    0,
     1466,    0,    0, 1466, 1466, 1466,    0,    0,    0, 1466,
     1467,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1467,    0, 1467,    0,    0,    0,    0,    0,    0,    0,

     1467,    0,    0, 1467, 1467, 1467,    0,    0,    0, 1467,
     1468,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1468,    0,    0, 1468, 1468, 1468,    0,    0,    0, 1468,
     1469, 1469, 1469, 1469,    0,    0, 1469,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1469, 1469,
        0,    0,    0,    0,    0,    0, 1469,    0,    0, 1469,
     1469, 1469,    0,    0,    0, 1469, 1470, 1470, 1470, 1470,
        0,    0, 1470,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1470, 1470,    0,    0,    0,    0,

        0,    0, 1470,    0,    0, 1470, 1470, 1470,    0,    0,
        0, 1470, 1471, 1471,    0, 1471,    0,    0,    0,    0,
        0,    0,    0, 1471,    0,    0, 1471, 1471, 1471,    0,
        0,    0, 1471, 1472, 1472,    0, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472,    0, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1473,    0,    0, 1473,    0,    0,    0,    0,    0,    0,
        0, 1473,    0,    0, 1473, 1473, 1473,    0,    0,    0,
     1473, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,

     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474,    0, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475,
        0, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475,    0, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1476,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1476,    0,    0, 1476, 1476,
     1476,    0,    0,    0, 1476, 1477,    0,    0, 1477,    0,

        0,    0,    0,    0,    0,    0, 1477,    0,    0, 1477,
     1477, 1477,    0,    0,    0, 1477, 1478, 1478,    0, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1479, 1479,    0, 1479,    0, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479,    0, 1479, 1479, 1479,
     1479,    0, 1479, 1479, 1479, 1479, 1479, 1479, 1479,    0,
     1479,    0, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1480,    0,    0, 1480,    0,    0,    0,    0,    0,    0,

     1480,    0,    0,    0,    0, 1480, 1480,    0, 1480,    0,
        0,    0,    0,    0,    0,    0, 1480,    0,    0, 1480,
     1480, 1480, 1481, 1481,    0, 1481,    0, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,    0, 1481,
        0, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1482,
     1482,    0, 1482,    0, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482,    0, 1482,    0, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1482, 1483,    0,    0, 1483,

        0,    0,    0,    0,    0,    0,    0, 1483,    0,    0,
     1483, 1483, 1483,    0,    0,    0, 1483, 1484, 1484,    0,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,    0,    0,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484,    0, 1484,    0, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1485,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1485,    0, 1485, 1485,    0,    0,
        0,    0,    0,    0, 1485,    0,    0, 1485, 1485, 1485,
        0,    0,    0, 1485, 1486,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1486,    0,    0, 1486, 1486, 1486,
        0,    0,    0, 1486, 1487,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1487,    0, 1487, 1487,    0,    0,
        0,    0,    0,    0, 1487,    0,    0, 1487, 1487, 1487,
        0,    0,    0, 1487, 1488,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1488,    0,    0, 1488, 1488, 1488,
        0,    0,    0, 1488, 1489, 1489,    0, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,

        0, 1489,    0, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1490,    0,    0, 1490,    0,    0,    0,    0,    0,
        0,    0, 1490,    0,    0, 1490, 1490, 1490,    0,    0,
        0, 1490, 1491, 1491,    0, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,    0, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
        0, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1492,
     1492,    0, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,

     1492, 1492, 1492, 1492, 1492, 1492, 1493, 1493,    0, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1494, 1494,    0, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494,    0, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,    0,
     1494,    0, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1496,    0,    0,    0,    0,    0,    0,    0,    0, 1496,
        0, 1496, 1496, 1496, 1496, 1496,    0,    0,    0,    0,

     1496,    0, 1496,    0,    0, 1496, 1496, 1496,    0,    0,
        0, 1496, 1497,    0, 1497, 1497, 1497, 1497, 1497,    0,
        0,    0,    0, 1497,    0, 1497,    0,    0, 1497, 1497,
     1497,    0,    0,    0, 1497, 1498,    0,    0, 1498,    0,
        0,    0,    0,    0, 1498,    0, 1498,    0,    0, 1498,
     1498, 1498,    0,    0,    0, 1498, 1499, 1499,    0, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499,    0,    0, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499,    0, 1499,    0, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500, 1500, 1500,

     1500, 1500, 1500, 1500,    0,    0, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1501, 1501,    0, 1501, 1501, 1501, 1501, 1501, 1501,    0,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501,    0, 1501,    0, 1501, 1501, 1501,    0,    0,
     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1502,    0,    0,
     1502,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1502,    0,    0, 1502, 1502, 1502, 1502,

     1503,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1503, 1503,    0,    0,    0,    0,    0,    0,
     1503,    0,    0, 1503, 1503, 1503,    0,    0,    0, 1503,
     1504, 1504,    0, 1504, 1504, 1504, 1504,    0, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505,    0,
     1505,    0,    0,    0,    0,    0,    0,    0, 1505,    0,
        0, 1505, 1505, 1505,    0,    0,    0, 1505, 1506,    0,
     1506, 1506,    0, 1506,    0,    0,    0,    0,    0,    0,

     1506, 1506,    0,    0, 1506, 1506, 1506,    0,    0,    0,
     1506, 1507, 1507,    0, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1508,    0,
        0, 1508,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1508,    0,    0, 1508, 1508, 1508,
     1510,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1510,    0, 1510,    0, 1510, 1510,    0,    0,    0,

        0,    0,    0, 1510,    0,    0, 1510, 1510, 1510,    0,
     1510, 1511, 1511,    0, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1514,    0,
        0, 1514,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1514, 1514,    0, 1514, 1514, 1514,
     1514, 1515,    0, 1515, 1515,    0, 1515,    0,    0,    0,
        0,    0,    0, 1515, 1515,    0,    0, 1515, 1515, 1515,

        0,    0,    0, 1515, 1516,    0,    0, 1516,    0,    0,
        0,    0, 1516,    0, 1516, 1516, 1516, 1516, 1516,    0,
        0, 1516,    0,    0, 1516, 1516, 1516,    0, 1516, 1516,
     1516,    0,    0,    0, 1516, 1517,    0,    0, 1517,    0,
        0,    0,    0, 1517,    0, 1517, 1517, 1517, 1517, 1517,
        0,    0, 1517,    0,    0, 1517, 1517, 1517,    0, 1517,
     1517, 1517,    0,    0,    0, 1517, 1518,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1518,    0, 1518, 1518,
        0,    0,    0,    0,    0,    0, 1518,    0,    0, 1518,
     1518, 1518,    0,    0,    0, 1518, 1519, 1519, 1519, 1519,

     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
     1519, 1519, 1519, 1520,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1520,    0,    0, 1520,    0,
        0,    0,    0, 1520,    0,    0, 1520, 1520, 1520,    0,
        0,    0, 1520, 1521,    0,    0, 1521,    0,    0,    0,
        0, 1521,    0, 1521, 1521, 1521, 1521, 1521,    0,    0,
     1521,    0,    0, 1521, 1521, 1521,    0, 1521, 1521, 1521,
        0,    0,    0, 1521, 1522,    0,    0, 1522,    0,    0,

        0,    0, 1522,    0, 1522, 1522, 1522, 1522, 1522,    0,
        0, 1522,    0,    0, 1522, 1522, 1522,    0, 1522, 1522,
     1522,    0,    0,    0, 1522, 1523, 1523,    0, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1524, 1524,    0,    0, 1524,    0,    0,    0,
        0, 1524,    0, 1524, 1524, 1524, 1524, 1524,    0,    0,
     1524, 1524,    0, 1524, 1524, 1524,    0, 1524, 1524, 1524,
        0,    0,    0, 1524, 1525, 1525,    0,    0, 1525,    0,

        0,    0,    0, 1525,    0, 1525, 1525, 1525, 1525, 1525,
        0,    0, 1525, 1525,    0, 1525, 1525, 1525,    0, 1525,
     1525, 1525,    0,    0,    0, 1525, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1527,    0,    0, 1527,    0,    0, 1527,
        0,    0,    0, 1527,    0,    0,    0,    0,    0,    0,
        0, 1527,    0,    0,    0,    0,    0,    0,    0, 1527,
        0,    0, 1527, 1527, 1527,    0,    0,    0, 1527, 1528,

        0,    0, 1528,    0,    0,    0,    0, 1528,    0, 1528,
     1528, 1528, 1528, 1528,    0,    0, 1528,    0,    0, 1528,
     1528, 1528,    0, 1528, 1528, 1528,    0,    0,    0, 1528,
     1529,    0,    0, 1529,    0,    0,    0,    0, 1529,    0,
     1529, 1529, 1529, 1529, 1529,    0,    0, 1529,    0,    0,
     1529, 1529, 1529,    0, 1529, 1529, 1529,    0,    0,    0,
     1529, 1530, 1530, 1530, 1530,    0,    0, 1530,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1530,
     1530,    0,    0,    0,    0,    0,    0, 1530,    0,    0,
     1530, 1530, 1530,    0,    0,    0, 1530, 1531, 1531, 1531,

     1531,    0,    0, 1531,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1531,    0,    0,    0,
        0,    0,    0, 1531,    0,    0, 1531, 1531, 1531,    0,
        0,    0, 1531, 1532,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1532,    0,    0,    0,    0,
        0,    0,    0, 1532,    0,    0, 1532, 1532, 1532,    0,
        0,    0, 1532, 1533,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1533,    0, 1533,    0,    0,    0,    0,
        0,    0,    0, 1533,    0,    0, 1533, 1533, 1533,    0,
        0,    0, 1533, 1534, 1534, 1534, 1534,    0,    0, 1534,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1534, 1534,    0,    0,    0,    0,    0,    0, 1534,
        0,    0, 1534, 1534, 1534,    0,    0,    0, 1534, 1535,
     1535, 1535, 1535,    0,    0, 1535,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1535,    0,
        0,    0,    0,    0,    0, 1535,    0,    0, 1535, 1535,
     1535,    0,    0,    0, 1535, 1536,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1536,    0,    0,
        0,    0,    0,    0,    0, 1536,    0,    0, 1536, 1536,
     1536,    0,    0,    0, 1536, 1537, 1537, 1537, 1537, 1537,

     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537,    0, 1537, 1537, 1537, 1537, 1537,
     1537, 1537,    0, 1537, 1537,    0,    0, 1537, 1537, 1537,
     1537, 1537, 1538,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1538,    0, 1538, 1538,    0,    0,    0,    0,
        0,    0, 1538,    0,    0, 1538, 1538, 1538,    0,    0,
        0, 1538, 1539,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1539,    0, 1539, 1539,    0,    0,    0,    0,
        0,    0, 1539,    0,    0, 1539, 1539, 1539,    0,    0,
        0, 1539, 1540,    0,    0,    0,    0, 1540,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1540,    0,    0, 1540, 1540, 1540,
        0,    0,    0, 1540, 1542,    0,    0,    0,    0,    0,
        0,    0,    0, 1542,    0, 1542, 1542, 1542, 1542, 1542,
        0,    0,    0,    0, 1542,    0, 1542,    0,    0, 1542,
     1542, 1542,    0,    0,    0, 1542, 1543,    0,    0, 1543,
        0,    0,    0,    0,    0, 1543,    0, 1543,    0,    0,
     1543, 1543, 1543,    0,    0,    0, 1543, 1544,    0, 1544,
     1544, 1544, 1544, 1544,    0,    0,    0,    0, 1544,    0,
     1544,    0,    0, 1544, 1544, 1544,    0,    0,    0, 1544,

     1545,    0,    0, 1545,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1545,    0,    0, 1545,
     1545, 1545, 1545, 1546, 1546,    0, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1547,    0,    0, 1547,    0,    0,    0,    0,    0,    0,
        0, 1547,    0,    0, 1547, 1547, 1547,    0,    0,    0,
     1547, 1548,    0, 1548, 1548,    0, 1548,    0,    0,    0,

        0,    0,    0, 1548, 1548,    0,    0, 1548, 1548, 1548,
        0,    0,    0, 1548, 1549,    0, 1549,    0, 1549, 1549,
        0, 1549,    0,    0,    0,    0,    0,    0, 1549, 1549,
        0,    0, 1549, 1549, 1549,    0,    0,    0, 1549, 1550,
        0,    0, 1550,    0,    0,    0,    0,    0,    0,    0,
     1550,    0,    0, 1550, 1550, 1550,    0,    0,    0, 1550,
     1551, 1551,    0, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1553,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1553,    0,
     1553,    0, 1553, 1553,    0,    0,    0,    0,    0,    0,
     1553,    0,    0, 1553, 1553, 1553,    0, 1553, 1554, 1554,
        0, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1555, 1555,    0, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,

     1555, 1555, 1557,    0,    0, 1557,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1557, 1557,
        0, 1557, 1557, 1557, 1557, 1558,    0, 1558, 1558,    0,
     1558,    0,    0,    0,    0,    0,    0, 1558, 1558,    0,
        0, 1558, 1558, 1558,    0,    0,    0, 1558, 1559,    0,
        0, 1559,    0,    0,    0,    0, 1559,    0, 1559, 1559,
     1559, 1559, 1559,    0,    0, 1559,    0,    0, 1559, 1559,
     1559,    0, 1559, 1559, 1559,    0,    0,    0, 1559, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,

     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560, 1560, 1560, 1561,    0,    0, 1561,
        0,    0,    0,    0, 1561,    0, 1561, 1561, 1561, 1561,
     1561,    0,    0, 1561,    0,    0, 1561, 1561, 1561,    0,
     1561, 1561, 1561,    0,    0,    0, 1561, 1562, 1562,    0,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1562, 1563, 1563,    0,    0, 1563,    0,

        0,    0,    0, 1563,    0, 1563, 1563, 1563, 1563, 1563,
        0,    0, 1563, 1563,    0, 1563, 1563, 1563,    0, 1563,
     1563, 1563,    0,    0,    0, 1563, 1564,    0,    0, 1564,
        0,    0,    0,    0, 1564,    0, 1564, 1564, 1564, 1564,
     1564,    0,    0, 1564,    0,    0, 1564, 1564, 1564,    0,
     1564, 1564, 1564,    0,    0,    0, 1564, 1565, 1565, 1565,
     1565,    0,    0, 1565,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1565,    0,    0,    0,
        0,    0,    0, 1565,    0,    0, 1565, 1565, 1565,    0,
        0,    0, 1565, 1566, 1566, 1566, 1566,    0,    0, 1566,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1566, 1566,    0,    0,    0,    0,    0,    0, 1566,
        0,    0, 1566, 1566, 1566,    0,    0,    0, 1566, 1567,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1567,
        0, 1567,    0,    0,    0,    0,    0,    0,    0, 1567,
        0,    0, 1567, 1567, 1567,    0,    0,    0, 1567, 1568,
     1568, 1568, 1568,    0,    0, 1568,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1568,    0,
        0,    0,    0,    0,    0, 1568,    0,    0, 1568, 1568,
     1568,    0,    0,    0, 1568, 1569, 1569, 1569, 1569,    0,

        0, 1569,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1569, 1569,    0,    0,    0,    0,    0,
        0, 1569,    0,    0, 1569, 1569, 1569,    0,    0,    0,
     1569, 1570,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1570,    0,    0,    0,    0,    0,    0,
        0, 1570,    0,    0, 1570, 1570, 1570,    0,    0,    0,
     1570, 1573,    0,    0, 1573,    0,    0,    0,    0,    0,
        0,    0, 1573,    0,    0, 1573, 1573, 1573,    0,    0,
        0, 1573, 1574,    0,    0,    0,    0,    0,    0,    0,
        0, 1574,    0, 1574, 1574, 1574, 1574, 1574,    0,    0,

        0,    0, 1574,    0, 1574,    0,    0, 1574, 1574, 1574,
        0,    0,    0, 1574, 1575,    0, 1575, 1575, 1575, 1575,
     1575,    0,    0,    0,    0, 1575,    0, 1575,    0,    0,
     1575, 1575, 1575,    0,    0,    0, 1575, 1576,    0,    0,
     1576,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1576,    0,    0, 1576, 1576, 1576, 1576,
     1577, 1577,    0, 1577,    0,    0,    0,    0,    0,    0,
        0, 1577,    0,    0, 1577, 1577, 1577,    0,    0,    0,
     1577, 1578,    0, 1578,    0, 1578, 1578,    0, 1578,    0,

        0,    0,    0,    0,    0, 1578, 1578,    0,    0, 1578,
     1578, 1578,    0,    0,    0, 1578, 1579, 1579,    0, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1580,    0,    0, 1580,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1580,
     1580,    0, 1580, 1580, 1580, 1580, 1581,    0, 1581, 1581,
        0, 1581,    0,    0,    0,    0,    0,    0, 1581, 1581,

        0,    0, 1581, 1581, 1581,    0,    0,    0, 1581, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,    0, 1582,
     1582, 1582, 1582, 1582, 1582, 1582,    0, 1582, 1582,    0,
     1582,    0, 1582, 1582, 1582, 1582, 1583,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1583,    0,    0,
     1583,    0,    0,    0,    0,    0,    0,    0, 1583,    0,
        0, 1583, 1583, 1583,    0,    0,    0, 1583, 1584,    0,
        0,    0,    0,    0, 1584,    0,    0, 1584,    0,    0,
        0,    0,    0,    0,    0, 1584,    0,    0, 1584, 1584,

     1584,    0,    0,    0, 1584, 1585, 1585,    0, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,
     1585, 1585, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586,    0, 1586, 1586, 1586, 1586, 1586, 1586, 1586,    0,
     1586, 1586,    0,    0,    0, 1586, 1586, 1586, 1586, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,    0, 1587,

     1587, 1587, 1587, 1587, 1587, 1587,    0, 1587, 1587,    0,
        0,    0, 1587, 1587, 1587, 1587, 1588,    0, 1588, 1588,
        0, 1588,    0,    0,    0,    0,    0,    0,    0, 1588,
        0,    0, 1588, 1588, 1588,    0,    0,    0, 1588, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,    0, 1589,
     1589, 1589, 1589, 1589, 1589, 1589,    0, 1589, 1589,    0,
        0,    0, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590,    0, 1590, 1590, 1590, 1590,

     1590, 1590, 1590,    0, 1590, 1590,    0,    0,    0, 1590,
     1590, 1590, 1590, 1591, 1591,    0, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1592, 1592,    0, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,

     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2020 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 29 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"

/*
 *        includes
 */

#include <map>
#include <stack>
#include <string>
#include <mutex>
#include <functional>
#include <unordered_map>

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qcstring.h"
#include "fileinfo.h"
#include "cite.h"
#include "commentscan.h"
#include "condparser.h"
#include "config.h"
#include "debug.h"
#include "docgroup.h"
#include "doxygen.h"
#include "entry.h"
#include "formula.h"
#include "language.h"
#include "message.h"
#include "parserintf.h"
#include "reflist.h"
#include "section.h"
#include "util.h"
#include "reflist.h"

#define USE_STATE2STRING 0

// forward declarations
static bool handleBrief(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleFn(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleDef(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleOverload(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleEnum(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleDefGroup(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleAddToGroup(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleWeakGroup(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleNamespace(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handlePackage(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleConcept(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleClass(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleHeaderFile(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleProtocol(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleCategory(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleUnion(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleStruct(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleInterface(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleIdlException(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handlePage(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleMainpage(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleFile(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleDir(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleExample(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleDetails(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleRaiseWarning(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleNoop(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleName(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleTodo(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleTest(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleBug(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleSubpage(yyscan_t yyscanner,const QCString &s, const StringVector &);
static bool handleDeprecated(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleXRefItem(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleRelated(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleRelatedAlso(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleMemberOf(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleRefItem(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleSection(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleAnchor(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleImage(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleCite(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleFormatBlock(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleAddIndex(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleIf(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleIfNot(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleElseIf(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleElse(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleEndIf(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleIngroup(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleNoSubGrouping(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleShowInitializer(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleHideInitializer(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleCallgraph(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleHideCallgraph(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleCallergraph(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleHideCallergraph(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleReferencedByRelation(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleHideReferencedByRelation(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleReferencesRelation(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleHideReferencesRelation(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleInternal(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleStatic(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handlePure(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handlePrivate(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handlePrivateSection(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleProtected(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleProtectedSection(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handlePublic(yyscan_t yyscanner,const QCString &s, const StringVector &);
static bool handlePublicSection(yyscan_t yyscanner,const QCString &s, const StringVector &);
static bool handleToc(yyscan_t yyscanner,const QCString &s, const StringVector &);
static bool handleInherit(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleExtends(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleCopyDoc(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleCopyBrief(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleCopyDetails(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleParBlock(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleEndParBlock(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleParam(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleRetval(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleFileInfo(yyscan_t yyscanner,const QCString &, const StringVector &);
static bool handleLineInfo(yyscan_t yyscanner,const QCString &, const StringVector &);

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

typedef bool (*DocCmdFunc)(yyscan_t yyscanner,const QCString &name, const StringVector &optList);

enum class CommandSpacing
{
  Invisible, // command sets some property but does not appear in the output.
  Inline,    // command appears inline in the output which can be a brief description.
  Block,     // command starts a new paragraphs / ends a brief description.
  XRef       // command is a cross reference (todo, bug, test, xrefitem).
};

struct DocCmdMap
{
  DocCmdMap(DocCmdFunc h,CommandSpacing s) : handler(h), spacing(s) {}
  DocCmdFunc handler;
  CommandSpacing spacing;
};

// map of command to handler function
static const std::map< std::string, DocCmdMap > docCmdMap =
{
  // command name      handler function           command spacing
  { "addindex",        { &handleAddIndex,         CommandSpacing::Invisible }},
  { "addtogroup",      { &handleAddToGroup,       CommandSpacing::Invisible }},
  { "anchor",          { &handleAnchor,           CommandSpacing::Invisible }},
  { "arg",             { 0,                       CommandSpacing::Block     }},
  { "attention",       { 0,                       CommandSpacing::Block     }},
  { "author",          { 0,                       CommandSpacing::Block     }},
  { "authors",         { 0,                       CommandSpacing::Block     }},
  { "brief",           { &handleBrief,            CommandSpacing::Invisible }},
  { "bug",             { &handleBug,              CommandSpacing::XRef      }},
  { "callergraph",     { &handleCallergraph,      CommandSpacing::Invisible }},
  { "callgraph",       { &handleCallgraph,        CommandSpacing::Invisible }},
  { "category",        { &handleCategory,         CommandSpacing::Invisible }},
  { "cite",            { &handleCite,             CommandSpacing::Inline    }},
  { "class",           { &handleClass,            CommandSpacing::Invisible }},
  { "code",            { &handleFormatBlock,      CommandSpacing::Block     }},
  { "icode",           { &handleFormatBlock,      CommandSpacing::Block     }},
  { "concept",         { &handleConcept,          CommandSpacing::Invisible }},
  { "copybrief",       { &handleCopyBrief,        CommandSpacing::Invisible }},
  { "copydetails",     { &handleCopyDetails,      CommandSpacing::Block     }},
  { "copydoc",         { &handleCopyDoc,          CommandSpacing::Block     }},
  { "copyright",       { 0,                       CommandSpacing::Block     }},
  { "showdate",        { 0,                       CommandSpacing::Inline    }},
  { "date",            { 0,                       CommandSpacing::Block     }},
  { "def",             { &handleDef,              CommandSpacing::Invisible }},
  { "defgroup",        { &handleDefGroup,         CommandSpacing::Invisible }},
  { "deprecated",      { &handleDeprecated,       CommandSpacing::XRef      }},
  { "details",         { &handleDetails,          CommandSpacing::Block     }},
  { "dir",             { &handleDir,              CommandSpacing::Invisible }},
  { "docbookinclude",  { 0,                       CommandSpacing::Inline    }},
  { "docbookonly",     { &handleFormatBlock,      CommandSpacing::Invisible }},
  { "dot",             { &handleFormatBlock,      CommandSpacing::Block     }},
  { "dotfile",         { 0,                       CommandSpacing::Block     }},
  { "else",            { &handleElse,             CommandSpacing::Inline    }},
  { "elseif",          { &handleElseIf,           CommandSpacing::Inline    }},
  { "endif",           { &handleEndIf,            CommandSpacing::Inline    }},
  { "endparblock",     { &handleEndParBlock,      CommandSpacing::Block     }},
  { "enum",            { &handleEnum,             CommandSpacing::Invisible }},
  { "example",         { &handleExample,          CommandSpacing::Invisible }},
  { "exception",       { 0,                       CommandSpacing::Block     }},
  { "extends",         { &handleExtends,          CommandSpacing::Invisible }},
  { "file",            { &handleFile,             CommandSpacing::Invisible }},
  { "fn",              { &handleFn,               CommandSpacing::Invisible }},
  { "headerfile",      { &handleHeaderFile,       CommandSpacing::Invisible }},
  { "hidecallergraph", { &handleHideCallergraph,  CommandSpacing::Invisible }},
  { "hidecallgraph",   { &handleHideCallgraph,    CommandSpacing::Invisible }},
  { "hideinitializer", { &handleHideInitializer,  CommandSpacing::Invisible }},
  { "hiderefby",       { &handleHideReferencedByRelation, CommandSpacing::Invisible }},
  { "hiderefs",        { &handleHideReferencesRelation,   CommandSpacing::Invisible }},
  { "htmlinclude",     { 0,                       CommandSpacing::Inline    }},
  { "htmlonly",        { &handleFormatBlock,      CommandSpacing::Invisible }},
  { "idlexcept",       { &handleIdlException,     CommandSpacing::Invisible }},
  { "if",              { &handleIf,               CommandSpacing::Inline    }},
  { "ifnot",           { &handleIfNot,            CommandSpacing::Inline    }},
  { "image",           { &handleImage,            CommandSpacing::Block     }},
  { "implements",      { &handleExtends,          CommandSpacing::Invisible }},
  { "include",         { 0,                       CommandSpacing::Block     }},
  { "includelineno",   { 0,                       CommandSpacing::Block     }},
  { "ingroup",         { &handleIngroup,          CommandSpacing::Invisible }},
  { "inherit",         { &handleInherit,          CommandSpacing::Invisible }},
  { "interface",       { &handleInterface,        CommandSpacing::Invisible }},
  { "internal",        { &handleInternal,         CommandSpacing::Block     }},
  { "invariant",       { 0,                       CommandSpacing::Block     }},
  { "latexinclude",    { 0,                       CommandSpacing::Inline    }},
  { "latexonly",       { &handleFormatBlock,      CommandSpacing::Invisible }},
  { "li",              { 0,                       CommandSpacing::Block     }},
  { "line",            { 0,                       CommandSpacing::Invisible }},
  { "mainpage",        { &handleMainpage,         CommandSpacing::Invisible }},
  { "maninclude",      { 0,                       CommandSpacing::Inline    }},
  { "manonly",         { &handleFormatBlock,      CommandSpacing::Invisible }},
  { "memberof",        { &handleMemberOf,         CommandSpacing::Invisible }},
  { "msc",             { &handleFormatBlock,      CommandSpacing::Block     }},
  { "name",            { &handleName,             CommandSpacing::Invisible }},
  { "namespace",       { &handleNamespace,        CommandSpacing::Invisible }},
  { "noop",            { &handleNoop,             CommandSpacing::Invisible }},
  { "nosubgrouping",   { &handleNoSubGrouping,    CommandSpacing::Invisible }},
  { "note",            { 0,                       CommandSpacing::Block     }},
  { "overload",        { &handleOverload,         CommandSpacing::Invisible }},
  { "package",         { &handlePackage,          CommandSpacing::Invisible }},
  { "page",            { &handlePage,             CommandSpacing::Invisible }},
  { "par",             { 0,                       CommandSpacing::Block     }},
  { "paragraph",       { &handleSection,          CommandSpacing::Block     }},
  { "param",           { &handleParam,            CommandSpacing::Block     }},
  { "parblock",        { &handleParBlock,         CommandSpacing::Block     }},
  { "post",            { 0,                       CommandSpacing::Block     }},
  { "pre",             { 0,                       CommandSpacing::Block     }},
  { "private",         { &handlePrivate,          CommandSpacing::Invisible }},
  { "privatesection",  { &handlePrivateSection,   CommandSpacing::Invisible }},
  { "property",        { &handleFn,               CommandSpacing::Invisible }},
  { "protected",       { &handleProtected,        CommandSpacing::Invisible }},
  { "protectedsection",{ &handleProtectedSection, CommandSpacing::Invisible }},
  { "protocol",        { &handleProtocol,         CommandSpacing::Invisible }},
  { "public",          { &handlePublic,           CommandSpacing::Invisible }},
  { "publicsection",   { &handlePublicSection,    CommandSpacing::Invisible }},
  { "pure",            { &handlePure,             CommandSpacing::Invisible }},
  { "raisewarning",    { &handleRaiseWarning,     CommandSpacing::Invisible }},
  { "refitem",         { &handleRefItem,          CommandSpacing::Inline    }},
  { "related",         { &handleRelated,          CommandSpacing::Invisible }},
  { "relatedalso",     { &handleRelatedAlso,      CommandSpacing::Invisible }},
  { "relates",         { &handleRelated,          CommandSpacing::Invisible }},
  { "relatesalso",     { &handleRelatedAlso,      CommandSpacing::Invisible }},
  { "remark",          { 0,                       CommandSpacing::Block     }},
  { "remarks",         { 0,                       CommandSpacing::Block     }},
  { "result",          { 0,                       CommandSpacing::Block     }},
  { "return",          { 0,                       CommandSpacing::Block     }},
  { "returns",         { 0,                       CommandSpacing::Block     }},
  { "retval",          { &handleRetval,           CommandSpacing::Block     }},
  { "rtfinclude",      { 0,                       CommandSpacing::Inline    }},
  { "rtfonly",         { &handleFormatBlock,      CommandSpacing::Invisible }},
  { "sa",              { 0,                       CommandSpacing::Block     }},
  { "section",         { &handleSection,          CommandSpacing::Block     }},
  { "see",             { 0,                       CommandSpacing::Block     }},
  { "short",           { &handleBrief,            CommandSpacing::Invisible }},
  { "showinitializer", { &handleShowInitializer,  CommandSpacing::Invisible }},
  { "showrefby",       { &handleReferencedByRelation,     CommandSpacing::Invisible }},
  { "showrefs",        { &handleReferencesRelation,       CommandSpacing::Invisible }},
  { "since",           { 0,                       CommandSpacing::Block     }},
  { "snippet",         { 0,                       CommandSpacing::Block     }},
  { "snippetlineno",   { 0,                       CommandSpacing::Block     }},
  { "startuml",        { &handleFormatBlock,      CommandSpacing::Block     }},
  { "static",          { &handleStatic,           CommandSpacing::Invisible }},
  { "struct",          { &handleStruct,           CommandSpacing::Invisible }},
  { "subpage",         { &handleSubpage,          CommandSpacing::Inline    }},
  { "subsection",      { &handleSection,          CommandSpacing::Block     }},
  { "subsubsection",   { &handleSection,          CommandSpacing::Block     }},
  { "tableofcontents", { &handleToc,              CommandSpacing::Invisible }},
  { "test",            { &handleTest,             CommandSpacing::XRef      }},
  { "throw",           { 0,                       CommandSpacing::Block     }},
  { "throws",          { 0,                       CommandSpacing::Block     }},
  { "todo",            { &handleTodo,             CommandSpacing::XRef      }},
  { "tparam",          { 0,                       CommandSpacing::Block     }},
  { "typedef",         { &handleFn,               CommandSpacing::Invisible }},
  { "union",           { &handleUnion,            CommandSpacing::Invisible }},
  { "until",           { 0,                       CommandSpacing::Block     }},
  { "var",             { &handleFn,               CommandSpacing::Invisible }},
  { "verbatim",        { &handleFormatBlock,      CommandSpacing::Block     }},
  { "iverbatim",       { &handleFormatBlock,      CommandSpacing::Block     }},
  { "verbinclude",     { 0,                       CommandSpacing::Inline    }},
  { "version",         { 0,                       CommandSpacing::Block     }},
  { "warning",         { 0,                       CommandSpacing::Block     }},
  { "weakgroup",       { &handleWeakGroup,        CommandSpacing::Invisible }},
  { "xmlinclude",      { 0,                       CommandSpacing::Inline    }},
  { "xmlonly",         { &handleFormatBlock,      CommandSpacing::Invisible }},
  { "xrefitem",        { &handleXRefItem,         CommandSpacing::XRef      }},
  { "iliteral",        { &handleFormatBlock,      CommandSpacing::Inline    }},
  { "fileinfo",        { &handleFileInfo,         CommandSpacing::Inline    }},
  { "lineinfo",        { &handleLineInfo,         CommandSpacing::Inline    }},
};

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
#define YY_NEVER_INTERACTIVE 1


enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible)
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }

  private:
    bool m_enabled;
    bool m_parentVisible;
};

/* -----------------------------------------------------------------
 *
 *        statics
 */

struct commentscanYY_state
{
  OutlineParserInterface *langParser = 0;  // the language parser that is calling us
  QCString         inputString;            // input string
  QCString         currentCmd;             // the command used
  int              inputPosition = 0;      // read pointer
  QCString         fileName;               // file name that is read from
  int              lineNr = 0;             // line number in the input
  bool             inBody = FALSE;         // was the comment found inside the body of a function?
  OutputContext    inContext;              // are we inside the brief, details or xref part
  bool             briefEndsAtDot = FALSE; // does the brief description stop at a dot?
  QCString         formulaText;            // Running text of a formula
  QCString         formulaEnv;             // environment name
  int              formulaNewLines = 0;    // amount of new lines in the formula
  QCString        *pOutputString = 0;      // pointer to string to which the output is appended.
  QCString         outputXRef;               // temp argument of todo/test/../xrefitem commands
  QCString         blockName;                // preformatted block name (e.g. verbatim, latexonly,...)
  XRefKind         xrefKind    = XRef_Item;  // kind of cross-reference command
  XRefKind         newXRefKind = XRef_Item;  //
  GuardType        guardType = Guard_If;     // kind of guards for conditional section
  bool             enabledSectionFound = FALSE;
  QCString         functionProto;          // function prototype
  std::stack<GuardedSection> guards;             // tracks nested conditional sections (if,ifnot,..)
  Entry           *current = 0;              // working entry

  bool             needNewEntry = FALSE;

  QCString         sectionLabel;
  QCString         sectionTitle;
  int              sectionLevel = 0;
  QCString         xrefItemKey;
  QCString         newXRefItemKey;
  QCString         xrefItemTitle;
  QCString         xrefListTitle;
  Protection       protection = Public;

  bool             xrefAppendFlag = FALSE;
  bool             inGroupParamFound = FALSE;
  int              braceCount = 0;
  bool             insidePre = FALSE;
  bool             parseMore = FALSE;
  int              condCount = 0;

  int              commentCount = 0;
  QCString         spaceBeforeCmd;
  QCString         spaceBeforeIf;
  QCString         copyDocArg;

  QCString         guardExpr;
  int              roundCount = 0;
  int              HTMLDetails = 0;

  bool             insideParBlock = FALSE;
  bool             inInternalDocs = FALSE;
  int              prevPosition = 0;
  DocGroup         docGroup;
  bool             markdownSupport = TRUE;

  QCString         raiseWarning;

  QCString         htmlAnchorStr;
  bool             htmlAnchor = false;
};


static std::mutex g_sectionMutex;
static std::mutex g_formulaMutex;
static std::mutex g_citeMutex;

//-----------------------------------------------------------------------------

static QCString stripQuotes(const char *s);
static bool getDocSectionName(int s);
static SectionType sectionLevelToType(int level);
static void stripTrailingWhiteSpace(QCString &s);

static void initParser(yyscan_t yyscanner);
static bool makeStructuralIndicator(yyscan_t yyscanner,Entry::Sections s);
static void lineCount(yyscan_t yyscanner);
static void addXRefItem(yyscan_t yyscanner,
                        const QCString &listName,const QCString &itemTitle,
                        const QCString &listTitle,bool append);
static QCString addFormula(yyscan_t yyscanner);
static void checkFormula(yyscan_t yyscanner);
static void addSection(yyscan_t yyscanner);
static inline void setOutput(yyscan_t yyscanner,OutputContext ctx);
static void addAnchor(yyscan_t yyscanner,const QCString &anchor);
static inline void addOutput(yyscan_t yyscanner,const char *s);
static inline void addOutput(yyscan_t yyscanner,const QCString &s);
static inline void addOutput(yyscan_t yyscanner,char c);
static void endBrief(yyscan_t yyscanner,bool addToOutput=TRUE);
static void handleGuard(yyscan_t yyscanner,const QCString &expr);
static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size);
static void addCite(yyscan_t yyscanner);
static void addIline(yyscan_t yyscanner,int lineNr);
static void addIlineBreak(yyscan_t yyscanner,int lineNr);

#define unput_string(yytext,yyleng) do { for (int i=(int)yyleng-1;i>=0;i--) unput(yytext[i]); } while(0)

//-----------------------------------------------------------------------------

#undef        YY_INPUT
#define        YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 4381 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan_intermediate.cpp"
#line 483 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
       /* start command character */
  // C start comment 
  // C end comment
  // Cpp comment 
  // end of section title with asterisk
  // end of section title without asterisk
  /* comment parsing states. */
















































#line 4438 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan_intermediate.cpp"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define ParamArg1 13
#define EnumDocArg1 14
#define NameSpaceDocArg1 15
#define PackageDocArg1 16
#define ConceptDocArg1 17
#define GroupDocArg1 18
#define GroupDocArg2 19
#define SectionLabel 20
#define SectionTitle 21
#define SubpageLabel 22
#define SubpageTitle 23
#define FormatBlock 24
#define LineParam 25
#define GuardParam 26
#define GuardParamEnd 27
#define SkipGuardedSection 28
#define SkipInternal 29
#define NameParam 30
#define InGroupParam 31
#define FnParam 32
#define OverloadParam 33
#define InheritParam 34
#define ExtendsParam 35
#define ReadFormulaShort 36
#define ReadFormulaRound 37
#define ReadFormulaLong 38
#define AnchorLabel 39
#define HtmlComment 40
#define HtmlA 41
#define SkipLang 42
#define CiteLabel 43
#define CopyDoc 44
#define GuardExpr 45
#define CdataSection 46
#define Noop 47
#define RaiseWarning 48

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#define YY_EXTRA_TYPE struct commentscanYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int commentscanYYlex_init (yyscan_t* scanner);

int commentscanYYlex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy ( yyscan_t yyscanner );

int commentscanYYget_debug ( yyscan_t yyscanner );

void commentscanYYset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE commentscanYYget_extra ( yyscan_t yyscanner );

void commentscanYYset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *commentscanYYget_in ( yyscan_t yyscanner );

void commentscanYYset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *commentscanYYget_out ( yyscan_t yyscanner );

void commentscanYYset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int commentscanYYget_leng ( yyscan_t yyscanner );

char *commentscanYYget_text ( yyscan_t yyscanner );

int commentscanYYget_lineno ( yyscan_t yyscanner );

void commentscanYYset_lineno ( int _line_number , yyscan_t yyscanner );

int commentscanYYget_column  ( yyscan_t yyscanner );

void commentscanYYset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap ( yyscan_t yyscanner );
#else
extern int commentscanYYwrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (yyscan_t yyscanner);

#define YY_DECL int commentscanYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		commentscanYY_load_buffer_state(yyscanner );
		}

	{
#line 593 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$...\f$ \f[...\f] \f{...\f} \f(...\f) )
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. doxygen@gmail.com).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4784 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1333 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1332 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 612 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // escaped command
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 615 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // escaped command
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 618 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // mail address
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 621 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // quoted text
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 624 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // directory (or chain of commands!)
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 627 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // HTML command that ends a brief description
                                          setOutput(yyscanner,OutputDoc);
                                          // continue with the same input
                                          REJECT;
                                        }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 632 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // HTML command that ends a brief description
                                          if (yyextra->current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(yyscanner,OutputDoc);
                                          }
                                          // continue with the same input
                                          REJECT;
                                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 640 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a HTML style details description
                                          yyextra->HTMLDetails++;
                                          setOutput(yyscanner,OutputDoc);
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 645 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of a HTML style details description
                                          if (yyextra->HTMLDetails) yyextra->HTMLDetails--;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 649 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // potential start of HTML anchor, see issue 9200
                                          yyextra->htmlAnchorStr = yytext;
                                          yyextra->htmlAnchor = false;
                                          BEGIN(HtmlA);
                                        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 654 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // only labels that can be converted to doxygen anchor
                                          yyextra->htmlAnchorStr += yytext;
                                          QCString tag(yytext);
                                          int s=tag.find("=");
                                          char c=tag[s+1];
                                          QCString id;
                                          if (c=='\'' || c=='"') // valid start
                                          {
                                            int e=tag.find(c,s+2);
                                            if (e!=-1) // found matching end
                                            {
                                              id=tag.mid(s+2,e-s-2); // extract id
                                              addAnchor(yyscanner,id);
                                            }
                                          }
                                          else
                                          {
                                            id=tag.mid(s+1);
                                            addAnchor(yyscanner,id);
                                          }
                                          if (!id.isEmpty() && !yyextra->htmlAnchor)
                                          {
                                            // only use first analogous to what is in docparser
                                            addOutput(yyscanner,"@anchor ");
                                            addOutput(yyscanner,id.data());
                                            addOutput(yyscanner," ");
                                            yyextra->htmlAnchor = true;
                                          }
                                        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 683 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->htmlAnchorStr += yytext;
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 686 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (!yyextra->htmlAnchor)
                                          {
                                            addOutput(yyscanner,yyextra->htmlAnchorStr);
                                            addOutput(yyscanner,yytext);
                                          }
                                          else
                                          {
                                            if (yyleng == 1) // to keep <a></a> pairs, otherwise single </a> present
                                            {
                                              addOutput(yyscanner,"<a>");
                                            }
                                          }
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 701 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // newline
                                          yyextra->htmlAnchorStr += yytext;
                                          if (*yytext == '\n') yyextra->lineNr++;
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 705 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // catch-all for anything else
                                          yyextra->htmlAnchorStr += yytext;
                                        }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 708 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a .NET XML style brief description
                                          if (!yyextra->HTMLDetails) setOutput(yyscanner,OutputBrief);
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 712 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a .NET XML style detailed description
                                          setOutput(yyscanner,OutputDoc);
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 716 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(yyscanner,yytext);
                                          if (!yyextra->HTMLDetails) setOutput(yyscanner,OutputDoc);
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 720 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of a brief or detailed description
                                          setOutput(yyscanner,OutputDoc);
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 724 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          QCString tag(yytext);
                                          int s=tag.find("id=");
                                          if (s!=-1) // command has id attribute
                                          {
                                            char c=tag[s+3];
                                            if (c=='\'' || c=='"') // valid start
                                            {
                                              int e=tag.find(c,s+4);
                                              if (e!=-1) // found matching end
                                              {
                                                QCString id=tag.mid(s+4,e-s-4); // extract id
                                                addAnchor(yyscanner,id);
                                              }
                                            }
                                          }
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 742 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->insidePre=TRUE;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 746 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->insidePre=FALSE;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 750 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // RCS tag which end a brief description
                                          setOutput(yyscanner,OutputDoc);
                                          REJECT;
                                        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 754 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          BEGIN(HtmlComment);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 757 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          BEGIN(CdataSection);
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 760 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner," \\endinternal ");
                                          if (!yyextra->inInternalDocs)
                                              warn(yyextra->fileName,yyextra->lineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          yyextra->inInternalDocs = FALSE;
                                        }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 768 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // preserve spacing around \\ilinebr
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 28:
#line 772 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
case 29:
YY_RULE_SETUP
#line 772 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
                                          QCString fullMatch = QCString(yytext);
                                          int idx = fullMatch.find('{');
                                          /* handle `\f{` and `@f{` as special cases */
                                          if ((idx > 1) && (yytext[idx-1] == 'f') && (yytext[idx-2] == '\\' || yytext[idx-2] =='@')) REJECT;
                                          int idxEnd = fullMatch.find("}",idx+1);
                                          QCString cmdName;
                                          StringVector optList;
                                          if (idx == -1) // no options
                                          {
                                            cmdName = QCString(yytext).stripWhiteSpace().mid(1); // to remove {CMD}
                                          }
                                          else // options present
                                          {
                                            cmdName = fullMatch.left(idx).stripWhiteSpace().mid(1); // to remove {CMD}
                                            QCString optStr = fullMatch.mid(idx+1,idxEnd-idx-1).stripWhiteSpace();
                                            optList = split(optStr.str(),",");
                                          }
                                          auto it = docCmdMap.find(cmdName.str());
                                          //printf("lookup command '%s' found=%d\n",qPrint(cmdName),it!=docCmdMap.end());
                                          if (it!=docCmdMap.end()) // special action is required
                                          {
                                            int i=0;
                                            while (yytext[i]==' ' || yytext[i]=='\t') i++;
                                            yyextra->spaceBeforeCmd = QCString(yytext).left(i);
                                            CommandSpacing spacing = it->second.spacing;
                                            if ((spacing==CommandSpacing::Block || spacing==CommandSpacing::XRef) &&
                                                !(yyextra->inContext==OutputXRef && cmdName=="parblock"))
                                            {
                                              yyextra->briefEndsAtDot=FALSE;
                                              bool insideXRef = yyextra->inContext==OutputXRef && spacing==CommandSpacing::XRef;
                                              // this command forces the end of brief description
                                              setOutput(yyscanner,insideXRef ? OutputXRef : OutputDoc);
                                            }
                                            //if (i>0) addOutput(yyscanner,QCString(yytext).left(i)); // removed for bug 689341
                                            if (it->second.handler && it->second.handler(yyscanner, cmdName, optList))
                                            {
                                              // implicit split of the comment block into two
                                              // entries. Restart the next block at the start
                                              // of this command.
                                              yyextra->parseMore=TRUE;

                                              // yuk, this is probably not very portable across lex implementations,
                                              // but we need to know the position in the input buffer where this
                                              // rule matched.
                                              // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
                                              yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
                                              yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
                                              yyterminate();
                                            }
                                            else if (it->second.handler==0)
                                            {
                                              // command without handler, to be processed
                                              // later by parsedoc.cpp
                                              addOutput(yyscanner,yytext);
                                            }
                                          }
                                          else // command not relevant
                                          {
                                            addOutput(yyscanner,yytext);
                                          }
                                        }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 838 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // escaped formula command
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 841 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // language switch command
                                          QCString langId = QCString(yytext).stripWhiteSpace().mid(2);
                                          if (!langId.isEmpty() &&
                                              qstricmp(Config_getEnumAsString(OUTPUT_LANGUAGE),langId)!=0)
                                          { // enable language specific section
                                            if (!Config_isAvailableEnum(OUTPUT_LANGUAGE,langId))
                                            {
                                               warn(yyextra->fileName,yyextra->lineNr,
                                               "non supported language '%s' specified in '%s'",langId.data(),QCString(yytext).stripWhiteSpace().data());
                                            }
                                            BEGIN(SkipLang);
                                          }
                                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 854 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a formula with custom environment
                                          setOutput(yyscanner,OutputDoc);
                                          yyextra->formulaText="\\begin";
                                          yyextra->formulaEnv=QCString(yytext).stripWhiteSpace().mid(2);
                                          if (yyextra->formulaEnv.at(yyextra->formulaEnv.length()-1)=='{')
                                          {
                                            // remove trailing open brace
                                            yyextra->formulaEnv=yyextra->formulaEnv.left(yyextra->formulaEnv.length()-1);
                                          }
                                          yyextra->formulaText+=yyextra->formulaEnv;
                                          yyextra->formulaNewLines=0;
                                          BEGIN(ReadFormulaLong);
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 867 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a inline formula
                                          yyextra->formulaText="$";
                                          yyextra->formulaNewLines=0;
                                          BEGIN(ReadFormulaShort);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 872 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a inline formula
                                          yyextra->formulaText="";
                                          yyextra->formulaNewLines=0;
                                          BEGIN(ReadFormulaRound);
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 877 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a block formula
                                          setOutput(yyscanner,OutputDoc);
                                          yyextra->formulaText="\\[";
                                          yyextra->formulaNewLines=0;
                                          BEGIN(ReadFormulaLong);
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 883 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // begin of a group
                                          //yyextra->langParser->handleGroupStartCommand(yyextra->memberGroupHeader);
                                          yyextra->docGroup.open(yyextra->current,yyextra->fileName,yyextra->lineNr);
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 887 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of a group
                                          //yyextra->langParser->handleGroupEndCommand();
                                          yyextra->docGroup.close(yyextra->current,yyextra->fileName,yyextra->lineNr,TRUE);
                                          yyextra->docGroup.clearHeader();
                                          yyextra->parseMore=TRUE;
                                          yyextra->needNewEntry = TRUE;
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
                                          yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + (int)strlen(yytext);
#else
                                          yyextra->inputPosition=yyextra->prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + (int)strlen(yytext);
#endif
                                          yyterminate();
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 900 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // escaped character
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 903 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // normal word
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 40:
/* rule 40 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 906 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // explicit end autolist: e.g "  ."
                                            addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 41:
#line 910 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
case 42:
YY_RULE_SETUP
#line 910 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of autolist
                                          if (!yyextra->markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (yyextra->inContext!=OutputXRef)
                                            {
                                              yyextra->briefEndsAtDot=FALSE;
                                              setOutput(yyscanner,OutputDoc);
                                            }
                                            addOutput(yyscanner,yytext);
                                          }
                                          }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 925 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of autolist
                                          if (yyextra->inContext!=OutputXRef)
                                          {
                                            yyextra->briefEndsAtDot=FALSE;
                                            setOutput(yyscanner,OutputDoc);
                                          }
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 44:
/* rule 44 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 933 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // horizontal line (dashed)
                                            addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 936 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // escaped mdash
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 939 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // escaped mdash
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 942 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // mdash
                                          addOutput(yyscanner,yyextra->insidePre || yyextra->markdownSupport ? yytext : "&mdash;");
                                        }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 945 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ndash
                                          addOutput(yyscanner,yyextra->insidePre || yyextra->markdownSupport ? yytext : "&ndash;");
                                        }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 948 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // numbered item
                                          if (yyextra->inContext!=OutputXRef)
                                          {
                                            yyextra->briefEndsAtDot=FALSE;
                                            setOutput(yyscanner,OutputDoc);
                                          }
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 956 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 959 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // . with escaped space.
                                          addOutput(yyscanner,yytext[0]);
                                          addOutput(yyscanner,yytext[2]);
                                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 963 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // . with some puntuations such as "e.g.," or "e.g.:"
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 966 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ellipsis with escaped space.
                                          addOutput(yyscanner,"... ");
                                        }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 969 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ellipsis
                                          addOutput(yyscanner,"...");
                                        }
	YY_BREAK
case 55:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 972 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // internal ellipsis
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 975 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // at least one blank line (or blank line command)
                                          if (yyextra->inContext==OutputXRef)
                                          {
                                            // see bug 613024, we need to put the newlines after ending the XRef section.
                                            if (!yyextra->insideParBlock) setOutput(yyscanner,OutputDoc);
                                            yy_size_t i;
                                            for (i=0;i<(yy_size_t)yyleng;)
                                            {
                                              if (yytext[i]=='\n') addOutput(yyscanner,'\n'),i++;
                                              else if (strcmp(yytext+i,"\\ilinebr")==0) addOutput(yyscanner,"\\ilinebr"),i+=8;
                                              else i++;
                                            }
                                          }
                                          else if (yyextra->inContext!=OutputBrief)
                                          {
                                            yy_size_t i;
                                            for (i=0;i<(yy_size_t)yyleng;)
                                            {
                                              if (yytext[i]=='\n') addOutput(yyscanner,'\n'),i++;
                                              else if (strcmp(yytext+i,"\\ilinebr")==0) addOutput(yyscanner,"\\ilinebr"),i+=8;
                                              else i++;
                                            }
                                            setOutput(yyscanner,OutputDoc);
                                          }
                                          else // yyextra->inContext==OutputBrief
                                          { // only go to the detailed description if we have
                                            // found some brief description and not just whitespace
                                            endBrief(yyscanner,TRUE);
                                          }
                                          lineCount(yyscanner);
                                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1006 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // potential end of a JavaDoc style comment
                                          addOutput(yyscanner,*yytext);
                                          if (yyextra->briefEndsAtDot)
                                          {
                                            setOutput(yyscanner,OutputDoc);
                                            yyextra->briefEndsAtDot=FALSE;
                                          }
                                        }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1014 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // newline
                                          addOutput(yyscanner,yytext);
                                          if (*yytext == '\n') yyextra->lineNr++;
                                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1018 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // catch-all for anything else
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 60:
YY_RULE_SETUP
#line 1025 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1026 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (*yytext=='\n')
                                          {
                                            addOutput(yyscanner,*yytext);
                                            yyextra->lineNr++;
                                          }
                                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1033 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore unimportant characters
                                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1035 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore every else
                                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1038 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 1041 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner,'\n');
                                          if (*yytext=='\n') yyextra->lineNr++;
                                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1045 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // the special XML characters for iwhich the CDATA section is especially used
                                          addOutput(yyscanner,'\\');
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1049 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1052 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 69:
YY_RULE_SETUP
#line 1058 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of inline formula
                                          yyextra->formulaText+="$";
                                          addOutput(yyscanner," "+addFormula(yyscanner));
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1063 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of inline formula
                                          addOutput(yyscanner," "+addFormula(yyscanner));
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1067 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of block formula
                                          yyextra->formulaText+="\\]";
                                          addOutput(yyscanner," "+addFormula(yyscanner));
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1072 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of custom env formula
                                          yyextra->formulaText+="\\end";
                                          yyextra->formulaText+=yyextra->formulaEnv;
                                          addOutput(yyscanner," "+addFormula(yyscanner));
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1078 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // any non-special character
                                          yyextra->formulaText+=yytext;
                                        }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 1081 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // new line
                                          yyextra->formulaNewLines++;
                                          yyextra->formulaText+=*yytext;
                                          yyextra->lineNr++;
                                          addIline(yyscanner,yyextra->lineNr);
                                        }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1087 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // any other character
                                          yyextra->formulaText+=*yytext;
                                        }
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1093 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // handle argument
                                          yyextra->current->name = yytext;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1097 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1101 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after \\enum."
                                              );
                                          unput_string(yytext,yyleng);
                                          //addOutput(yyscanner,'\n');
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1110 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1115 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // handle argument
                                          lineCount(yyscanner);
                                          yyextra->current->name = substitute(removeRedundantWhiteSpace(QCString(yytext)),QCString("."),QCString("::"));
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1120 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1124 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
                                               "\\namespace."
                                              );
                                          unput_string(yytext,yyleng);
                                          //addOutput(yyscanner,'\n');
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1134 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 84:
YY_RULE_SETUP
#line 1139 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // handle argument
                                          yyextra->current->name = yytext;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1143 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1147 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
                                               "\\package."
                                              );
                                          unput_string(yytext,yyleng);
                                          //addOutput(yyscanner,'\n');
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1157 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ------------ handle argument of concept command --------------- */
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1162 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // handle argument
                                          yyextra->current->name = yytext;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1166 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1170 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
                                               "\\concept."
                                              );
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1178 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1184 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          lineCount(yyscanner);
                                          yyextra->current->name = substitute(removeRedundantWhiteSpace(QCString(yytext)),".","::");
                                          BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1189 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // first argument
                                          lineCount(yyscanner);
                                          yyextra->current->name = substitute(QCString(yytext),".","::");
                                          if (yyextra->current->section==Entry::PROTOCOLDOC_SEC)
                                          {
                                            yyextra->current->name+="-p";
                                          }
                                          // prepend outer scope name
                                          BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1199 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          lineCount(yyscanner);
                                          yyextra->current->name = substitute(QCString(yytext),".","::");
                                          BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1204 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1208 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
                                               "'\\%s'.",qPrint(yyextra->currentCmd)
                                              );
                                          //addOutput(yyscanner,'\n');
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1218 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1221 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          //addOutput(yyscanner,'\n');
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1227 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // second argument; include file
                                          yyextra->current->includeFile = yytext;
                                          BEGIN( ClassDocArg3 );
                                        }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1231 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1235 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1238 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // third argument; include file name
                                          yyextra->current->includeName = yytext;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1242 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1246 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1251 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 106:
YY_RULE_SETUP
#line 1256 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // group name
                                           yyextra->current->name = yytext;
                                          //lastDefGroup.groupname = yytext;
                                          //lastDefGroup.pri = yyextra->current->groupingPri();
                                          // the .html stuff is for Qt compatibility
                                          if (yyextra->current->name.endsWith(".html"))
                                          {
                                            yyextra->current->name=yyextra->current->name.left(yyextra->current->name.length()-5);
                                          }
                                          yyextra->current->type.resize(0);
                                          BEGIN(GroupDocArg2);
                                        }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1268 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1272 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument!
                                          warn(yyextra->fileName,yyextra->lineNr,
                                               "missing group name after %s",
                                               yyextra->current->groupDocCmd()
                                              );
                                          //addOutput(yyscanner,'\n');
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1282 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1284 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1288 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // title (stored in type)
                                          yyextra->current->type += yytext;
                                          yyextra->current->type = yyextra->current->type.stripWhiteSpace();
                                        }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1292 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if ( yyextra->current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               yyextra->current->type.isEmpty()
                                             ) // defgroup requires second argument
                                          {
                                              warn(yyextra->fileName,yyextra->lineNr,
                                                 "missing title after "
                                                 "\\defgroup %s", qPrint(yyextra->current->name)
                                                );
                                          }
                                          unput_string(yytext,yyleng);
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1307 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // title (stored in type)
                                          yyextra->current->type += yytext;
                                          yyextra->current->type = yyextra->current->type.stripWhiteSpace();
                                        }
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 114:
YY_RULE_SETUP
#line 1314 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // first argument; page name
                                          yyextra->current->name = stripQuotes(yytext);
                                          yyextra->current->args = "";
                                          BEGIN( PageDocArg2 );
                                        }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1319 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1322 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                            warn(yyextra->fileName,yyextra->lineNr,
                                               "missing argument after "
                                               "\\page."
                                              );
                                          unput_string(yytext,yyleng);
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1332 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1334 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // second argument; page title
                                          unput_string(yytext,yyleng);
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1340 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          // bug 748927
                                          QCString tmp(yytext);
                                          tmp = substitute(substitute(tmp,"@<","&lt;"),"@>","&gt;");
                                          tmp = substitute(substitute(tmp,"\\<","&lt;"),"\\>","&gt;");
                                          yyextra->current->args += tmp;
                                        }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1347 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->current->args += yytext;
                                        }
	YY_BREAK
/* --------- handle arguments of the param command ------------ */
case 121:
YY_RULE_SETUP
#line 1351 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1354 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner," , ");
                                        }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1357 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner," ");
                                        }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1361 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner,yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1365 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          unput(yytext[0]);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 1372 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // no file name specified
                                          unput_string(yytext,yyleng);
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1378 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // first argument; name
                                          yyextra->current->name = stripQuotes(yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1382 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1385 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 130:
YY_RULE_SETUP
#line 1390 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // first argument
                                          yyextra->newXRefItemKey=yytext;
                                          setOutput(yyscanner,OutputXRef);
                                          BEGIN(XRefItemParam2);
                                        }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1395 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1399 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing arguments
                                          warn(yyextra->fileName,yyextra->lineNr,
                                               "Missing first argument of \\xrefitem"
                                              );
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          yyextra->inContext = OutputDoc;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1408 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1411 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // second argument
                                          yyextra->xrefItemTitle = stripQuotes(yytext);
                                          BEGIN(XRefItemParam3);
                                        }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1415 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
#line 1419 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "Missing second argument of \\xrefitem"
                                              );
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          yyextra->inContext = OutputDoc;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1428 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1431 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // third argument
                                          yyextra->xrefListTitle = stripQuotes(yytext);
                                          yyextra->xrefKind = XRef_Item;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1436 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1440 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "Missing third argument of \\xrefitem"
                                              );
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          yyextra->inContext = OutputDoc;
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1449 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 142:
YY_RULE_SETUP
#line 1455 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // argument
                                          yyextra->current->relates = yytext;
                                          //if (yyextra->current->mGrpId!=DOX_NOGROUP)
                                          //{
                                          //  memberGroupRelates = yytext;
                                          //}
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1463 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 144:
/* rule 144 can match eol */
YY_RULE_SETUP
#line 1467 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "Missing argument of '\\%s' command",qPrint(yyextra->currentCmd)
                                              );
                                          unput_string(yytext,yyleng);
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1476 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1482 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of argument
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1488 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1492 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 149:
YY_RULE_SETUP
#line 1498 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // first argument
                                          yyextra->sectionLabel=yytext;
                                          addOutput(yyscanner,yytext);
                                          yyextra->sectionTitle.resize(0);
                                          BEGIN(SectionTitle);
                                        }
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1504 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "\\section command has no label"
                                              );
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1512 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // invalid character for section label
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "Invalid or missing section label"
                                              );
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 152:
/* rule 152 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1518 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of section title
                                          addSection(yyscanner);
                                          addOutput(yyscanner,yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 153:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1523 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of section title
                                          addSection(yyscanner);
                                          addOutput(yyscanner,yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 1528 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1532 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // any character without special meaning
                                          yyextra->sectionTitle+=yytext;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1536 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // unescape escaped command
                                          yyextra->sectionTitle+=&yytext[1];
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1540 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // unescape escaped character
                                          yyextra->sectionTitle+=yytext[1];
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1544 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // anything else
                                          yyextra->sectionTitle+=yytext;
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 159:
YY_RULE_SETUP
#line 1551 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // first argument
                                          addOutput(yyscanner,yytext);
                                          // we add subpage labels as a kind of "inheritance" relation to prevent
                                          // needing to add another list to the Entry class.
                                          yyextra->current->extends.push_back(BaseInfo(QCString(yytext),Public,Normal));
                                          BEGIN(SubpageTitle);
                                        }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1558 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "\\subpage command has no label"
                                              );
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1566 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          unput(yytext[0]);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1570 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // no title, end command
                                          addOutput(yyscanner,yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1574 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // add title, end of command
                                          addOutput(yyscanner,yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1578 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // no title, end of command
                                          unput(*yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 165:
YY_RULE_SETUP
#line 1585 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // found argument
                                          addAnchor(yyscanner,QCString(yytext));
                                          addOutput(yyscanner,yytext);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 1590 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "\\anchor command has no label"
                                              );
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1598 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // invalid character for anchor label
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "Invalid or missing anchor label"
                                              );
                                          BEGIN(Comment);
                                        }
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 168:
/* rule 168 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1608 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // possible ends
                                          addOutput(yyscanner,yytext);
                                          if (&yytext[4]==yyextra->blockName) // found end of the block
                                          {
                                              BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1615 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner,yytext);
                                          if (yyextra->blockName=="startuml") // found end of the block
                                          {
                                              BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1622 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // some word
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1625 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // new line
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1629 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // start of a C-comment
                                          if (!(yyextra->blockName=="code"  || yyextra->blockName=="verbatim" ||
                                                yyextra->blockName=="icode" || yyextra->blockName=="iverbatim"||
                                                yyextra->blockName=="iliteral"
                                               )
                                             ) yyextra->commentCount++;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1637 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of a C-comment
                                          addOutput(yyscanner,yytext);
                                          if (!(yyextra->blockName=="code"  || yyextra->blockName=="verbatim" ||
                                                yyextra->blockName=="icode" || yyextra->blockName=="iverbatim"||
                                                yyextra->blockName=="iliteral"
                                               )
                                             )
                                          {
                                            yyextra->commentCount--;
                                            if (yyextra->commentCount<0)
                                            {
                                              QCString endTag = "end"+yyextra->blockName;
                                              if (yyextra->blockName=="startuml") endTag="enduml";
                                              warn(yyextra->fileName,yyextra->lineNr,
                                                 "found */ without matching /* while inside a \\%s block! Perhaps a missing \\%s?\n",qPrint(yyextra->blockName),qPrint(endTag));
                                            }
                                          }
                                        }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1655 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1658 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          QCString endTag = "end"+yyextra->blockName;
                                          if (yyextra->blockName=="startuml") endTag="enduml";
                                          warn(yyextra->fileName,yyextra->lineNr,
                                            "reached end of comment while inside a \\%s block; check for missing \\%s tag!",
                                            qPrint(yyextra->blockName),qPrint(endTag)
                                          );
                                          yyterminate();
                                        }
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 175:
YY_RULE_SETUP
#line 1670 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->guardExpr=yytext;
                                          yyextra->roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 1675 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->guardExpr+=yytext;
                                          lineCount(yyscanner);
                                        }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1679 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->guardExpr+=yytext;
                                          yyextra->roundCount++;
                                        }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 1683 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->guardExpr+=yytext;
                                          yyextra->roundCount--;
                                          if (yyextra->roundCount==0)
                                          {
                                            handleGuard(yyscanner,yyextra->guardExpr);
                                          }
                                        }
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 1691 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          warn(yyextra->fileName,yyextra->lineNr,
                                                "invalid expression '%s' for yyextra->guards",qPrint(yyextra->guardExpr));
                                          unput(*yytext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1697 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // parameter of if/ifnot yyextra->guards
                                          handleGuard(yyscanner,QCString(yytext));
                                        }
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 1700 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of argument
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          //next line is commented out due to bug620924
                                          //addOutput(yyscanner,'\n');
                                          addIlineBreak(yyscanner,yyextra->lineNr);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 1707 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1711 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 1714 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          lineCount(yyscanner);
                                          yyextra->spaceBeforeIf.resize(0);
                                          addIlineBreak(yyscanner,yyextra->lineNr);
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1720 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (!yyextra->spaceBeforeIf.isEmpty()) // needed for 665313 in combination with bug620924
                                          {
                                            addOutput(yyscanner,yyextra->spaceBeforeIf);
                                          }
                                          yyextra->spaceBeforeIf.resize(0);
                                          addIlineBreak(yyscanner,yyextra->lineNr);
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1729 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          unput(*yytext);
                                          addIlineBreak(yyscanner,yyextra->lineNr);
                                          BEGIN(Comment);
                                        }
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 187:
/* rule 187 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1737 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->guardType = Guard_IfNot;
                                          BEGIN( GuardParam );
                                        }
	YY_BREAK
case 188:
/* rule 188 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1741 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->guardType = Guard_If;
                                          BEGIN( GuardParam );
                                        }
	YY_BREAK
case 189:
/* rule 189 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1745 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (yyextra->guards.empty())
                                          {
                                            warn(yyextra->fileName,yyextra->lineNr,
                                                "found \\endif without matching start command");
                                          }
                                          else
                                          {
                                            GuardedSection s = yyextra->guards.top();
                                            yyextra->guards.pop();
                                            bool parentVisible = s.parentVisible();
                                            if (parentVisible)
                                            {
                                              yyextra->enabledSectionFound=TRUE;
                                              BEGIN( GuardParamEnd );
                                            }
                                          }
                                        }
	YY_BREAK
case 190:
/* rule 190 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1763 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (yyextra->guards.empty())
                                          {
                                            warn(yyextra->fileName,yyextra->lineNr,
                                                "found \\else without matching start command");
                                          }
                                          else
                                          {
                                            if (!yyextra->enabledSectionFound && yyextra->guards.top().parentVisible())
                                            {
                                              yyextra->guards.pop();
                                              yyextra->guards.push(GuardedSection(TRUE,TRUE));
                                              yyextra->enabledSectionFound=TRUE;
                                              BEGIN( GuardParamEnd );
                                            }
                                          }
                                        }
	YY_BREAK
case 191:
/* rule 191 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1780 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (yyextra->guards.empty())
                                          {
                                            warn(yyextra->fileName,yyextra->lineNr,
                                                "found \\elseif without matching start command");
                                          }
                                          else
                                          {
                                            if (!yyextra->enabledSectionFound && yyextra->guards.top().parentVisible())
                                            {
                                              yyextra->guardType=Guard_If;
                                              yyextra->guards.pop();
                                              BEGIN( GuardParam );
                                            }
                                          }
                                        }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 1796 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // skip line
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1800 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // skip non-special characters
                                        }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 1802 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // any other character
                                        }
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 1808 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // skip line
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 196:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1812 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->condCount++;
                                          }
	YY_BREAK
case 197:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1815 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->condCount++;
                                        }
	YY_BREAK
case 198:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1818 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->condCount--;
                                          if (yyextra->condCount<0) // handle conditional section around of \internal, see bug607743
                                          {
                                            unput('\\');
                                            BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 199:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1826 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (yyextra->sectionLevel>0)
                                          {
                                            unput('\\');
                                            BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 200:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1833 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (yyextra->sectionLevel>1)
                                          {
                                            unput('\\');
                                            BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 201:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1840 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (yyextra->sectionLevel>2)
                                          {
                                            unput('\\');
                                            BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 202:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1847 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (yyextra->sectionLevel>3)
                                          {
                                            unput('\\');
                                            BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 1854 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1857 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // skip non-special characters
                                        }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1859 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // any other character
                                        }
	YY_BREAK
/* ----- handle argument of name command ------- */
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 1865 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of argument
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 1871 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          yyextra->docGroup.appendHeader(' ');
                                        }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1876 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                          yyextra->docGroup.appendHeader(*yytext);
                                          yyextra->current->name+=*yytext;
                                        }
	YY_BREAK
/* ----- handle argument of noop command ------- */
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 1882 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of argument
                                          if (*yytext=='\n')
                                          {
                                            yyextra->lineNr++;
                                            addOutput(yyscanner,'\n');
                                          }
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1890 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ----- handle argument of raisewarning command ------- */
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
#line 1893 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of argument
                                          warn_doc_error(yyextra->fileName,yyextra->lineNr,
                                                         "%s",qPrint(yyextra->raiseWarning));
                                          yyextra->raiseWarning = "";
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 1901 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                          yyextra->raiseWarning += yytext;
                                        }
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 213:
YY_RULE_SETUP
#line 1906 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // group id
                                          yyextra->current->groups.push_back(
                                             Grouping(QCString(yytext), Grouping::GROUPING_INGROUP)
                                          );
                                          yyextra->inGroupParamFound=TRUE;
                                        }
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 1912 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          if (!yyextra->inGroupParamFound)
                                          {
                                             warn(yyextra->fileName,yyextra->lineNr,
                                                "Missing group name for \\ingroup command"
                                                );
                                          }
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 1924 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                        }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 1928 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                          addOutput(yyscanner,*yytext);
                                        }
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 1934 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of argument
                                          if (yyextra->braceCount==0)
                                          {
                                            //if (*yytext=='\n') yyextra->lineNr++;
                                            //addOutput(yyscanner,'\n');
                                            unput_string(yytext,yyleng);
                                            yyextra->langParser->parsePrototype(yyextra->functionProto);
                                            BEGIN( Comment );
                                          }
                                        }
	YY_BREAK
case 218:
/* rule 218 can match eol */
YY_RULE_SETUP
#line 1944 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          yyextra->functionProto+=' ';
                                        }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1948 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // non-special characters
                                          yyextra->functionProto+=yytext;
                                        }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1951 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->functionProto+=yytext;
                                          yyextra->braceCount++;
                                        }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1955 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->functionProto+=yytext;
                                          yyextra->braceCount--;
                                        }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1959 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // add other stuff
                                          yyextra->functionProto+=*yytext;
                                        }
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 1967 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // end of argument
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          if (yyextra->functionProto.stripWhiteSpace().isEmpty())
                                          { // plain overload command
                                            addOutput(yyscanner,getOverloadDocs());
                                            addOutput(yyscanner,'\n');
                                          }
                                          else // overload declaration
                                          {
                                            makeStructuralIndicator(yyscanner,Entry::OVERLOADDOC_SEC);
                                            yyextra->langParser->parsePrototype(yyextra->functionProto);
                                          }
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 224:
/* rule 224 can match eol */
YY_RULE_SETUP
#line 1981 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                          yyextra->functionProto+=' ';
                                        }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1985 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // add other stuff
                                          yyextra->functionProto+=*yytext;
                                        }
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 226:
YY_RULE_SETUP
#line 1991 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // found argument
                                          yyextra->current->extends.push_back(
                                            BaseInfo(removeRedundantWhiteSpace(QCString(yytext)),Public,Normal)
                                          );
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 227:
/* rule 227 can match eol */
YY_RULE_SETUP
#line 1997 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "\\inherit command has no argument"
                                              );
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          addOutput(yyscanner,'\n');
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2005 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // invalid character for anchor label
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "Invalid or missing name for \\inherit command"
                                              );
                                          BEGIN(Comment);
                                        }
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 229:
YY_RULE_SETUP
#line 2014 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // found argument
                                          yyextra->current->extends.push_back(
                                            BaseInfo(removeRedundantWhiteSpace(QCString(yytext)),Public,Normal)
                                          );
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 2020 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "'\\%s' command has no argument",qPrint(yyextra->currentCmd)
                                              );
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 2029 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // ignore other stuff
                                        }
	YY_BREAK
/* ----- handle language specific sections ------- */
case 232:
YY_RULE_SETUP
#line 2034 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ /* language switch */
                                          QCString langId(&yytext[2]);
                                          if (!langId.isEmpty() && !Config_isAvailableEnum(OUTPUT_LANGUAGE,langId))
                                          {
                                             warn(yyextra->fileName,yyextra->lineNr,
                                             "non supported language '%s' specified in '%s'",langId.data(),QCString(yytext).stripWhiteSpace().data());
                                          }
                                          else if (langId.isEmpty() ||
                                              qstricmp(Config_getEnumAsString(OUTPUT_LANGUAGE),langId)==0)
                                          { // enable language specific section
                                            BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2047 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                        }
	YY_BREAK
case 234:
/* rule 234 can match eol */
YY_RULE_SETUP
#line 2049 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ /* new line in verbatim block */
                                          if (*yytext=='\n') yyextra->lineNr++;
                                        }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 2052 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ /* any other character */
                                        }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 236:
YY_RULE_SETUP
#line 2057 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // found argument
                                          addCite(yyscanner);
                                          addOutput(yyscanner,yytext);
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 2062 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // missing argument
                                          warn(yyextra->fileName,yyextra->lineNr,
                                              "\\cite command has no label"
                                              );
                                          //if (*yytext=='\n') yyextra->lineNr++;
                                          //addOutput(yyscanner,'\n');
                                          unput_string(yytext,yyleng);
                                          BEGIN( Comment );
                                        }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 2071 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // invalid character for cite label
                                           warn(yyextra->fileName,yyextra->lineNr,
                                              "Invalid or missing cite label"
                                              );
                                          BEGIN(Comment);
                                        }
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2080 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          setOutput(yyscanner,OutputDoc);
                                          addOutput(yyscanner," \\ilinebr\\ilinebr\\copydetails ");
                                          addOutput(yyscanner,yyextra->copyDocArg);
                                          addOutput(yyscanner,"\n");
                                          BEGIN(Comment);
                                        }
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 2087 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          if (*yytext=='\n') yyextra->lineNr++;
                                          if (yyextra->braceCount==0)
                                          {
                                            setOutput(yyscanner,OutputDoc);
                                            addOutput(yyscanner," \\ilinebr\\ilinebr\\copydetails ");
                                            addOutput(yyscanner,yyextra->copyDocArg);
                                            addOutput(yyscanner,"\n");
                                            BEGIN(Comment);
                                          }
                                        }
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 2098 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // line continuation
                                          yyextra->lineNr++;
                                        }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 2101 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{ // non-special characters
                                          yyextra->copyDocArg+=yytext;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 2105 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->copyDocArg+=yytext;
                                          addOutput(yyscanner,yytext);
                                          yyextra->braceCount++;
                                        }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2110 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->copyDocArg+=yytext;
                                          addOutput(yyscanner,yytext);
                                          yyextra->braceCount--;
                                        }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 2115 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
{
                                          yyextra->copyDocArg+=yytext;
                                          addOutput(yyscanner,yytext);
                                        }
	YY_BREAK
/*
<*>.  { fprintf(stderr,"Lex scanner %s %sdefault rule for state %s: #%s#\n", __FILE__,!yyextra->fileName.isEmpty() ? ("(" + yyextra->fileName +") ").data(): "",stateToString(YY_START),yytext);}
<*>\n  { fprintf(stderr,"Lex scanner %s %sdefault rule newline for state %s.\n", __FILE__, !yyextra->fileName.isEmpty() ? ("(" + yyextra->fileName +") ").data(): "",stateToString(YY_START));}
 */
case 245:
YY_RULE_SETUP
#line 2125 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"
ECHO;
	YY_BREAK
#line 7441 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan_intermediate.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(ParamArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(ConceptDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaRound):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(HtmlA):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
			case YY_STATE_EOF(CdataSection):
			case YY_STATE_EOF(Noop):
			case YY_STATE_EOF(RaiseWarning):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( commentscanYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1333 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1333 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1332);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	commentscanYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void commentscanYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf ,yyscanner );

	commentscanYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	commentscanYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack(yyscanner);

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void commentscanYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentscanYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return commentscanYY_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) commentscanYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE commentscanYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int commentscanYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int commentscanYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *commentscanYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *commentscanYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int commentscanYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *commentscanYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void commentscanYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void commentscanYYset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "commentscanYYset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void commentscanYYset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "commentscanYYset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void commentscanYYset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int commentscanYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void commentscanYYset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* commentscanYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int commentscanYYlex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) commentscanYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* commentscanYYlex_init_extra has the same functionality as commentscanYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to commentscanYYalloc in
 * the yyextra field.
 */
int commentscanYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    commentscanYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) commentscanYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    commentscanYYset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	commentscanYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        commentscanYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    commentscanYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    commentscanYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void commentscanYYfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2125 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentscan.l"


//----------------------------------------------------------------------------

static bool handleBrief(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  //printf("handleBrief\n");
  setOutput(yyscanner,OutputBrief);
  return FALSE;
}

static bool handleFn(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::MEMBERDOC_SEC);
  yyextra->functionProto.resize(0);
  yyextra->braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::DEFINEDOC_SEC);
  yyextra->functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::GROUPDOC_SEC);
  yyextra->current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::GROUPDOC_SEC);
  yyextra->current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::GROUPDOC_SEC);
  yyextra->current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::CLASSDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleConcept(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::CONCEPTDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( ConceptDocArg1 );
  return stop;
}

static bool handleHeaderFile(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{ // Obj-C protocol
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::PROTOCOLDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleCategory(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{ // Obj-C category
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::CATEGORYDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( CategoryDocArg1 );
  return stop;
}

static bool handleUnion(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::UNIONDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleStruct(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::STRUCTDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleInterface(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::INTERFACEDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handleIdlException(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::EXCEPTIONDOC_SEC);
  yyextra->currentCmd = cmd;
  BEGIN( ClassDocArg1 );
  return stop;
}

static bool handlePage(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::MAINPAGEDOC_SEC);
  if (!stop)
  {
    yyextra->current->name = "mainpage";
  }
  setOutput(yyscanner,OutputDoc);
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::FILEDOC_SEC);
  if (!stop)
  {
    yyextra->current->name = yyextra->fileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleParam(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  // we need process param and retval arguments to escape leading underscores in case of
  // markdown processing, see bug775493
  addOutput(yyscanner,"@param ");
  BEGIN( ParamArg1 );
  return FALSE;
}

static bool handleRetval(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@retval ");
  BEGIN( ParamArg1 );
  return FALSE;
}

static bool handleDir(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::DIRDOC_SEC);
  if (!stop) yyextra->current->name = yyextra->fileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(yyscan_t yyscanner,const QCString &cmd, const StringVector &optList)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  Entry::Sections section=Entry::EXAMPLE_SEC;
  for (const auto &opt : optList)
  {
    if (opt=="lineno")
    {
      section=Entry::EXAMPLE_LINENO_SEC;
    }
    else
    {
      warn(yyextra->fileName,yyextra->lineNr,
          "unsupported option '%s' for command '\\%s'",opt.c_str(),qPrint(cmd));
    }
  }
  bool stop=makeStructuralIndicator(yyscanner,section);
  if (!stop) yyextra->current->name = yyextra->fileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->inContext!=OutputBrief)
  {
    addOutput(yyscanner,"\\ilinebr\\ilinebr "); // treat @details outside brief description
                                                // as a new paragraph
  }
  setOutput(yyscanner,OutputDoc);
  return FALSE;
}

static bool handleRaiseWarning(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->raiseWarning = "";
  BEGIN( RaiseWarning );
  return FALSE;
}

static bool handleNoop(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  BEGIN( Noop );
  return FALSE;
}

static bool handleName(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool stop=makeStructuralIndicator(yyscanner,Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    yyextra->docGroup.clearHeader();
    BEGIN( NameParam );
    if (!yyextra->docGroup.isEmpty()) // end of previous member group
    {
      yyextra->docGroup.close(yyextra->current,yyextra->fileName,yyextra->lineNr,TRUE,true);
    }
  }
  return stop;
}

static bool handleTodo(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Todo;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Test;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Bug;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Deprecated;
  setOutput(yyscanner,OutputXRef);
  yyextra->xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->insideParBlock)
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found \\parblock command while already in a parblock!");
  }
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"@parblock ");
  yyextra->insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->insideParBlock)
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found \\endparblock command without matching \\parblock!");
  }
  addOutput(yyscanner,"@endparblock");
  setOutput(yyscanner,OutputDoc); // to end a parblock inside a xrefitem like context
  yyextra->insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->relates.isEmpty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
  }
  yyextra->current->relatesType = Simple;
  yyextra->currentCmd = cmd;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->relates.isEmpty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
  }
  yyextra->current->relatesType = Duplicate;
  yyextra->currentCmd = cmd;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->relates.isEmpty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found multiple \\relates, \\relatesalso or \\memberof commands in a comment block, using last definition");
  }
  yyextra->current->relatesType = MemberOf;
  yyextra->currentCmd = cmd;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(yyscan_t yyscanner,const QCString &s, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  setOutput(yyscanner,OutputDoc);
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       yyextra->sectionLevel=1;
  else if (s=="subsection")    yyextra->sectionLevel=2;
  else if (s=="subsubsection") yyextra->sectionLevel=3;
  else if (s=="paragraph")     yyextra->sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(yyscan_t yyscanner,const QCString &s, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->section!=Entry::EMPTY_SEC &&
      yyextra->current->section!=Entry::PAGEDOC_SEC &&
      yyextra->current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(yyscan_t yyscanner,const QCString &s, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleImage(yyscan_t yyscanner,const QCString &s, const StringVector &optList)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  for (const auto &opt : optList)
  {
    QCString locOpt(opt);
    locOpt = locOpt.stripWhiteSpace();
    if (locOpt.lower().startsWith("anchor:"))
    {
      addAnchor(yyscanner,locOpt.mid(7));
      break; // real option handling will be done later on
    }
  }
  if (optList.empty())
  {
    addOutput(yyscanner,"@"+s+" ");
  }
  else
  {
    addOutput(yyscanner,"@"+s+"{"+QCString(join(optList,","))+"} ");
  }
  BEGIN(Comment);
  return FALSE;
}

static bool handleCite(yyscan_t yyscanner,const QCString &s, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(yyscan_t yyscanner,const QCString &s, const StringVector &optList)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  if (optList.empty())
  {
    addOutput(yyscanner,"@"+s+" ");
  }
  else
  {
    addOutput(yyscanner,"@"+s+"{"+QCString(join(optList,","))+"} ");
  }
  //printf("handleFormatBlock(%s) with option(%s)\n",qPrint(s),qPrint(opt));
  yyextra->blockName=s;
  yyextra->commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  addOutput(yyscanner,"@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleFileInfo(yyscan_t yyscanner,const QCString &, const StringVector &optList)
{
  using OutputWriter = std::function<void(yyscan_t,FileInfo &)>;
  static std::unordered_map<std::string,OutputWriter> options =
  { // name,        writer
    { "name",      [](yyscan_t s,FileInfo &fi) { addOutput(s,fi.baseName());      } },
    { "extension", [](yyscan_t s,FileInfo &fi) { addOutput(s,fi.extension(true)); } },
    { "filename",  [](yyscan_t s,FileInfo &fi) { addOutput(s,fi.fileName());      } },
    { "directory", [](yyscan_t s,FileInfo &fi) { addOutput(s,fi.dirPath());       } },
    { "full",      [](yyscan_t s,FileInfo &fi) { addOutput(s,fi.absFilePath());   } },
  };

  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  bool first = true;
  FileInfo fi(yyextra->fileName.str());
  for (const auto &opt_ : optList)
  {
    QCString optStripped = QCString(opt_).stripWhiteSpace();
    std::string opt = optStripped.lower().str();
    auto it = options.find(opt);
    if (it != options.end())
    {
      if (!first)
      {
        warn(yyextra->fileName,yyextra->lineNr,"Multiple options specified with \\fileinfo, discarding '%s'", qPrint(optStripped));
      }
      else
      {
        it->second(yyscanner,fi);
      }
      first = false;
    }
    else
    {
      warn(yyextra->fileName,yyextra->lineNr,"Unknown option specified with \\fileinfo: '%s'", qPrint(optStripped));
    }
  }
  if (first) // no options specified
  {
    if (Config_getBool(FULL_PATH_NAMES))
    {
      addOutput(yyscanner,stripFromPath(yyextra->fileName));
    }
    else
    {
      addOutput(yyscanner,yyextra->fileName);
    }
  }
  addOutput(yyscanner," ");
  return FALSE;
}

static bool handleLineInfo(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,QCString().setNum(yyextra->lineNr));
  addOutput(yyscanner," ");
  return FALSE;
}

static bool handleIf(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->enabledSectionFound=FALSE;
  yyextra->guardType = Guard_If;
  yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->enabledSectionFound=FALSE;
  yyextra->guardType = Guard_IfNot;
  yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found \\else without matching start command");
  }
  else
  {
    yyextra->guardType = yyextra->enabledSectionFound ? Guard_Skip : Guard_If;
    yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found \\else without matching start command");
  }
  else
  {
    yyextra->spaceBeforeIf = yyextra->spaceBeforeCmd;
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "found \\endif without matching start command");
  }
  else
  {
    yyextra->guards.pop();
  }
  yyextra->enabledSectionFound=FALSE;
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->subGrouping = FALSE;
  return FALSE;
}

static bool handleShowInitializer(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallgraph(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callGraph = FALSE; // OFF
  return FALSE;
}

static bool handleCallergraph(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallergraph(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->callerGraph = FALSE; // OFF
  return FALSE;
}

static bool handleReferencedByRelation(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencedByRelation = TRUE; // ON
  return FALSE;
}

static bool handleHideReferencedByRelation(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencedByRelation = FALSE; // OFF
  return FALSE;
}

static bool handleReferencesRelation(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencesRelation = TRUE; // ON
  return FALSE;
}

static bool handleHideReferencesRelation(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->referencesRelation = FALSE; // OFF
  return FALSE;
}

static bool handleInternal(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!Config_getBool(INTERNAL_DOCS))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (yyextra->current->doc.stripWhiteSpace().isEmpty())
    {
      yyextra->current->doc.resize(0);
    }
    yyextra->condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput(yyscanner," \\internal ");
    yyextra->inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleStatic(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->stat = TRUE;
  return FALSE;
}

static bool handlePure(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->virt = Pure;
  return FALSE;
}

static bool handlePrivate(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = yyextra->protection = Private;
  return FALSE;
}

static bool handleProtected(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = yyextra->protection = Protected ;
  return FALSE;
}

static bool handlePublic(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->current->protection = yyextra->protection = Public;
  return FALSE;
}

static bool handleToc(yyscan_t yyscanner,const QCString &, const StringVector &optList)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->section==Entry::PAGEDOC_SEC ||
      yyextra->current->section==Entry::MAINPAGEDOC_SEC)
  {
    for (const auto &opt_ : optList)
    {
      QCString opt = QCString(opt_).stripWhiteSpace().lower();
      char dum;
      int level = 5;
      int i = opt.find(':');
      if (i>0)  // found ':' but not on position 0 what would mean just a level
      {
        if (sscanf(opt.right(opt.length() - i - 1).data(),"%d%c",&level,&dum) != 1)
        {
          warn(yyextra->fileName,yyextra->lineNr,"Unknown option:level specified with \\tableofcontents: '%s'", qPrint(QCString(opt_).stripWhiteSpace()));
          opt = "";
        }
        else
        {
          level = (level > 5 ? 5 : level);
          level = (level <= 0 ? 5 : level);
          opt = opt.left(i).stripWhiteSpace();
        }
      }
      if (!opt.isEmpty())
      {
        if (opt == "html")
        {
          yyextra->current->localToc.enableHtml(level);
        }
        else if (opt == "latex")
        {
          yyextra->current->localToc.enableLatex(level);
        }
        else if (opt == "xml")
        {
          yyextra->current->localToc.enableXml(level);
        }
        else if (opt == "docbook")
        {
          yyextra->current->localToc.enableDocbook(level);
        }
        else
        {
          warn(yyextra->fileName,yyextra->lineNr,"Unknown option specified with \\tableofcontents: '%s'", qPrint(QCString(opt_).stripWhiteSpace()));
        }
      }
    }
    if (yyextra->current->localToc.nothingEnabled())
    {
      // for backward compatibility
      yyextra->current->localToc.enableHtml(5);
      yyextra->current->localToc.enableXml(5);
    }
  }
  return FALSE;
}

static bool handleInherit(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(yyscan_t yyscanner,const QCString &cmd, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->currentCmd = cmd;
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->brief.isEmpty() && yyextra->current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(yyscanner,OutputBrief);
  }
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  setOutput(yyscanner,OutputDoc);
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(yyscan_t yyscanner,const QCString &, const StringVector &)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->current->brief.isEmpty() && yyextra->current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(yyscanner,OutputBrief);
  }
  if (!yyextra->spaceBeforeCmd.isEmpty())
  {
    addOutput(yyscanner,yyextra->spaceBeforeCmd);
    yyextra->spaceBeforeCmd.resize(0);
  }
  addOutput(yyscanner,"\\copybrief ");
  yyextra->copyDocArg.resize(0);
  yyextra->braceCount = 0;
  BEGIN(CopyDoc);
  return FALSE;
}

//-----------------------------------------------------------------------------------------

static void initParser(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->sectionLabel.resize(0);
  yyextra->sectionTitle.resize(0);
  yyextra->docGroup.clearHeader();
  yyextra->insideParBlock = FALSE;
}


static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
    case Entry::CONCEPTDOC_SEC:
      return TRUE;
    default:
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(yyscan_t yyscanner,Entry::Sections s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("yyextra->current->section=%x\n",yyextra->current->section);
  if (getDocSectionName(yyextra->current->section))
  {
    return TRUE;
  }
  else
  {
    yyextra->needNewEntry = TRUE;
    yyextra->current->section = s;
    yyextra->current->fileName = yyextra->fileName;
    yyextra->current->startLine = yyextra->lineNr;
    yyextra->current->docLine = yyextra->lineNr;
    return FALSE;
  }
}

//-----------------------------------------------------------------

static void lineCount(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  for( const char* c = yytext ; *c ; ++c )
    yyextra->lineNr += (*c == '\n') ;
}

//-----------------------------------------------------------------

static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(yyscan_t yyscanner,
                        const QCString &listName,const QCString &itemTitle,
                        const QCString &listTitle,bool append)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (listName.isEmpty()) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  std::unique_lock<std::mutex> lock(g_sectionMutex);

  RefList *refList = RefListManager::instance().add(listName,listTitle,itemTitle);
  RefItem *item = 0;
  for (auto it = yyextra->current->sli.rbegin(); it != yyextra->current->sli.rend(); ++it)
  {
    RefItem *i = *it;
    if (i && i->list()->listName()==listName)
    {
      //printf("found %s lii->type=%s\n",listName,qPrint(i->list()->listName()));
      item = i;
      break;
    }
  }
  if (item && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,item->id());
    item->setText(item->text() + " <p>" + yyextra->outputXRef);
    //printf("%s: text +=%s\n",listName,qPrint(item->text));
  }
  else // new item
  {

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    item = refList->add();
    //printf("listName=%s item id = %d new yyextra->current=%p\n",listName,item->id(),yyextra->current);
    QCString anchorLabel;
    anchorLabel.sprintf("_%s%06d",listName.data(),item->id());
    item->setText(yyextra->outputXRef);
    item->setAnchor(anchorLabel);
    yyextra->current->sli.push_back(item);
    QCString cmdString;
    cmdString.sprintf(" \\xrefitem %s %d.",qPrint(listName),item->id());
    if (yyextra->inBody)
    {
      yyextra->current->inbodyDocs += cmdString;
    }
    else
    {
      yyextra->current->doc += cmdString;
    }

    {
      SectionManager &sm = SectionManager::instance();
      const SectionInfo *si = sm.find(anchorLabel);
      if (si)
      {
        if (!si->ref().isEmpty()) // we are from a tag file
        {
          si = sm.replace(anchorLabel,listName,yyextra->lineNr,
              yyextra->sectionTitle,SectionType::Anchor,
              yyextra->sectionLevel);
          yyextra->current->anchors.push_back(si);
        }
        else if (si->lineNr() != -1)
        {
          warn(listName,yyextra->lineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",qPrint(anchorLabel),qPrint(si->fileName()),si->lineNr());
        }
        else
        {
          warn(listName,yyextra->lineNr,"multiple use of section label '%s', (first occurrence: %s)",qPrint(anchorLabel),qPrint(si->fileName()));
        }
      }
      else
      {
        si = sm.add(anchorLabel,listName,yyextra->lineNr,
            yyextra->sectionTitle,SectionType::Anchor,
            yyextra->sectionLevel);
        yyextra->current->anchors.push_back(si);
      }
    }
  }
  yyextra->outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula(yyscan_t yyscanner)
{
  std::unique_lock<std::mutex> lock(g_formulaMutex);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString formLabel;
  int id = FormulaManager::instance().addFormula(yyextra->formulaText.str());
  formLabel.sprintf("\\_form#%d",id);
  for (int i=0;i<yyextra->formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionType)level;
  return SectionType::Anchor;
}

static void addSection(yyscan_t yyscanner)
{
  std::unique_lock<std::mutex> lock(g_sectionMutex);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  SectionManager &sm = SectionManager::instance();
  const SectionInfo *si = sm.find(yyextra->sectionLabel);
  if (si)
  {
    if (!si->ref().isEmpty()) // we are from a tag file
    {
      // create a new section element
      yyextra->sectionTitle+=yytext;
      yyextra->sectionTitle=yyextra->sectionTitle.stripWhiteSpace();
      si = sm.replace(yyextra->sectionLabel,yyextra->fileName,yyextra->lineNr,
                      yyextra->sectionTitle,sectionLevelToType(yyextra->sectionLevel),
                      yyextra->sectionLevel);

      // add section to this entry
      yyextra->current->anchors.push_back(si);
    }
    else if (si->lineNr() != -1)
    {
      warn(yyextra->fileName,yyextra->lineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",qPrint(yyextra->sectionLabel),qPrint(si->fileName()),si->lineNr());
    }
    else
    {
      warn(yyextra->fileName,yyextra->lineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s)",qPrint(yyextra->sectionLabel),qPrint(si->fileName()));
    }
  }
  else
  {
    // create a new section element
    yyextra->sectionTitle+=yytext;
    yyextra->sectionTitle=yyextra->sectionTitle.stripWhiteSpace();
    si = sm.add(yyextra->sectionLabel,yyextra->fileName,yyextra->lineNr,
                yyextra->sectionTitle,sectionLevelToType(yyextra->sectionLevel),
                yyextra->sectionLevel);

    // add section to this entry
    yyextra->current->anchors.push_back(si);
  }
}

//-----------------------------------------------------------------------------

static void addCite(yyscan_t yyscanner)
{
  std::unique_lock<std::mutex> lock(g_citeMutex);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString name(yytext);
  if (yytext[0] =='"')
  {
    name=yytext+1;
    name=name.left((int)yyleng-2);
  }
  CitationManager::instance().insert(name);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0)
  {
    c = s.at(i);
    if (c==' ' || c=='\t' || c=='\r') // normal whitespace
    {
      i--;
    }
    else if (c=='r' && i>=7 && qstrncmp("\\ilinebr",s.data()+i-7,8)==0) // special line break marker
    {
      i-=8;
    }
    else // non-whitespace
    {
      break;
    }
  }
  //printf("stripTrailingWhitespace(%s) i=%d len=%d\n",qPrint(s),i,len);
  if (i!=(int)len-1)
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(yyscan_t yyscanner,OutputContext ctx)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool xrefAppendToPrev = yyextra->xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  yyextra->xrefAppendFlag = !yyextra->inBody &&
                   yyextra->inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   yyextra->newXRefKind==yyextra->xrefKind &&                    // of the same kind
                   (yyextra->xrefKind!=XRef_Item ||
                    yyextra->newXRefItemKey==yyextra->xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 yyextra->inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 yyextra->newXRefKind==yyextra->xrefKind,
  //                 yyextra->xrefKind!=XRef_Item,
  //                 yyextra->newXRefItemKey==yyextra->xrefItemKey);
  //printf("refKind=%d yyextra->newXRefKind=%d xrefAppendToPrev=%d yyextra->xrefAppendFlag=%d\n",
  //             yyextra->xrefKind,yyextra->newXRefKind,xrefAppendToPrev,yyextra->xrefAppendFlag);

  //printf("setOutput(yyscanner,yyextra->inContext=%d ctx=%d)\n",yyextra->inContext,ctx);
  if (yyextra->inContext==OutputXRef) // end of XRef section => add the item
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(yyextra->xrefKind)
    {
      case XRef_Todo:
        addXRefItem(yyscanner,QCString("todo"),
            theTranslator->trTodo(),
            theTranslator->trTodoList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Test:
        addXRefItem(yyscanner,QCString("test"),
            theTranslator->trTest(),
            theTranslator->trTestList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Bug:
        addXRefItem(yyscanner,QCString("bug"),
            theTranslator->trBug(),
            theTranslator->trBugList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Deprecated:
        addXRefItem(yyscanner,QCString("deprecated"),
            theTranslator->trDeprecated(),
            theTranslator->trDeprecatedList(),
            xrefAppendToPrev
            );
        break;
      case XRef_Item:  // user defined list
        addXRefItem(yyscanner,yyextra->xrefItemKey,
            yyextra->xrefItemTitle,
            yyextra->xrefListTitle,
            xrefAppendToPrev
            );
        break;
      case XRef_None:
        ASSERT(0);
        break;
    }
  }
  yyextra->xrefItemKey = yyextra->newXRefItemKey;

  int oldContext = yyextra->inContext;
  yyextra->inContext = ctx;
  if (yyextra->inContext!=OutputXRef && yyextra->inBody) yyextra->inContext=OutputInbody;
  switch(yyextra->inContext)
  {
    case OutputDoc:
      if (oldContext!=yyextra->inContext)
      {
        stripTrailingWhiteSpace(yyextra->current->doc);
        if (yyextra->current->doc.isEmpty()) yyextra->current->docLine = yyextra->lineNr;
        if (yyextra->current->docFile.isEmpty())
        {
          yyextra->current->docFile = yyextra->fileName;
          yyextra->current->docLine = yyextra->lineNr;
        }
      }
      yyextra->pOutputString = &yyextra->current->doc;
      break;
    case OutputBrief:
      if (oldContext!=yyextra->inContext)
      {
        if (yyextra->current->brief.isEmpty()) yyextra->current->briefLine = yyextra->lineNr;
        if (yyextra->current->briefFile.isEmpty())
        {
          yyextra->current->briefFile = yyextra->fileName;
          yyextra->current->briefLine = yyextra->lineNr;
        }
      }
      if (yyextra->current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
        // description even if multiple
        // are given...
      {
        yyextra->pOutputString = &yyextra->current->brief;
      }
      else
      {
        if (!yyextra->current->doc.isEmpty()) // when appending parts add a new line
        {
          yyextra->current->doc += "\n";
        }
        yyextra->pOutputString = &yyextra->current->doc;
        yyextra->inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      yyextra->pOutputString = &yyextra->outputXRef;
      // first item found, so can't append to previous
      //yyextra->xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      yyextra->pOutputString = &yyextra->current->inbodyDocs;
      break;
  }
}


static void addAnchor(yyscan_t yyscanner,const QCString &anchor)
{
  std::unique_lock<std::mutex> lock(g_sectionMutex);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  SectionManager &sm = SectionManager::instance();
  const SectionInfo *si = sm.find(anchor);
  if (si)
  {
    if (!si->ref().isEmpty()) // we are from a tag file
    {
      si = sm.replace(anchor,yyextra->fileName,yyextra->lineNr,QCString(),SectionType::Anchor,0);
      yyextra->current->anchors.push_back(si);
    }
    else if (si->lineNr() != -1)
    {
      warn(yyextra->fileName,yyextra->lineNr,
          "multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)",
          qPrint(anchor),qPrint(si->fileName()),si->lineNr());
    }
    else
    {
      warn(yyextra->fileName,yyextra->lineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s)",
          qPrint(anchor),qPrint(si->fileName()));
    }
  }
  else
  {
    si = sm.add(anchor,yyextra->fileName,yyextra->lineNr,QCString(),SectionType::Anchor,0);
    yyextra->current->anchors.push_back(si);
  }
}

// add a string to the output
static inline void addOutput(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("addOutput(yyscanner,%s)\n",s);
  *yyextra->pOutputString+=s;
}

// add a string to the output
static inline void addOutput(yyscan_t yyscanner,const QCString &s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("addOutput(yyscanner,%s)\n",s);
  *yyextra->pOutputString+=s;
}

// add a character to the output
static inline void addOutput(yyscan_t yyscanner,char c)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  *yyextra->pOutputString+=c;
}

static void addIline(yyscan_t yyscanner,int lineNr)
{
  char cmd[20];
  sprintf(cmd,"\\iline %d ",lineNr);
  addOutput(yyscanner, cmd);
}

static void addIlineBreak(yyscan_t yyscanner,int lineNr)
{
  char cmd[30];
  sprintf(cmd,"\\iline %d \\ilinebr ",lineNr);
  addOutput(yyscanner, cmd);
}

static void endBrief(yyscan_t yyscanner,bool addToOutput)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    yyextra->briefEndsAtDot=FALSE;
    setOutput(yyscanner,OutputDoc);
    addIline(yyscanner,yyextra->lineNr);
    if (addToOutput) addOutput(yyscanner,yytext);
  }
  else
  {
    int saveLineNr = yyextra->lineNr;
    lineCount(yyscanner);
    yyextra->current->briefLine = yyextra->lineNr;
    yyextra->lineNr = saveLineNr;
  }
}

static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->prevPosition=yyextra->inputPosition;
  yy_size_t c=0;
  while( c < max_size && yyextra->inputString[yyextra->inputPosition] )
  {
    *buf = yyextra->inputString[yyextra->inputPosition++] ;
    //printf("%d (%c)\n",*buf,*buf);
    c++; buf++;
  }
  return c;
}

//----------------------------------------------------------------------------

static void checkFormula(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaRound || YY_START==ReadFormulaLong)
  {
    warn(yyextra->fileName,yyextra->lineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

struct CommentScanner::Private
{
  yyscan_t yyscanner;
  commentscanYY_state extra;
};

CommentScanner::CommentScanner() : p(std::make_unique<Private>())
{
  commentscanYYlex_init_extra(&p->extra,&p->yyscanner);
#ifdef FLEX_DEBUG
  commentscanYYset_debug(1,p->yyscanner);
#endif
}

CommentScanner::~CommentScanner()
{
  commentscanYYlex_destroy(p->yyscanner);
}

bool CommentScanner::parseCommentBlock(/* in */     OutlineParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
                       /* in */     const QCString &fileName,
                       /* in,out */ int  &lineNr,
                       /* in */     bool isBrief,
                       /* in */     bool isAutoBriefOn,
                       /* in */     bool isInbody,
                       /* in,out */ Protection &prot,
                       /* in,out */ int &position,
                       /* out */    bool &newEntryNeeded,
                       /* in */     bool markdownSupport
                      )
{
  yyscan_t yyscanner = p->yyscanner;
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser(yyscanner);
  yyextra->guards = std::stack<GuardedSection>();
  yyextra->langParser     = parser;
  yyextra->current        = curEntry;
  yyextra->current->docLine = (lineNr > 1 ? lineNr : 1);
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  yyextra->inputString    = comment;
  yyextra->inputString.append(" ");
  yyextra->inputPosition  = position;
  yyextra->lineNr         = lineNr;
  yyextra->fileName       = fileName;
  yyextra->protection     = prot;
  yyextra->needNewEntry   = FALSE;
  yyextra->xrefKind       = XRef_None;
  yyextra->xrefAppendFlag = FALSE;
  yyextra->insidePre      = FALSE;
  yyextra->parseMore      = FALSE;
  yyextra->inBody         = isInbody;
  yyextra->markdownSupport= markdownSupport;
  yyextra->outputXRef.resize(0);
  if (!isBrief && !isAutoBriefOn && !yyextra->current->doc.isEmpty())
  { // add newline separator between detailed comment blocks
    yyextra->current->doc += '\n';
  }
  setOutput(yyscanner, isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  yyextra->briefEndsAtDot = isAutoBriefOn;
  yyextra->condCount    = 0;
  yyextra->sectionLevel = 0;
  yyextra->spaceBeforeCmd.resize(0);
  yyextra->spaceBeforeIf.resize(0);

  printlex(yy_flex_debug, TRUE, __FILE__, !fileName.isEmpty() ? qPrint(fileName): NULL);
  if (!yyextra->current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    yyextra->current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",qPrint(fileName),lineNr,qPrint(yyextra->inputString)
              );

  commentscanYYrestart( 0, yyscanner );
  BEGIN( Comment );
  commentscanYYlex(yyscanner);
  setOutput(yyscanner, OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(yyscanner,getOverloadDocs());
  }

  if (!yyextra->guards.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (yyextra->insideParBlock)
  {
    warn(yyextra->fileName,yyextra->lineNr,
        "Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  yyextra->current->doc=stripLeadingAndTrailingEmptyLines(yyextra->current->doc,yyextra->current->docLine);

  if (yyextra->current->section==Entry::FILEDOC_SEC && yyextra->current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    yyextra->current->doc="\n\n";
  }

  if (yyextra->current->section==Entry::MEMBERGRP_SEC &&
      yyextra->docGroup.isEmpty()) // @name section but no group started yet
  {
    yyextra->docGroup.open(yyextra->current,yyextra->fileName,yyextra->lineNr,true);
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\noutput=[\n"
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n]\n===========\n",
               qPrint(fileName),lineNr,
               yyextra->current->briefLine,qPrint(yyextra->current->brief),
               yyextra->current->docLine,qPrint(yyextra->current->doc),
               yyextra->current->inbodyLine,qPrint(yyextra->current->inbodyDocs)
              );

  checkFormula(yyscanner);
  prot = yyextra->protection;

  yyextra->docGroup.addDocs(curEntry);

  newEntryNeeded = yyextra->needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (yyextra->parseMore && position==yyextra->inputPosition) yyextra->parseMore=FALSE;

  if (yyextra->parseMore) position=yyextra->inputPosition; else position=0;

  lineNr = yyextra->lineNr;
  //printf("position=%d yyextra->parseMore=%d newEntryNeeded=%d\n",
  //  position,yyextra->parseMore,newEntryNeeded);

  printlex(yy_flex_debug, FALSE, __FILE__, !fileName.isEmpty() ? qPrint(fileName): NULL);
  return yyextra->parseMore;
}

static void handleGuard(yyscan_t yyscanner,const QCString &expr)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  CondParser prs;
  bool sectionEnabled=prs.parse(yyextra->fileName,yyextra->lineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!yyextra->guards.empty()) parentEnabled = yyextra->guards.top().isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && yyextra->guardType==Guard_If) ||
        (!sectionEnabled && yyextra->guardType==Guard_IfNot)
       ) // section is visible
    {
      yyextra->guards.push(GuardedSection(TRUE,TRUE));
      yyextra->enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (yyextra->guardType!=Guard_Skip)
      {
        yyextra->guards.push(GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    yyextra->guards.push(GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}

void CommentScanner::initGroupInfo(Entry *entry)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.initGroupInfo(entry);
}

void CommentScanner::enterFile(const QCString &fileName,int lineNr)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.enterFile(fileName,lineNr);
}

void CommentScanner::leaveFile(const QCString &fileName,int lineNr)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.leaveFile(fileName,lineNr);
}

void CommentScanner::enterCompound(const QCString &fileName,int lineNr,const QCString &name)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.enterCompound(fileName,lineNr,name);
}

void CommentScanner::leaveCompound(const QCString &fileName,int lineNr,const QCString &name)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.leaveCompound(fileName,lineNr,name);
}

void CommentScanner::open(Entry *e,const QCString &fileName,int lineNr,bool implicit)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.open(e,fileName,lineNr,implicit);
}

void CommentScanner::close(Entry *e,const QCString &fileName,int lineNr,bool foundInline,bool implicit)
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->docGroup.close(e,fileName,lineNr,foundInline,implicit);
}

#if USE_STATE2STRING
#include "commentscan.l.h"
#endif

