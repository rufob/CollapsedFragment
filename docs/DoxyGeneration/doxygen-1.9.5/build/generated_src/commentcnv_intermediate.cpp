#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer commentcnvYY_create_buffer

    #define yy_delete_buffer commentcnvYY_delete_buffer

    #define yy_scan_buffer commentcnvYY_scan_buffer

    #define yy_scan_string commentcnvYY_scan_string

    #define yy_scan_bytes commentcnvYY_scan_bytes

    #define yy_init_buffer commentcnvYY_init_buffer

    #define yy_flush_buffer commentcnvYY_flush_buffer

    #define yy_load_buffer_state commentcnvYY_load_buffer_state

    #define yy_switch_to_buffer commentcnvYY_switch_to_buffer

    #define yypush_buffer_state commentcnvYYpush_buffer_state

    #define yypop_buffer_state commentcnvYYpop_buffer_state

    #define yyensure_buffer_stack commentcnvYYensure_buffer_stack

    #define yylex commentcnvYYlex

    #define yyrestart commentcnvYYrestart

    #define yylex_init commentcnvYYlex_init

    #define yylex_init_extra commentcnvYYlex_init_extra

    #define yylex_destroy commentcnvYYlex_destroy

    #define yyget_debug commentcnvYYget_debug

    #define yyset_debug commentcnvYYset_debug

    #define yyget_extra commentcnvYYget_extra

    #define yyset_extra commentcnvYYset_extra

    #define yyget_in commentcnvYYget_in

    #define yyset_in commentcnvYYset_in

    #define yyget_out commentcnvYYget_out

    #define yyset_out commentcnvYYset_out

    #define yyget_leng commentcnvYYget_leng

    #define yyget_text commentcnvYYget_text

    #define yyget_lineno commentcnvYYget_lineno

    #define yyset_lineno commentcnvYYset_lineno

        #define yyget_column commentcnvYYget_column

        #define yyset_column commentcnvYYset_column

    #define yywrap commentcnvYYwrap

    #define yyalloc commentcnvYYalloc

    #define yyrealloc commentcnvYYrealloc

    #define yyfree commentcnvYYfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentcnvYYrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentcnvYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void commentcnvYYrestart ( FILE *input_file , yyscan_t yyscanner );
void commentcnvYY_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE commentcnvYY_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void commentcnvYY_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void commentcnvYY_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void commentcnvYYpush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void commentcnvYYpop_buffer_state ( yyscan_t yyscanner );

static void commentcnvYYensure_buffer_stack ( yyscan_t yyscanner );
static void commentcnvYY_load_buffer_state ( yyscan_t yyscanner );
static void commentcnvYY_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER commentcnvYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE commentcnvYY_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE commentcnvYY_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE commentcnvYY_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *commentcnvYYalloc ( yy_size_t , yyscan_t yyscanner );
void *commentcnvYYrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void commentcnvYYfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer commentcnvYY_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentcnvYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentcnvYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[644] =
    {   0,
        2,    2,   52,   52,   52,   52,   40,   40,   40,   40,
       80,   80,  102,  100,  101,  101,    2,   33,  100,  101,
        3,   33,  100,  101,   11,  101,   33,  100,  101,    9,
       33,  100,  101,   19,   33,  100,  101,   10,   33,  100,
      101,    2,   33,  100,  101,   33,  100,  101,    2,   33,
      100,  101,   33,  100,  101,    2,   33,  100,  101,    1,
        2,   33,  100,  101,   33,  100,  101,   46,  100,  101,
       47,  101,   45,   46,  100,  101,   46,  100,  101,   50,
      100,  101,   51,  101,   49,   50,  100,  101,   50,  100,
      101,   76,  101,  100,  101,  100,  101,   52,   62,  100,

      101,   55,  101,   62,  100,  101,   62,  100,  101,   53,
       62,  100,  101,   52,   62,  100,  101,   62,  100,  101,
       62,  100,  101,   62,  100,  101,   52,   62,  100,  101,
       62,  100,  101,   52,   62,  100,  101,   62,  100,  101,
       62,  100,  101,   62,  100,  101,   62,  100,  101,   40,
       43,  100,  101,   41,  101,   43,  100,  101,   43,  100,
      101,   40,   43,  100,  101,   43,  100,  101,   43,  100,
      101,   43,  100,  101,   35,   43,  100,  101,   36,   43,
      100,  101,   43,  100,  101,   40,   43,  100,  101,   43,
      100,  101,   80,   99,  100,  101,   81,  101,   79,   99,

      100,  101,   80,   99,  100,  101,   99,  100,  101,   80,
       99,  100,  101,   99,  100,  101,   80,   99,  100,  101,
       80,   99,  100,  101,   80,   99,  100,  101,   80,   99,
      100,  101,   88,  100,  101,   85,   88,  100,  101,   87,
      101,   93,   98,  100,  101,   95,  101,   98,  100,  101,
       94,   98,  100,  101,   96,   98,  100,  101,   97,   98,
      100,  101,   93,   98,  100,  101,   93,   98,  100,  101,
        2,    7,   22,   19,    2,    8,    2,    1,    2,   18,
        1,    2,    2,    2,    2,    2,    2,    1,    1,    2,
        1,    2,    1,    2,   31,   32,   44,   48,   52,   61,

       59,   60,   53,   53,   58,   52,   57,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       52,   52,   40,   40,   40,   39,   80,   81,   78,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   85,   93,
       92,   93,   93,   93,    5,    7,    6,    8,    2,   20,
       21,    1,    1,    2,    2,    1,    2,   18,   18,   16,
    16397,    1,    1,    1,    2,    1,    2,    2,    2,    1,
        2,    1,    2,    1,    2,    1,    1,    1,    1,    2,
       68,   54,   57,   82,   89,   90,   89,   89,   89,   29,
       29,   90,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   52,   27,   27,   34,   42,   37,   37,   39,   77,
       80,   80,   27,   80,   27,   80,   93,16475,    4,   20,
        1,    1,    2,    1,    2,   17,   16,   16,16397,    1,
        1,    1,    2,    1,    1,    2,    2,    1,    2,    1,
        2,    1,    2,    1,    2,    1,    2,    1,   71,16454,
    16453,16458,16449,   63,   56,   82,   82,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       52,   27,   27,   37,   37,   80,   80,   27,   80,   27,
       80, 8283,   93, 8283,    1,    1,    1,    2,   16,    1,
        2,    2,    1,    1,    2,    1,    2,16457,16457,16456,

    16457,16459,16451,16451,   64,16451,16451, 8262, 8261, 8266,
     8257,   89,   89,   28,   28,   89,   28,   90,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   52,   80,   80,
        1,    2,    1,    2,    1,    1,    2,    1,    1,    1,
        2,    1,    2, 8265, 8264, 8267, 8259,   23,   83,   83,
       83,   86,   83,   89,   83,   90,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   52,   80,   80,    1,
        1,    1,    2,    1,    2,    1,    1,    1,    1,    2,
        1,    2,    1,    1,   66, 8265,   66, 8259,   86,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   52,

       25,   38,   80,   80,   12,   12,   12,    1,    1,   66,
     8264,   24,   89,   89,   89,   89,   89,   89,   89,   89,
       80,   15, 8205, 8205, 8205,   15,   89,   84,   84,   89,
       84,   90,   89,   30,   30,   89,   30,   90,   89,   26,
       89,   14,   16
    } ;

static const flex_int16_t yy_accept[650] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   13,   13,   13,   13,   14,   16,   17,   21,   25,
       27,   30,   34,   38,   42,   46,   49,   53,   56,   60,
       65,   68,   71,   73,   77,   80,   83,   85,   89,   92,
       94,   96,   98,  102,  104,  107,  110,  114,  118,  121,
      124,  127,  131,  134,  138,  141,  144,  147,  150,  154,
      156,  159,  162,  166,  169,  172,  175,  179,  183,  186,
      190,  193,  197,  199,  203,  207,  210,  214,  217,  221,
      225,  229,  233,  236,  240,  242,  246,  248,  251,  255,

      259,  263,  267,  271,  272,  272,  273,  274,  274,  275,
      276,  276,  277,  277,  278,  278,  280,  281,  281,  281,
      283,  284,  285,  286,  287,  288,  289,  291,  293,  295,
      296,  297,  298,  299,  299,  299,  299,  299,  299,  300,
      301,  301,  302,  303,  303,  304,  305,  306,  307,  307,
      308,  308,  308,  308,  308,  309,  310,  311,  312,  313,
      314,  315,  316,  317,  318,  319,  320,  321,  322,  322,
      322,  323,  323,  323,  323,  323,  323,  324,  324,  324,
      325,  325,  325,  325,  325,  325,  326,  326,  327,  328,
      329,  330,  331,  331,  332,  333,  334,  335,  336,  337,

      338,  339,  340,  341,  342,  343,  344,  345,  345,  347,
      347,  347,  349,  350,  351,  352,  353,  355,  356,  358,
      359,  360,  360,  361,  361,  361,  362,  363,  363,  363,
      364,  366,  368,  369,  369,  370,  371,  372,  374,  376,
      377,  378,  379,  381,  381,  382,  382,  382,  383,  383,
      384,  384,  384,  385,  386,  387,  388,  389,  390,  391,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  403,  403,  404,  405,  405,  406,  407,  407,  408,
      409,  410,  411,  412,  413,  415,  417,  419,  420,  421,
      422,  422,  423,  424,  424,  426,  427,  427,  428,  428,

      428,  429,  430,  431,  431,  432,  434,  435,  437,  437,
      438,  439,  440,  441,  442,  444,  446,  448,  449,  450,
      450,  450,  451,  452,  453,  454,  455,  455,  455,  456,
      456,  456,  457,  458,  459,  460,  461,  462,  463,  464,
      465,  466,  467,  468,  469,  470,  471,  472,  472,  472,
      473,  474,  474,  474,  475,  476,  477,  478,  480,  482,
      484,  485,  486,  487,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  490,  491,  491,  492,  493,  493,
      494,  495,  496,  496,  498,  499,  500,  501,  502,  503,
      504,  505,  506,  506,  507,  508,  508,  509,  509,  510,

      510,  511,  511,  512,  512,  512,  512,  513,  514,  515,
      517,  519,  520,  521,  522,  523,  524,  525,  526,  527,
      528,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  530,  531,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  533,  533,
      535,  535,  536,  538,  539,  540,  542,  544,  544,  545,
      545,  545,  545,  545,  546,  546,  546,  546,  547,  547,
      548,  548,  548,  548,  549,  549,  549,  550,  551,  553,
      555,  557,  558,  559,  560,  561,  562,  563,  564,  565,
      566,  567,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  569,  570,  570,
      570,  570,  570,  570,  570,  570,  571,  572,  574,  576,
      577,  578,  579,  581,  583,  584,  585,  585,  585,  587,
      587,  589,  589,  589,  589,  590,  591,  592,  593,  594,
      595,  596,  597,  598,  599,  600,  601,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  603,  604,
      605,  606,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  609,  610,  610,  612,  613,  613,  614,  615,  616,
      617,  618,  619,  620,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  622,  623,  623,  624,  625,  626,

      627,  628,  629,  631,  633,  634,  635,  637,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  640,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  644,  644
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   16,   25,
       16,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   36,
       34,   34,   34,   34,   37,   34,   34,   38,   34,   34,
       39,   40,   41,    1,   42,   43,   44,   45,   46,   47,

       48,   49,   34,   50,   51,   34,   52,   53,   54,   55,
       56,   36,   34,   57,   58,   59,   60,   61,   34,   62,
       63,   34,   64,   65,   66,   67,    1,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    1,    8,
        9,    8,    8,   10,   11,    7,   12,   13,   14,   15,
       15,   15,   15,    1,   16,    1,   17,   18,   18,   18,
       18,   18,   18,   19,   19,   18,   19,   19,    1,   20,
        1,   21,   22,   18,   18,   18,   18,   18,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   23,    8,   24,   25,   26
    } ;

static const flex_int16_t yy_base[733] =
    {   0,
     2039, 2037,    0,   45,   29,   30,    1,   31, 2036,   24,
       91,  158,   17,   18,  162,  166,  171,  177,  244,  173,
      312,  380,  170,  345, 2038, 4344, 4344,    0, 4344, 4344,
      161, 2029, 2027, 4344,  447, 2002,   56,   35,  477,  529,
       32, 4344, 4344, 4344,    0, 4344, 4344, 4344,    0,  189,
      327, 1999,    0,  195, 4344, 2009,   41,  589,   69, 1961,
      629,  692,    8,  355,  360, 1971, 1945,   46,    0, 4344,
     4344,   41,  339, 1991, 1961, 1965, 4344, 4344, 1940,  367,
     1987, 2002, 4344, 1985,  758, 1989,  825,    0,  892,  365,
      180,  315, 4344,    0, 4344,    0, 4344, 1983, 4344, 4344,

     4344,  395, 1982,    0, 1997, 4344, 1995, 1988, 4344,  958,
     1990, 4344, 1989,  997, 1985, 1027,  156,  337,  413,  459,
      419,  448,  156,  395, 1080, 1138,    0,  160,  186, 4344,
     4344, 4344, 4344,  424, 1971,  455, 1970,  316,    0, 4344,
      454, 4344, 4344, 1981,  147,  205, 4344, 1939,    0, 4344,
      208, 1953,  290,    0, 1914,  143,  269,  299,  466,  302,
      178,  128,  432,  425,  452,  266,   20,   36,  499,  296,
      512,  516, 1934, 1909, 1931, 1906,    0, 1917,  515,  518,
     1951,    9, 1914, 1919, 1894,  527, 1941,  371, 1955, 4344,
     4344, 1906, 1934, 1198, 1903,  483,  560,  370,  371,  422,

      500,    0,    0, 4344,  539, 1927,  529, 1941, 4344, 1937,
     1939, 4344, 1264,    0, 4344, 1294, 1337,  553,    0, 4344,
     1922, 1937, 4344, 1936,  528,  535,  586,  620,  692,  706,
      724,  381,  564,  602,  767, 1927, 1371, 1420, 1478,    0,
      340,  507,    0,  691, 1912, 1928,  550, 4344, 1917, 1915,
        0,  492,  213, 1869, 4344,  565,  586,  438, 4344, 4344,
      524,  553,  585,  516,  546,  508,  469,  569,  583,  593,
     1876, 1874, 1881, 1856, 1875, 4344, 4344, 1874, 1877, 1848,
     4344, 4344, 1859,  667,  608,  667,  709, 4344,    0,    0,
      788, 4344,  730,  771,  832, 4344, 1906,  720,  745, 1905,

      793,  718,    0,  918,  902,  961,  793,  836, 1008, 1033,
     1872, 1517, 1556, 1845,    0,    0,  854, 4344,  905, 1872,
     1149, 1874, 1873, 1872, 1871, 4344,  839,    0, 4344, 1855,
      645,  738,  775,  796,  798,  550, 1619,  775,  642,  589,
      822,  751,  784,  722,  814,  816, 1687, 1825, 1812, 1827,
     1802, 1131,  908, 1825, 1800, 1753, 1820,  738,  752,  912,
        0, 1207, 1224, 1275,  909, 1847,  881, 1862,  968, 1857,
      987,  992,  924, 1300,  862,  852,    0, 1000, 1822,    0,
     1267,  926, 1004, 1482, 1854, 1031, 1037,  843, 1853, 1852,
     1192, 4344,  977, 1298,  941, 1851, 4344, 1850, 4344, 1845,

     4344, 1840, 4344, 1824,    0,  959, 1887, 1009, 4344, 1777,
     4344, 1014, 1023,  937,  532,  851,  857,  987,  968, 1008,
     1955, 1791, 1790, 1781, 1776, 1781, 1772, 1770, 1754, 1764,
     1756, 1753, 1752, 1749, 1751, 2021, 2088, 1628, 1147,  815,
     1160, 1785, 1215, 1784, 1161,  999, 1356, 1228, 1232, 1696,
     1063, 2145, 1762, 1829,    0, 1896,    0, 1799, 4344, 1304,
     1117, 1798, 1334, 4344, 1147, 1797, 1796, 4344, 1795, 4344,
     1489, 1213, 1790, 1773, 1772, 1040, 4344, 1289, 4344, 1725,
     4344, 1099, 1033, 1132,  931, 1113,  753, 1221, 1107, 1172,
     1249, 1294, 1349, 1731, 1741, 1732, 1730, 1717, 1720, 1725,

     1715, 1718, 1723, 1709, 1721, 1698, 1202, 1306,    0, 1382,
     1516,  368, 1349, 1293, 1531, 1964, 2030, 2097,    0,    0,
     1395, 2150, 2184,    0, 2189, 4344, 1747, 1745, 4344, 1741,
     4344, 1250, 1339, 1378, 4344, 1169, 1005, 1281, 1331, 1277,
     1301, 1325, 1292, 1347, 1333, 1380, 4344, 1699, 1697, 1688,
     1680, 1690, 1681, 1680, 1690, 1677, 1684, 4344, 1401, 1381,
     4344, 1555, 1664, 1652, 1659, 1436,    0, 1666, 1707, 1509,
     2223, 4344, 1721, 4344, 4344, 1696, 1349, 2276, 1363, 1466,
     1488, 2344, 1491, 1478, 1668, 1659, 1652, 1656, 1639, 1635,
     1625, 1634, 1621, 1524, 4344, 1551, 4344, 1700, 1608, 1662,

     1504, 4344, 1583, 4344, 1506, 4344, 1576, 4344, 1650, 1542,
     1542, 1539, 1517, 1460, 1444, 1436, 1375, 1517, 1603, 4344,
     1288, 1266, 1199, 1160, 1109, 1094, 1034, 1020, 1364, 1517,
      989,  928,  889,  834,  678, 1638,  675,  482, 1661,  430,
     1187,  125, 1666, 1639,   28,    6, 4344, 4344, 2412, 2438,
     2464, 2490, 2516, 2542, 2568, 2594, 2620, 2646, 2672, 2698,
     2724, 2750, 2776, 2802, 2818, 2844, 2870, 2896, 2922, 2947,
     2968, 2994, 3020, 3046, 3072, 3098, 3124, 3139, 3148, 3162,
     3185, 3211, 3237, 3255, 3274, 3300, 3315, 3340, 3361, 3387,
     3413, 3439, 3465, 3491, 3517, 3543, 3569, 3584, 3599, 3615,

     3640, 3650, 3673, 3699, 3725, 3751, 3777, 3803, 3829, 3855,
     3881, 1657, 1655, 3899, 3918, 3944, 3970, 3996, 4022, 4048,
     4074, 4100, 4115, 4130, 4146, 4172, 4198, 4213, 4239, 4265,
     4291, 4317
    } ;

static const flex_int16_t yy_def[733] =
    {   0,
      649,  649,  650,  650,  651,  651,  652,  652,  649,  649,
      648,   11,   11,   11,  653,  653,  653,  653,  648,   19,
      654,  654,  655,  655,  648,  648,  648,  656,  648,  648,
      657,  648,  648,  648,  658,  648,  656,  648,  656,  656,
      648,  648,  648,  648,  659,  648,  648,  648,  660,  648,
      648,  648,  661,  662,  648,  648,  663,  664,  648,  665,
      648,  664,  648,  661,  648,  648,  648,  648,  666,  648,
      648,  648,  666,  648,  648,  648,  648,  648,  648,  666,
      648,  667,  648,  648,  668,  648,  669,   61,  668,  667,
      667,  667,  648,  670,  648,  671,  648,  648,  648,  648,

      648,  671,  671,  656,  657,  648,  672,  648,  648,  658,
      673,  648,  674,  675,  676,  656,  648,  677,  648,  656,
      656,   39,  656,  656,  648,  648,   40,  656,  656,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  661,  648,
      662,  648,  648,  648,  663,  663,  648,   62,  678,  648,
      648,  665,  665,  679,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,   62,  648,  648,
      661,  648,  648,  648,  648,  648,  666,  648,  648,  666,
      648,  648,  648,  648,  648,  666,  648,  648,  667,  648,
      648,   89,  648,  669,  194,   89,  667,  667,  667,  667,

      667,  670,  671,  648,  671,  671,  671,  672,  648,  648,
      674,  648,  675,  681,  648,  648,  656,  656,  656,  648,
      648,  677,  648,  682,  677,  683,  648,  648,  648,  648,
      656,  656,  656,  648,  656,  684,  656,  648,  238,  126,
      648,  648,  656,  648,  685,  648,  686,  648,  678,  648,
      687,  665,  688,  680,  648,  680,  680,  680,  648,  648,
      680,  680,  680,  680,  680,  680,  680,  680,  680,   62,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  194,   89,  667,  667,  689,  648,  681,  216,
      648,  648,  656,  648,  656,  648,  682,  648,  677,  690,

      691,  683,  216,  648,  648,  656,  648,  656,  648,  656,
      684,  656,  648,  237,  238,  239,  239,  648,  692,  648,
      693,  694,  695,  696,  697,  648,  648,  698,  648,  699,
      700,  648,  701,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  703,  648,  648,  648,
      648,  648,  648,  648,  648,  704,  705,  706,  706,  707,
      708,  648,  648,  656,  648,  648,  709,  710,  648,  711,
      711,  648,  711,  648,  648,  712,  312,  656,  713,  313,
      714,  656,  648,  239,  715,  715,  716,  715,  717,  718,
      718,  648,  648,  718,  718,  719,  648,  720,  648,  721,

      648,  722,  648,  723,  724,  725,  702,  702,  648,  702,
      648,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      703,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  704,  705,  648,  648,  709,
      648,  648,  648,  648,  711,  712,  648,  656,  648,  656,
      712,  714,  656,  648,  452,  239,  239,  715,  648,  715,
      715,  716,  716,  648,  716,  726,  717,  648,  718,  648,
      718,  718,  727,  723,  728,  725,  648,  648,  648,  702,
      648,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  421,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  436,  437,  729,  729,
      648,  709,  648,  648,  711,  648,  648,  656,  656,  452,
      714,  648,  656,  656,  648,  648,  730,  726,  648,  727,
      648,  728,  725,  648,  648,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  421,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  436,  437,
      648,  648,  648,  648,  648,  709,  731,  731,  711,  711,
      648,  648,  730,  648,  648,  725,  702,  702,  702,  702,
      702,  702,  702,  702,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  436,  648,  709,  648,  648,  648,  711,

      702,  648,  702,  648,  702,  648,  702,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  709,  702,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  709,  702,
      648,  648,  648,  648,  648,  709,  648,  648,  709,  648,
      709,  648,  709,  709,  732,  732,  648,    0,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648
    } ;

static const flex_int16_t yy_nxt[4413] =
    {   0,
      648,   29,   30,   47,   29,   31,   32,   33,  647,  169,
       34,   48,  169,   35,  277,   29,   36,   37,   38,   39,
       40,   40,   40,   55,   55,   51,   50,  277,   51,   35,
      647,   43,   43,   47,  170,   44,   44,  648,  130,   41,
       49,   48,   52,   68,   68,   35,   29,   30,  117,   29,
       31,   32,   33,  118,  146,   34,   68,   68,   35,  147,
       29,   36,   37,   38,   39,   40,   40,   40,   45,   45,
       49,  131,  154,  269,   35,  116,  116,  116,  116,  148,
       55,   55,  150,  255,   41,  154,  270,  151,  178,  179,
       35,   53,   53,   54,   53,   55,   55,   56,   53,   53,

       53,   53,   53,   53,   57,   58,   53,   58,   58,   59,
       58,   58,   58,   58,   53,   60,   53,   61,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   53,
       61,   53,   58,   55,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   62,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   63,   53,   53,   55,   58,   64,
      648,  220,   65,  106,   70,  648,  107,   73,   70,  221,
       73,  263,   97,   70,   90,  232,  232,   90,   80,   70,
       71,   80,  190,   98,   74,  107,  107,  276,   72,   71,
      134,  255,   72,  134,  243,   81,  141,   75,  256,  141,

       66,   72,  142,   75,   71,   72,  255,  135,   71,   99,
       75,  143,  243,   76,  332,   91,   75,  332,  146,   76,
      128,  250,  200,  147,   67,   71,  151,   71,   71,   71,
      262,   71,   71,  100,   77,  101,   78,   79,  128,   92,
       77,  255,   78,   79,   82,   82,   83,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   84,   85,   82,
       85,   85,   86,   85,   85,   85,   85,   82,   87,   82,
       88,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   82,   88,   82,   85,   82,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   89,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   82,   82,   82,
       82,   85,   93,  268,   95,   93,  251,  190,   93,   93,
       93,  245,   93,  246,  257,   93,   93,   93,  136,  255,
       93,  136,  255,  252,  247,   93,   93,   93,   93,  223,
      180,  271,  224,  180,  225,  137,  102,   97,  272,  102,
       93,   93,   93,  258,   93,  226,  171,  181,   98,  172,
      261,  172,  255,  103,  172,  255,  197,  190,  186,  197,
      223,  186,  190,  190,  318,   93,  281,   93,   93,   93,
       93,  201,   95,   93,   99,  187,   93,   93,   93,  281,
       93,  307,  318,   93,   93,   93,  205,  173,   93,  205,

      308,  308,  173,   93,   93,   93,   93,  198,  100,  233,
      101,  234,  200,  206,  235,  235,  235,  235,   93,   93,
       93,  174,   93,  119,  190,  134,  174,  566,  134,  230,
      227,  199,  228,  228,  228,  228,  120,  201,  231,  231,
      231,  122,  135,   93,  229,   93,   93,   93,  111,  112,
      124,  111,  113,  111,  111,  141,  136,  111,  141,  136,
      229,  142,  111,  111,  285,  111,  124,  122,  122,  122,
      143,  114,  114,  137,  259,  264,  104,  259,  116,  116,
      116,  116,  642,  266,  338,  104,  111,  119,  255,  265,
      218,  219,  104,  219,  120,  255,  121,  121,  121,  122,

      169,  255,  190,  169,  259,  123,  218,  219,  124,  104,
      267,  219,  344,  171,  125,  255,  172,  172,  251,  180,
      172,  123,  180,  276,  124,  170,  192,  276,  186,  260,
      223,  186,  255,  284,  287,  299,  181,  301,  125,  126,
      205,  241,  331,  205,  276,  187,  120,  287,  127,  127,
      127,  127,  326,  302,  173,  276,  343,  206,  173,  241,
      124,  197,  190,  128,  197,  129,  286,  293,  327,  294,
      342,  255,  295,  295,  295,  295,  124,  339,  174,  255,
      276,  128,  174,  235,  235,  235,  235,  255,  129,  139,
      139,  337,  139,  486,  408,  255,  139,  139,  139,  139,

      139,  139,  198,  340,  139,  303,  303,  303,  303,  255,
      190,  334,  139,  255,  139,  149,  255,  291,  292,  335,
      292,  304,  304,  304,  304,  345,  199,  139,  255,  139,
      119,  336,  255,  291,  292,  346,  148,  227,  292,  228,
      228,  228,  228,  341,  337,  347,  255,  414,  255,  255,
      358,  229,  255,  139,  139,  154,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  229,  154,  190,
      155,  251,  155,  155,  156,  157,  158,  159,  160,  161,
      155,  162,  163,  155,  155,  164,  165,  155,  155,  166,
      167,  155,  139,  139,  413,  139,  319,  406,  320,  139,

      139,  139,  139,  139,  139,  255,  234,  139,  234,  321,
      192,  304,  304,  304,  304,  139,  230,  139,  149,  357,
      301,  365,  361,  227,  365,  305,  305,  305,  228,  640,
      139,  276,  139,  359,  230,  168,  302,  229,  366,  332,
      190,  120,  332,  306,  306,  306,  122,  223,  361,  295,
      295,  295,  295,  229,  190,  124,  139,  139,  189,  189,
      190,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  124,  361,  189,  361,  367,  332,  309,  418,  332,
      358,  189,  189,  189,  149,  255,  310,  310,  310,  310,
      362,  362,  362,  362,  371,  372,  189,  371,  189,  219,

      189,  219,  294,  307,  294,  541,  416,  362,  362,  362,
      362,  373,  375,  375,  255,  219,  255,  223,  359,  219,
      412,  189,  189,  189,  189,  189,  189,  190,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  255,  417,
      189,  326,  363,  337,  407,  459,  307,  255,  189,  189,
      189,  364,  364,  364,  364,  308,  308,  327,  419,  255,
      512,  255,  376,  189,  219,  189,  219,  189,  382,  415,
      383,  420,  307,  384,  384,  384,  384,  255,  195,  255,
      219,  375,  375,  223,  219,  255,  638,  447,  189,  189,
      189,  189,  189,  189,  190,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  487,  386,  189,  466,  386,
      365,  488,  230,  365,  255,  189,  189,  189,  149,  227,
      255,  305,  305,  305,  228,  361,  372,  366,  309,  387,
      189,  388,  189,  229,  189,  196,  440,  374,  374,  374,
      374,  276,  445,  470,  388,  453,  453,  453,  453,  229,
      292,  361,  292,  432,  433,  189,  189,  189,  189,  111,
      112,  434,  111,  111,  111,  111,  292,  435,  111,  441,
      292,  230,  441,  111,  111,  361,  111,  361,  120,  392,
      306,  306,  306,  122,  485,  251,  442,  539,  371,  372,
      276,  371,  124,  443,  255,  393,  443,  111,  211,  212,

      255,  211,  211,  211,  211,  373,  473,  211,  124,  376,
      444,  490,  211,  211,  448,  211,  449,  476,  309,  450,
      450,  450,  450,  454,  454,  454,  454,  374,  374,  374,
      374,  255,  460,  459,  447,  460,  211,  216,  463,  464,
      292,  463,  292,  309,  637,  489,  217,  217,  217,  217,
      255,  578,  310,  310,  310,  310,  292,  461,  218,  219,
      292,  219,  491,  465,  482,  219,  251,  219,  255,  483,
      461,  255,  255,  376,  218,  219,  465,  255,  484,  219,
      104,  219,  276,  104,  635,  219,  255,  537,  104,  104,
      236,  104,  104,  104,  104,  533,  255,  237,  447,  238,

      238,  238,  238,  104,  104,  104,  104,  238,  238,  238,
      238,  238,  238,  239,  239,  239,  239,  239,  104,  459,
      104,  104,  104,  238,  238,  238,  238,  238,  238,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  104,  104,  104,  104,  104,  126,  464,
      391,  392,  509,  391,  536,  227,  276,  240,  240,  240,
      240,  441,  255,  372,  441,  510,  543,  393,  540,  229,
      255,  276,  241,  394,  242,  395,  255,  424,  442,  515,
      425,  426,  466,  427,  428,  229,  538,  429,  395,  223,
      241,  430,  431,  471,  470,  255,  471,  242,  189,  189,

      190,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  511,  527,  189,  634,  470,  443,  363,  472,  443,
      577,  189,  189,  189,  251,  515,  438,  438,  438,  438,
      544,  472,  255,  444,  363,  255,  189,  643,  189,  292,
      189,  292,  633,  438,  438,  438,  438,  450,  450,  450,
      450,  516,  516,  516,  516,  292,  292,  559,  292,  292,
      194,  189,  189,  189,  189,  211,  212,  405,  211,  211,
      211,  211,  292,  542,  211,  575,  292,  236,  473,  211,
      211,  383,  211,  383,  255,  363,  452,  452,  452,  452,
      534,  535,  534,  534,  364,  364,  364,  364,  567,  471,

      470,  545,  471,  211,  216,  460,  459,  219,  460,  219,
      309,  567,  255,  290,  290,  290,  290,  546,  632,  374,
      374,  374,  374,  219,  472,  291,  292,  219,  292,  560,
      461,  581,  292,  579,  292,  463,  464,  472,  463,  631,
      255,  291,  292,  461,  255,  583,  292,  216,  292,  148,
      547,  547,  292,  547,  567,  255,  217,  217,  217,  217,
      465,  192,  576,  582,  255,  251,  223,  568,  218,  219,
      449,  219,  449,  465,  580,  516,  516,  516,  516,  534,
      535,  534,  534,  562,  218,  219,  562,  582,  255,  219,
      312,  312,  312,  312,  255,  582,  255,  584,  312,  312,

      312,  312,  312,  312,  601,  236,  648,  648,  563,  648,
      255,  648,  255,  511,  312,  312,  312,  312,  312,  312,
      104,  563,  636,  104,  594,  582,  255,  628,  104,  104,
      313,  104,  104,  104,  104,  148,  192,  314,  223,  315,
      315,  315,  315,  104,  104,  104,  104,  315,  315,  315,
      315,  315,  315,  316,  316,  317,  316,  316,  104,  194,
      104,  104,  104,  315,  315,  315,  315,  315,  315,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  104,  104,  104,  104,  104,  236,  596,
      471,  470,  455,  471,  627,  104,  626,  316,  316,  316,

      316,  456,  456,  456,  456,  316,  316,  316,  316,  316,
      316,  372,  625,  316,  457,  472,  457,  564,  582,  223,
      564,  316,  316,  316,  316,  316,  316,  376,  472,  255,
      457,  582,  569,  372,  457,  569,  377,  377,  377,  377,
      605,  255,  565,  337,  377,  377,  377,  377,  377,  377,
      648,  255,  378,  223,  255,  565,  564,  570,  619,  564,
      377,  377,  377,  377,  377,  377,  313,  255,  582,  255,
      570,  629,  624,  379,  600,  380,  380,  380,  380,  582,
      255,  565,  194,  380,  380,  380,  380,  380,  380,  311,
      311,  381,  311,  311,  565,  623,  622,  621,  618,  380,

      380,  380,  380,  380,  380,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  410,  409,  409,  363,  255,
      223,  223,  409,  409,  409,  409,  255,  438,  438,  438,
      438,  620,  620,  564,  620,  630,  564,  409,  409,  409,
      292,  409,  292,  223,  372,  446,  255,  598,  223,  451,
      598,  446,  451,  595,  446,  617,  292,  616,  565,  615,
      292,  639,  411,  409,  409,  409,  409,  139,  139,  614,
      139,  565,  599,  645,  139,  139,  139,  139,  139,  139,

      613,  564,  139,  612,  564,  599,  517,  611,  569,  372,
      139,  569,  139,  149,  610,  518,  518,  518,  518,  641,
      609,  644,  648,  574,  595,  139,  565,  139,  519,  595,
      519,  558,  593,  570,  592,  591,  590,  589,  588,  565,
      587,  586,  585,  531,  519,  421,  570,  529,  519,  574,
      558,  139,  139,  189,  189,  190,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  558,  558,  189,  557,
      556,  555,  522,  554,  553,  552,  189,  189,  189,  251,
      551,  523,  523,  523,  523,  550,  549,  548,  255,  405,
      328,  189,  531,  189,  524,  189,  524,  470,  468,  529,

      464,  459,  514,  513,  506,  436,  505,  504,  503,  502,
      524,  501,  500,  499,  524,  498,  189,  189,  189,  189,
      189,  189,  190,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  497,  496,  189,  495,  494,  493,  522,
      255,  328,  403,  189,  189,  189,  149,  401,  525,  525,
      525,  525,  399,  397,  470,  468,  459,  447,  189,  372,
      189,  526,  189,  526,  369,  439,  355,  354,  351,  350,
      423,  422,  405,  403,  401,  399,  397,  526,  437,  389,
      378,  526,  236,  189,  189,  189,  189,  477,  478,  479,
      478,  478,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  480,  477,  477,  455,  369,  298,  356,
      477,  477,  477,  477,  355,  456,  456,  456,  456,  354,
      353,  352,  351,  350,  349,  477,  477,  477,  457,  477,
      457,  348,  255,  329,  328,  324,  323,  236,  298,  223,
      296,  212,  288,  209,  457,  207,  283,  282,  457,  192,
      481,  477,  477,  477,  477,  139,  139,  190,  139,  188,
      280,  279,  139,  139,  139,  139,  139,  139,  278,  182,
      139,  275,  274,  273,  517,  176,  175,  255,  139,  251,
      139,  149,  148,  571,  571,  571,  571,  248,  138,  244,
      215,  212,  112,  139,  210,  139,  572,  209,  572,  106,

      207,  204,  193,  191,  190,  188,  185,  184,  183,  182,
      492,  176,  572,  175,  153,  144,  572,  138,  115,  139,
      139,  189,  189,  190,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  109,  108,  189,  648,   50,   27,
      517,   27,  648,  648,  189,  189,  189,  251,  648,  571,
      571,  571,  571,  648,  648,  648,  648,  648,  648,  189,
      648,  189,  572,  189,  572,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  572,  507,
      648,  648,  572,  648,  189,  189,  189,  189,  189,  189,
      190,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  648,  648,  189,  648,  648,  648,  517,  648,  648,
      648,  189,  189,  189,  149,  648,  518,  518,  518,  518,
      648,  648,  648,  648,  648,  648,  189,  648,  189,  519,
      189,  519,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  508,  648,  519,  648,  648,  648,  519,
      648,  189,  189,  189,  189,  455,  648,  648,  648,  648,
      522,  648,  648,  648,  520,  520,  520,  520,  648,  525,
      525,  525,  525,  648,  648,  648,  648,  521,  648,  521,
      648,  648,  526,  648,  526,  648,  648,  648,  648,  648,
      648,  648,  648,  521,  522,  648,  648,  521,  526,  522,

      648,  648,  526,  523,  523,  523,  523,  648,  525,  525,
      525,  525,  648,  648,  648,  648,  524,  648,  524,  648,
      648,  526,  648,  526,  648,  648,  648,  648,  648,  648,
      648,  648,  524,  517,  648,  648,  524,  526,  648,  648,
      648,  526,  571,  571,  571,  571,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  572,  648,  572,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  572,  648,  648,  648,  572,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  603,  602,  602,  648,  648,  648,  648,  602,

      602,  602,  602,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  602,  602,  602,  648,  602,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  604,
      602,  602,  602,  602,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      607,  606,  606,  648,  648,  648,  648,  606,  606,  606,
      606,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  606,  606,  606,  648,  606,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  608,  606,  606,
      606,  606,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  104,  648,  648,  648,  648,  648,

      648,  104,  648,  104,  104,  648,  104,  648,  104,  104,
      104,  104,  104,  648,  104,  104,  104,  104,  104,  104,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  132,  132,  648,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  133,  133,

      648,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  139,  139,  648,  648,  648,  648,
      139,  139,  139,  648,  139,  139,  139,  648,  139,  648,
      648,  139,  139,  648,  139,  648,  648,  139,  648,  139,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  145,  145,  648,  145,
      145,  648,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  648,  145,  145,  648,  145,  145,  648,  145,

      145,  145,  148,  148,  648,  648,  648,  648,  148,  148,
      148,  648,  148,  148,  148,  648,  148,  648,  148,  148,
      148,  648,  148,  648,  648,  148,  648,  148,  152,  152,
      152,  648,  152,  648,  648,  152,  152,  648,  152,  648,
      648,  648,  648,  152,  177,  177,  648,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  648,  177,  177,
      648,  177,  177,  648,  177,  648,  648,  648,  648,  177,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  648,
      189,  189,  189,  648,  189,  189,  648,  189,  189,  648,
      189,  189,  189,  189,  189,  189,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  648,  192,  192,  192,  648,
      192,  192,  192,  192,  192,  648,  192,  192,  192,  192,
      192,  192,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  648,  194,  194,  194,  648,  194,  194,  648,  194,
      194,  648,  194,  194,  194,  194,  194,  194,  202,  648,
      202,  202,  648,  648,  202,  648,  648,  648,  202,  202,
      648,  202,  648,  648,  202,  202,  648,  202,  203,  203,
      648,  203,  203,  203,  203,  203,  203,  648,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  648,  203,  203,
      648,  648,  203,  203,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  214,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      249,  648,  648,  249,  648,  648,  249,  249,  648,  249,
      648,  648,  648,  648,  249,  253,  253,  648,  253,  648,
      648,  648,  253,  254,  648,  648,  254,  648,  648,  254,
      254,  648,  254,  648,  254,  289,  289,  648,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  311,  648,  648,  648,  648,  648,  311,
      648,  648,  311,  311,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  330,  648,  648,  330,
      648,  648,  330,  330,  648,  330,  648,  648,  648,  648,
      330,  333,  648,  333,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  333,  648,  648,  333,  333,  648,
      333,  360,  360,  648,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  385,
      385,  648,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  404,  648,  648,  404,  648,

      648,  404,  404,  648,  404,  648,  648,  648,  648,  404,
      330,  330,  648,  330,  648,  648,  330,  330,  648,  330,
      648,  648,  648,  648,  330,  152,  152,  152,  648,  152,
      648,  152,  152,  152,  648,  152,  648,  648,  648,  648,
      152,  333,  648,  333,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  333,  648,  648,  333,  333,  648,
      333,  254,  648,  648,  254,  648,  648,  254,  254,  648,
      254,  648,  254,  148,  148,  648,  648,  648,  648,  148,
      148,  148,  648,  148,  148,  148,  648,  148,  648,  148,
      148,  148,  648,  148,  648,  648,  148,  648,  148,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  648,  194,
      194,  194,  648,  194,  194,  194,  194,  194,  648,  194,
      194,  194,  194,  194,  194,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  648,  192,  192,  192,  648,  192,
      192,  192,  192,  192,  648,  192,  192,  192,  192,  192,
      192,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      648,  189,  189,  189,  648,  189,  189,  648,  189,  189,
      648,  189,  189,  189,  189,  189,  189,  360,  360,  648,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  361,  361,  648,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  311,  648,  311,
      311,  648,  648,  311,  648,  648,  311,  311,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  469,  469,  469,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  474,  474,  648,  474,
      648,  648,  474,  474,  648,  474,  648,  648,  648,  648,
      474,  475,  648,  648,  475,  648,  648,  475,  475,  648,
      475,  648,  648,  648,  648,  475,  152,  152,  152,  648,
      152,  648,  152,  152,  152,  648,  152,  648,  648,  648,
      648,  152,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  530,  530,

      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  532,  532,  648,  532,  648,  648,
      532,  532,  648,  532,  648,  648,  648,  648,  532,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  648,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  597,  597,  597,  597,  597,  597,  597,  597,  597,

      597,  597,  597,  597,  648,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,   25,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648
    } ;

static const flex_int16_t yy_chk[4413] =
    {   0,
        0,    3,    3,    7,    3,    3,    3,    3,  646,   63,
        3,    7,   63,    3,  182,    3,    3,    3,    3,    3,
        3,    3,    3,   13,   14,   10,   10,  182,   10,    3,
      645,    5,    6,    8,   63,    5,    6,    0,   41,    3,
        7,    8,   10,   13,   14,    3,    4,    4,   38,    4,
        4,    4,    4,   38,   57,    4,   13,   14,    4,   57,
        4,    4,    4,    4,    4,    4,    4,    4,    5,    6,
        8,   41,   68,  167,    4,   37,   37,   37,   37,  168,
       13,   14,   59,  167,    4,   68,  168,   59,   72,   72,
        4,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
      145,  117,   12,   31,   15,  145,   31,   16,   16,  117,
       16,  162,   23,   17,   20,  123,  123,   20,   18,   18,
       15,   18,   91,   23,   16,   31,   31,  642,   15,   17,
       50,  162,   16,   50,  128,   18,   54,   17,  156,   54,

       12,   15,   54,   18,   15,   16,  156,   50,   16,   23,
       17,   54,  128,   17,  253,   20,   18,  253,  146,   18,
      129,  151,   91,  146,   12,   15,  151,   15,   15,   16,
      161,   16,   16,   23,   17,   23,   17,   17,  129,   20,
       18,  161,   18,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,  166,   21,   21,  153,   92,   21,   21,
       21,  138,   21,  138,  157,   21,   21,   21,   51,  166,
       21,   51,  157,  153,  138,   21,   21,   21,   21,  118,
       73,  170,  118,   73,  118,   51,   24,   24,  170,   24,
       21,   21,   21,  158,   21,  118,   64,   73,   24,   64,
      160,   65,  158,   24,   65,  160,   90,   90,   80,   90,
      512,   80,  198,  199,  241,   21,  188,   21,   21,   21,
       22,   92,   22,   22,   24,   80,   22,   22,   22,  188,
       22,  232,  241,   22,   22,   22,  102,   64,   22,  102,

      232,  232,   65,   22,   22,   22,   22,   90,   24,  124,
       24,  124,  198,  102,  124,  124,  124,  124,   22,   22,
       22,   64,   22,  119,  200,  134,   65,  512,  134,  121,
      119,   90,  119,  119,  119,  119,  121,  199,  121,  121,
      121,  121,  134,   22,  119,   22,   22,   22,   35,   35,
      121,   35,   35,   35,   35,  141,  136,   35,  141,  136,
      119,  141,   35,   35,  200,   35,  121,  122,  122,  122,
      141,   35,   35,  136,  159,  163,  122,  159,  120,  120,
      120,  120,  640,  164,  258,  122,   35,   39,  164,  163,
      120,  120,  122,  120,   39,  163,   39,   39,   39,   39,

      169,  258,  201,  169,  159,   39,  120,  120,   39,  122,
      165,  120,  267,  171,   39,  165,  171,  172,  252,  180,
      172,   39,  180,  179,   39,  169,  196,  179,  186,  159,
      225,  186,  267,  196,  207,  225,  180,  226,   39,   40,
      205,  242,  252,  205,  638,  186,   40,  207,   40,   40,
       40,   40,  247,  226,  171,  179,  266,  205,  172,  242,
       40,  197,  197,   40,  197,   40,  201,  218,  247,  218,
      264,  266,  218,  218,  218,  218,   40,  261,  171,  264,
      179,   40,  172,  233,  233,  233,  233,  261,   40,   58,
       58,  265,   58,  415,  336,  415,   58,   58,   58,   58,

       58,   58,  197,  262,   58,  227,  227,  227,  227,  265,
      285,  256,   58,  336,   58,   58,  262,  227,  227,  256,
      227,  234,  234,  234,  234,  268,  197,   58,  256,   58,
      228,  257,  268,  227,  227,  269,  270,  228,  227,  228,
      228,  228,  228,  263,  257,  270,  269,  340,  263,  257,
      285,  228,  340,   58,   58,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,  228,   61,  286,
       61,  331,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   62,   62,  339,   62,  244,  331,  244,   62,

       62,   62,   62,   62,   62,  339,  229,   62,  229,  244,
      284,  229,  229,  229,  229,   62,  230,   62,   62,  284,
      302,  298,  287,  230,  298,  230,  230,  230,  230,  637,
       62,  635,   62,  286,  231,   62,  302,  230,  298,  332,
      358,  231,  332,  231,  231,  231,  231,  299,  287,  293,
      293,  293,  293,  230,  359,  231,   62,   62,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  231,  287,   85,  287,  299,  333,  235,  344,  333,
      358,   85,   85,   85,   85,  344,  235,  235,  235,  235,
      294,  294,  294,  294,  301,  301,   85,  301,   85,  235,

       85,  235,  291,  307,  291,  487,  342,  291,  291,  291,
      291,  301,  307,  307,  342,  235,  487,  440,  359,  235,
      338,   85,   85,   85,   85,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,  338,  343,
       87,  327,  295,  334,  335,  388,  308,  343,   87,   87,
       87,  295,  295,  295,  295,  308,  308,  327,  345,  334,
      440,  335,  376,   87,  295,   87,  295,   87,  317,  341,
      317,  346,  375,  317,  317,  317,  317,  345,   87,  346,
      295,  375,  375,  367,  295,  341,  634,  376,   87,   87,
       87,   87,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,  416,  319,   89,  388,  319,
      365,  417,  305,  365,  416,   89,   89,   89,   89,  305,
      417,  305,  305,  305,  305,  360,  373,  365,  304,  319,
       89,  319,   89,  305,   89,   89,  367,  304,  304,  304,
      304,  633,  373,  395,  319,  382,  382,  382,  382,  305,
      304,  360,  304,  353,  353,   89,   89,   89,   89,  110,
      110,  353,  110,  110,  110,  110,  304,  353,  110,  369,
      304,  306,  369,  110,  110,  360,  110,  360,  306,  393,
      306,  306,  306,  306,  414,  406,  369,  485,  371,  371,
      632,  371,  306,  372,  485,  393,  372,  110,  114,  114,

      414,  114,  114,  114,  114,  371,  395,  114,  306,  446,
      372,  419,  114,  114,  378,  114,  378,  406,  309,  378,
      378,  378,  378,  383,  383,  383,  383,  309,  309,  309,
      309,  419,  386,  386,  446,  386,  114,  116,  387,  387,
      309,  387,  309,  310,  631,  418,  116,  116,  116,  116,
      418,  537,  310,  310,  310,  310,  309,  386,  116,  116,
      309,  116,  420,  387,  408,  310,  476,  310,  537,  412,
      386,  420,  408,  451,  116,  116,  387,  412,  413,  116,
      125,  310,  628,  125,  627,  310,  413,  483,  125,  125,
      125,  125,  125,  125,  125,  476,  483,  125,  451,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  461,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  126,  465,
      321,  321,  439,  321,  482,  126,  626,  126,  126,  126,
      126,  441,  482,  445,  441,  439,  489,  321,  486,  126,
      489,  625,  126,  321,  126,  321,  486,  352,  441,  445,
      352,  352,  461,  352,  352,  126,  484,  352,  321,  641,
      126,  352,  352,  391,  391,  484,  391,  126,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  439,  465,  194,  624,  472,  443,  362,  391,  443,
      536,  194,  194,  194,  194,  445,  362,  362,  362,  362,
      490,  391,  536,  443,  363,  490,  194,  641,  194,  362,
      194,  362,  623,  363,  363,  363,  363,  448,  448,  448,
      448,  449,  449,  449,  449,  362,  363,  507,  363,  362,
      507,  194,  194,  194,  194,  213,  213,  532,  213,  213,
      213,  213,  363,  488,  213,  532,  363,  381,  472,  213,
      213,  381,  213,  381,  488,  364,  381,  381,  381,  381,
      478,  478,  478,  478,  364,  364,  364,  364,  514,  394,

      394,  491,  394,  213,  216,  460,  460,  364,  460,  364,
      374,  514,  491,  216,  216,  216,  216,  492,  622,  374,
      374,  374,  374,  364,  394,  216,  216,  364,  216,  508,
      460,  540,  374,  538,  374,  463,  463,  394,  463,  621,
      540,  216,  216,  460,  538,  543,  216,  217,  374,  492,
      493,  493,  374,  493,  513,  543,  217,  217,  217,  217,
      463,  508,  533,  541,  541,  533,  629,  513,  217,  217,
      447,  217,  447,  463,  539,  447,  447,  447,  447,  534,
      534,  534,  534,  510,  217,  217,  510,  542,  542,  217,
      237,  237,  237,  237,  539,  545,  545,  544,  237,  237,

      237,  237,  237,  237,  577,  521,  546,  560,  510,  521,
      544,  521,  577,  513,  237,  237,  237,  237,  237,  237,
      238,  510,  629,  238,  559,  579,  579,  617,  238,  238,
      238,  238,  238,  238,  238,  546,  560,  238,  566,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  559,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  239,  566,
      471,  471,  384,  471,  616,  239,  615,  239,  239,  239,

      239,  384,  384,  384,  384,  239,  239,  239,  239,  239,
      239,  570,  614,  239,  384,  471,  384,  511,  580,  618,
      511,  239,  239,  239,  239,  239,  239,  312,  471,  580,
      384,  584,  515,  515,  384,  515,  312,  312,  312,  312,
      581,  584,  511,  583,  312,  312,  312,  312,  312,  312,
      594,  581,  312,  596,  583,  511,  562,  515,  601,  562,
      312,  312,  312,  312,  312,  312,  313,  601,  605,  605,
      515,  618,  613,  313,  570,  313,  313,  313,  313,  630,
      630,  562,  594,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  562,  612,  611,  610,  596,  313,

      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  438,  607,
      636,  644,  337,  337,  337,  337,  603,  438,  438,  438,
      438,  609,  609,  564,  609,  619,  564,  337,  337,  337,
      438,  337,  438,  639,  600,  712,  619,  568,  643,  713,
      568,  712,  713,  599,  712,  593,  438,  592,  564,  591,
      438,  636,  337,  337,  337,  337,  337,  347,  347,  590,
      347,  564,  568,  644,  347,  347,  347,  347,  347,  347,

      589,  598,  347,  588,  598,  568,  450,  587,  569,  569,
      347,  569,  347,  347,  586,  450,  450,  450,  450,  639,
      585,  643,  576,  573,  565,  347,  598,  347,  450,  563,
      450,  557,  556,  569,  555,  554,  553,  552,  551,  598,
      550,  549,  548,  530,  450,  347,  569,  528,  450,  527,
      506,  347,  347,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  505,  504,  356,  503,
      502,  501,  453,  500,  499,  498,  356,  356,  356,  356,
      497,  453,  453,  453,  453,  496,  495,  494,  480,  475,
      474,  356,  473,  356,  453,  356,  453,  469,  467,  466,

      462,  458,  444,  442,  435,  356,  434,  433,  432,  431,
      453,  430,  429,  428,  453,  427,  356,  356,  356,  356,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  426,  425,  357,  424,  423,  422,  454,
      410,  404,  402,  357,  357,  357,  357,  400,  454,  454,
      454,  454,  398,  396,  390,  389,  385,  379,  357,  370,
      357,  454,  357,  454,  368,  366,  355,  354,  351,  350,
      349,  348,  330,  325,  324,  323,  322,  454,  357,  320,
      314,  454,  311,  357,  357,  357,  357,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  456,  300,  297,  283,
      407,  407,  407,  407,  280,  456,  456,  456,  456,  279,
      278,  275,  274,  273,  272,  407,  407,  407,  456,  407,
      456,  271,  254,  250,  249,  246,  245,  236,  224,  222,
      221,  211,  210,  208,  456,  206,  195,  193,  456,  192,
      407,  407,  407,  407,  407,  421,  421,  189,  421,  187,
      185,  184,  421,  421,  421,  421,  421,  421,  183,  181,
      421,  178,  176,  175,  516,  174,  173,  155,  421,  152,
      421,  421,  148,  516,  516,  516,  516,  144,  137,  135,
      115,  113,  111,  421,  108,  421,  516,  107,  516,  105,

      103,   98,   86,   84,   82,   81,   79,   76,   75,   74,
      421,   67,  516,   66,   60,   56,  516,   52,   36,  421,
      421,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,   33,   32,  436,   25,    9,    2,
      517,    1,    0,    0,  436,  436,  436,  436,    0,  517,
      517,  517,  517,    0,    0,    0,    0,    0,    0,  436,
        0,  436,  517,  436,  517,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  517,  436,
        0,    0,  517,    0,  436,  436,  436,  436,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,    0,    0,  437,    0,    0,    0,  518,    0,    0,
        0,  437,  437,  437,  437,    0,  518,  518,  518,  518,
        0,    0,    0,    0,    0,    0,  437,    0,  437,  518,
      437,  518,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  437,    0,  518,    0,    0,    0,  518,
        0,  437,  437,  437,  437,  452,    0,    0,    0,  452,
      522,  452,    0,    0,  452,  452,  452,  452,    0,  522,
      522,  522,  522,    0,    0,    0,    0,  452,    0,  452,
        0,    0,  522,    0,  522,    0,    0,    0,    0,    0,
        0,    0,    0,  452,  523,    0,    0,  452,  522,  525,

        0,    0,  522,  523,  523,  523,  523,    0,  525,  525,
      525,  525,    0,    0,    0,    0,  523,    0,  523,    0,
        0,  525,    0,  525,    0,    0,    0,    0,    0,    0,
        0,    0,  523,  571,    0,    0,  523,  525,    0,    0,
        0,  525,  571,  571,  571,  571,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  571,    0,  571,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  571,    0,    0,    0,  571,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,    0,    0,    0,    0,  578,

      578,  578,  578,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  578,  578,  578,    0,  578,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  578,
      578,  578,  578,  578,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,    0,    0,    0,    0,  582,  582,  582,
      582,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  582,  582,  582,    0,  582,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  582,  582,  582,
      582,  582,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  656,    0,    0,    0,    0,    0,

        0,  656,    0,  656,  656,    0,  656,    0,  656,  656,
      656,  656,  656,    0,  656,  656,  656,  656,  656,  656,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  659,  659,    0,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  660,  660,

        0,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  661,  661,    0,    0,    0,    0,
      661,  661,  661,    0,  661,  661,  661,    0,  661,    0,
        0,  661,  661,    0,  661,    0,    0,  661,    0,  661,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  663,  663,    0,  663,
      663,    0,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,    0,  663,  663,    0,  663,  663,    0,  663,

      663,  663,  664,  664,    0,    0,    0,    0,  664,  664,
      664,    0,  664,  664,  664,    0,  664,    0,  664,  664,
      664,    0,  664,    0,    0,  664,    0,  664,  665,  665,
      665,    0,  665,    0,    0,  665,  665,    0,  665,    0,
        0,    0,    0,  665,  666,  666,    0,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,    0,  666,  666,
        0,  666,  666,    0,  666,    0,    0,    0,    0,  666,
      667,  667,  667,  667,  667,  667,  667,  667,  667,    0,
      667,  667,  667,    0,  667,  667,    0,  667,  667,    0,
      667,  667,  667,  667,  667,  667,  668,  668,  668,  668,

      668,  668,  668,  668,  668,    0,  668,  668,  668,    0,
      668,  668,  668,  668,  668,    0,  668,  668,  668,  668,
      668,  668,  669,  669,  669,  669,  669,  669,  669,  669,
      669,    0,  669,  669,  669,    0,  669,  669,    0,  669,
      669,    0,  669,  669,  669,  669,  669,  669,  670,    0,
      670,  670,    0,    0,  670,    0,    0,    0,  670,  670,
        0,  670,    0,    0,  670,  670,    0,  670,  671,  671,
        0,  671,  671,  671,  671,  671,  671,    0,  671,  671,
      671,  671,  671,  671,  671,  671,  671,    0,  671,  671,
        0,    0,  671,  671,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      678,    0,    0,  678,    0,    0,  678,  678,    0,  678,
        0,    0,    0,    0,  678,  679,  679,    0,  679,    0,
        0,    0,  679,  680,    0,    0,  680,    0,    0,  680,
      680,    0,  680,    0,  680,  681,  681,    0,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  684,    0,    0,    0,    0,    0,  684,
        0,    0,  684,  684,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  687,    0,    0,  687,
        0,    0,  687,  687,    0,  687,    0,    0,    0,    0,
      687,  688,    0,  688,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  688,    0,    0,  688,  688,    0,
      688,  689,  689,    0,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  692,
      692,    0,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  698,    0,    0,  698,    0,

        0,  698,  698,    0,  698,    0,    0,    0,    0,  698,
      699,  699,    0,  699,    0,    0,  699,  699,    0,  699,
        0,    0,    0,    0,  699,  700,  700,  700,    0,  700,
        0,  700,  700,  700,    0,  700,    0,    0,    0,    0,
      700,  701,    0,  701,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  701,    0,    0,  701,  701,    0,
      701,  702,    0,    0,  702,    0,    0,  702,  702,    0,
      702,    0,  702,  703,  703,    0,    0,    0,    0,  703,
      703,  703,    0,  703,  703,  703,    0,  703,    0,  703,
      703,  703,    0,  703,    0,    0,  703,    0,  703,  704,

      704,  704,  704,  704,  704,  704,  704,  704,    0,  704,
      704,  704,    0,  704,  704,  704,  704,  704,    0,  704,
      704,  704,  704,  704,  704,  705,  705,  705,  705,  705,
      705,  705,  705,  705,    0,  705,  705,  705,    0,  705,
      705,  705,  705,  705,    0,  705,  705,  705,  705,  705,
      705,  706,  706,  706,  706,  706,  706,  706,  706,  706,
        0,  706,  706,  706,    0,  706,  706,    0,  706,  706,
        0,  706,  706,  706,  706,  706,  706,  707,  707,    0,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,

      707,  707,  707,  708,  708,    0,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  714,    0,  714,
      714,    0,    0,  714,    0,    0,  714,  714,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  718,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  723,  723,    0,  723,
        0,    0,  723,  723,    0,  723,    0,    0,    0,    0,
      723,  724,    0,    0,  724,    0,    0,  724,  724,    0,
      724,    0,    0,    0,    0,  724,  725,  725,  725,    0,
      725,    0,  725,  725,  725,    0,  725,    0,    0,    0,
        0,  725,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  728,  728,    0,  728,    0,    0,
      728,  728,    0,  728,    0,    0,    0,    0,  728,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,    0,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,    0,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
/*****************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 30 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"

  
#include <stdio.h>
#include <stdlib.h>
#include <stack>
#include <algorithm>

#include "bufstr.h"
#include "debug.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "condparser.h"

#include <assert.h>

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define ADDCHAR(c)    yyextra->outBuf->addChar(c)
#define ADDARRAY(a,s) yyextra->outBuf->addArray(a,s)

#define USE_STATE2STRING 0
  
struct commentcnvYY_CondCtx
{
  commentcnvYY_CondCtx(int line,QCString id,bool b) 
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};
  
struct CommentCtx
{
  CommentCtx(int line) 
    : lineNr(line) {}
  int lineNr;
};
  
struct commentcnvYY_state
{
  BufStr * inBuf = 0;
  BufStr * outBuf = 0;
  yy_size_t inBufPos = 0;
  int      col = 0;
  int      blockHeadCol = 0;
  bool     mlBrief = FALSE;
  int      readLineCtx = 0;
  bool     skip = FALSE;
  QCString fileName;
  int      lineNr = 0;
  int      condCtx = 0;
  std::stack<commentcnvYY_CondCtx> condStack;
  std::stack<int> commentStack;
  QCString blockName;
  int      lastCommentContext = 0;
  bool     inSpecialComment = FALSE;
  bool     inRoseComment= FALSE;
  int      stringContext = 0;
  int      charContext = 0;
  int      javaBlock = 0;
  bool     specialComment = FALSE;

  QCString aliasString;
  int      blockCount = 0;
  bool     lastEscaped = FALSE;
  int      lastBlockContext= 0;
  bool     pythonDocString = FALSE;
  int      nestingCount= 0;

  bool     vhdl = FALSE; // for VHDL old style --! comment

  SrcLangExt lang = SrcLangExt_Unknown;
  bool       isFixedForm = FALSE; // For Fortran
};

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif
static inline int computeIndent(const char *s);

static void replaceCommentMarker(yyscan_t yyscanner,const char *s,int len);
static inline void copyToOutput(yyscan_t yyscanner,const char *s,int len);
static void startCondSection(yyscan_t yyscanner,const QCString &sectId);
static void endCondSection(yyscan_t yyscanner);
static void handleCondSectionId(yyscan_t yyscanner,const char *expression);
static void replaceAliases(yyscan_t yyscanner,const QCString &s);
static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size);
static void replaceComment(yyscan_t yyscanner,int offset);
static void clearCommentStack(yyscan_t yyscanner);




#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 1901 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv_intermediate.cpp"

#line 152 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
  //- start: NUMBER -------------------------------------------------------------------------
  // Note same defines in code.l: keep in sync
  //- end: NUMBER ---------------------------------------------------------------------------
  // C start comment 
  // C end comment
  // Cpp comment 
  // Optional any character
  // Optional white space
  // readline non special
  // Optional slash
#line 1914 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv_intermediate.cpp"

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define CNComment 6
#define Verbatim 7
#define VerbatimCode 8
#define ReadLine 9
#define CondLine 10
#define ReadAliasArgs 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#define YY_EXTRA_TYPE struct commentcnvYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int commentcnvYYlex_init (yyscan_t* scanner);

int commentcnvYYlex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentcnvYYlex_destroy ( yyscan_t yyscanner );

int commentcnvYYget_debug ( yyscan_t yyscanner );

void commentcnvYYset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE commentcnvYYget_extra ( yyscan_t yyscanner );

void commentcnvYYset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *commentcnvYYget_in ( yyscan_t yyscanner );

void commentcnvYYset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *commentcnvYYget_out ( yyscan_t yyscanner );

void commentcnvYYset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int commentcnvYYget_leng ( yyscan_t yyscanner );

char *commentcnvYYget_text ( yyscan_t yyscanner );

int commentcnvYYget_lineno ( yyscan_t yyscanner );

void commentcnvYYset_lineno ( int _line_number , yyscan_t yyscanner );

int commentcnvYYget_column  ( yyscan_t yyscanner );

void commentcnvYYset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentcnvYYwrap ( yyscan_t yyscanner );
#else
extern int commentcnvYYwrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentcnvYYlex (yyscan_t yyscanner);

#define YY_DECL int commentcnvYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)commentcnvYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentcnvYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		commentcnvYY_load_buffer_state(yyscanner );
		}

	{
#line 197 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"


#line 2206 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 649 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 648 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 199 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ //Note similar code in code.l
                                      if (yyextra->lang!=SrcLangExt_Cpp) REJECT;
                                      copyToOutput(yyscanner,yytext,(int)yyleng); 
                                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 203 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* eat anything that is not " / , or \n */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 206 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* eat , so we have a nice separator in long initialization lines */ 
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 209 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* start of python long comment */
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->pythonDocString = TRUE;
                                       yyextra->nestingCount=1;
                                       clearCommentStack(yyscanner); /*  to be on the save side */
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
                                   }
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 224 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0; // Fortran doesn't have an end comment
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 238 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       /* check for fixed format; we might have some conditional as part of multiline if like C<5 .and. & */
                                       if (yyextra->isFixedForm && (yyextra->col == 0))
                                       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng); 
                                         yyextra->nestingCount=0; // Fortran doesn't have an end comment
                                         clearCommentStack(yyscanner); /*  to be on the save side */
				         BEGIN(CComment);
                                         yyextra->commentStack.push(yyextra->lineNr);
				       }
				       else
				       {
				         REJECT;
				       }
				     }
  				   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 260 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
  			             if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
				     }
                                   }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 270 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
  			             if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       if (yyextra->col == 0)
                                       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng); 
				       }
				       else
				       {
				         REJECT;
				       }
				     }
                                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 287 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* start of a string */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->stringContext = YY_START;
				     BEGIN(SkipString); 
                                   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 292 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->charContext = YY_START;
                                     if (yyextra->lang!=SrcLangExt_VHDL)
                                     {
				       BEGIN(SkipChar);
                                     }
  				   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 300 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* new line */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 12:
/* rule 12 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 304 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 304 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* start C++ style special comment block */
  				     if (yyextra->mlBrief) 
				     {
				       REJECT; // bail out if we do not need to convert
				     }
				     else
				     {
				       int i=3;
				       if (yytext[2]=='/')
				       {
					 while (i<(int)yyleng && yytext[i]=='/') i++;
				       }
				       yyextra->blockHeadCol=yyextra->col;
				       copyToOutput(yyscanner,"/**",3); 
				       replaceAliases(yyscanner,QCString(yytext+i));
				       yyextra->inSpecialComment=TRUE;
				       //BEGIN(SComment); 
				       yyextra->readLineCtx=SComment;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 325 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* Start of Rational Rose ANSI C++ comment block */
                                     if (yyextra->mlBrief) REJECT;
                                     int i=17; //=strlen("//##Documentation");
				     yyextra->blockHeadCol=yyextra->col;
				     copyToOutput(yyscanner,"/**",3);
				     replaceAliases(yyscanner,QCString(yytext+i));
				     yyextra->inRoseComment=TRUE;
				     BEGIN(SComment);
  				   }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 334 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // next line contains an end marker, see bug 752712
				     yyextra->inSpecialComment=yytext[2]=='/' || yytext[2]=='!';
  				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 16:
/* rule 16 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 340 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* one line C++ comment */ 
				     yyextra->inSpecialComment=yytext[2]=='/' || yytext[2]=='!';
  				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
				   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 346 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* avoid matching next rule for empty C comment, see bug 711723 */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 349 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* start of a C comment */
                                     if (yyextra->lang==SrcLangExt_Python)
				     {
				       REJECT;
                                     }
  			             yyextra->specialComment=(int)yyleng==3;
                                     yyextra->nestingCount=1;
                                     clearCommentStack(yyscanner); /*  to be on the save side */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                     if (yyextra->specialComment)
				       BEGIN(CComment); 
                                     else
				       BEGIN(CNComment); 
                                     yyextra->commentStack.push(yyextra->lineNr);
                                   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 364 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0; // Python doesn't have an end comment for #
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 378 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
				     }
  				   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 388 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->vhdl = TRUE;
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0;  // VHDL doesn't have an end comment
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 403 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Fortran)
				     {
				       REJECT;
				     }
				     else
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
                                       yyextra->nestingCount=0;  // Fortran doesn't have an end comment
                                       clearCommentStack(yyscanner); /*  to be on the save side */
				       BEGIN(CComment);
                                       yyextra->commentStack.push(yyextra->lineNr);
				     }
  				   }
	YY_BREAK
case 23:
#line 418 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
case 24:
YY_RULE_SETUP
#line 418 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // Mail address, to prevent seeing e.g x@code-factory.org as start of a code block
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 421 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,"@iliteral{code}",15); 
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=1;
				     yyextra->blockName=&yytext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 428 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,"@iliteral",9); 
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=1;
				     yyextra->blockName=&yytext[1];
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 435 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* start of markdown code block */
                                     if (!Config_getBool(MARKDOWN_SUPPORT))
                                     {
                                       REJECT;
                                     }
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     yyextra->lastCommentContext = YY_START;
                                     yyextra->javaBlock=0;
                                     yyextra->blockName=QCString(yytext).stripWhiteSpace().left(3); // take the ``` or ~~~ part
                                     BEGIN(VerbatimCode);
                                   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 446 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->lastCommentContext = YY_START;
				     yyextra->javaBlock=0;
                                     if (qstrcmp(&yytext[1],"startuml")==0)
                                     {
                                       yyextra->blockName="uml";
                                     }
                                     else
                                     {
				       yyextra->blockName=&yytext[1];
                                     }
                                     BEGIN(VerbatimCode);
  				   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 460 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->blockName=&yytext[1];
				     if (yyextra->blockName.at(1)=='[')
				     {
				       yyextra->blockName.at(1)=']';
				     }
				     else if (yyextra->blockName.at(1)=='{')
				     {
				       yyextra->blockName.at(1)='}';
				     }
				     else if (yyextra->blockName.at(1)=='(')
				     {
				       yyextra->blockName.at(1)=')';
				     }
				     yyextra->lastCommentContext = YY_START;
				     BEGIN(Verbatim);
  			           }
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 478 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* start of a verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->blockName=&yytext[1];
				     yyextra->lastCommentContext = YY_START;
                                     BEGIN(Verbatim);
                                   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 484 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* escaped double quote */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 487 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* escaped backslash */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 490 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* any other character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 493 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     if (&yytext[1]==yyextra->blockName) // end of formula
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
				     else if (&yytext[4]==yyextra->blockName)
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
                                   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 504 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       yyextra->javaBlock++;
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
				     }
                                   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 515 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->javaBlock==0)
				     {
				       REJECT;
				     }
				     else
				     {
				       yyextra->javaBlock--;
				       if (yyextra->javaBlock==0)
				       {
                                         copyToOutput(yyscanner," @endiliteral ",14);
				         BEGIN(yyextra->lastCommentContext);
				       }
				       else
				       {
                                         copyToOutput(yyscanner,yytext,(int)yyleng);
				       }
				     }
  				   }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 534 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of markdown code block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     if (yytext[0]==yyextra->blockName[0])
                                     {
                                       BEGIN(yyextra->lastCommentContext);
                                     }
                                   }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 541 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
				     if (&yytext[4]==yyextra->blockName)
				     {
				       BEGIN(yyextra->lastCommentContext);
				     }
                                   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 548 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* skip leading comments */
  				     if (!yyextra->inSpecialComment)
				     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng); 
				     }
                                     else
                                     {
                                       int l=0;
                                       while (yytext[l]==' ' || yytext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(yyscanner,yytext,l);
                                       if (yyleng-l==3) // ends with //! or ///
                                       {
                                         copyToOutput(yyscanner," * ",3);
                                       }
                                       else // ends with //
                                       {
                                         copyToOutput(yyscanner,"//",2);
                                       }
                                     }
  				   }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 571 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* any character not a backslash or new line or } */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 574 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* new line in verbatim block */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 577 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
  				     if (yyextra->blockName=="dot" || yyextra->blockName=="msc" || yyextra->blockName=="uml" || yyextra->blockName.at(0)=='f')
				     {
				       // see bug 487871, strip /// from dot images and formulas.
                                       int l=0;
                                       while (yytext[l]==' ' || yytext[l]=='\t')
                                       {
                                         l++;
                                       }
                                       copyToOutput(yyscanner,yytext,l);
				       copyToOutput(yyscanner,"   ",3);
				     }
				     else // even slashes are verbatim (e.g. \verbatim, \code)
				     {
				       REJECT;
				     }
  				   }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 594 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* any other character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 597 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* escaped character in string */
                                     if (yyextra->lang==SrcLangExt_Fortran || yyextra->lang==SrcLangExt_VHDL)
                                     {
                                       unput(yytext[1]);
                                       copyToOutput(yyscanner,yytext,1);
                                     }
                                     else
                                     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                     }
                                   }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 608 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of string */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     BEGIN(yyextra->stringContext); 
                                   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 612 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 615 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* new line inside string (illegal for some compilers) */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 618 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* escaped character */
                                     if (yyextra->lang==SrcLangExt_Fortran || yyextra->lang==SrcLangExt_VHDL)
                                     {
                                       unput(yytext[1]);
                                       copyToOutput(yyscanner,yytext,1);
                                     }
                                     else
                                     {
                                       copyToOutput(yyscanner,yytext,(int)yyleng);
                                     }
                                   }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 629 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of character literal */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                     BEGIN(yyextra->charContext);
                                   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 633 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* any other string character */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 636 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* new line character */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 640 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* anything that is not a '*' or command */ 
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 643 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* stars without slashes */
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
                                   }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 646 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of Python docstring */
                                     if (yyextra->lang!=SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else
				     {
                                       yyextra->nestingCount--;
                                       yyextra->pythonDocString = FALSE;
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 659 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* new line in comment */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                     /* in case of Fortran always end of comment */
  				     if (yyextra->lang==SrcLangExt_Fortran)
				     {
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 56:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 667 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* we are already in C-comment so not a start of a nested comment but 
                                      * just the end of the comment (the end part is handled later). */
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 671 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* nested C comment */
                                     if (yyextra->lang==SrcLangExt_Python ||
                                         yyextra->lang==SrcLangExt_Markdown)
				     {
				       REJECT;
                                     }
                                     yyextra->nestingCount++;
                                     yyextra->commentStack.push(yyextra->lineNr);
                                     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 681 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of C comment */
                                     if (yyextra->lang==SrcLangExt_Python ||
                                         yyextra->lang==SrcLangExt_Markdown)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(yyscanner,yytext,(int)yyleng);
                                       yyextra->nestingCount--;
                                       if (yyextra->nestingCount<=0)
                                       {
				         BEGIN(Scan);
                                       }
                                       else
                                       {
                                         //yyextra->nestingCount--;
                                         yyextra->commentStack.pop();
                                       }
				     }
                                   }
	YY_BREAK
/* Python an VHDL share CComment,CNComment, so special attention for ending comments is required */
case 59:
/* rule 59 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 703 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_VHDL)
                                     {
                                       REJECT;
                                     }
                                     else
                                     {
                                       if (yyextra->vhdl) // inside --! comment
                                       {
                                         yyextra->vhdl = FALSE;
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 722 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang!=SrcLangExt_Python || yyextra->pythonDocString)
				     {
				       REJECT;
				     }
				     else
				     {
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
                                   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 733 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lang==SrcLangExt_Python)
                                     {
                                       if (yyextra->pythonDocString)
                                       {
                                         REJECT;
                                       }
                                       else
                                       {
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                     }
                                     else if (yyextra->lang==SrcLangExt_VHDL)
                                     {
                                       if (yyextra->vhdl) // inside --! comment
                                       {
                                         yyextra->vhdl = FALSE;
				         copyToOutput(yyscanner,yytext,(int)yyleng);
				         BEGIN(Scan);
                                       }
                                       else // C-type comment
                                       {
                                         REJECT;
                                       }
                                     }
                                     else
                                     {
				       REJECT;
                                     }
                                   }
	YY_BREAK
/* removed for bug 674842 (bug was introduced in rev 768)
<CComment,CNComment>"'"			   {
  			             yyextra->charContext = YY_START;
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(SkipChar);
  				   }
<CComment,CNComment>"\""			   {
  			             yyextra->stringContext = YY_START;
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(SkipString);
  				   }
   */
case 62:
YY_RULE_SETUP
#line 776 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     copyToOutput(yyscanner,yytext,(int)yyleng); 
  				   }
	YY_BREAK
case 63:
/* rule 63 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 779 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
  				     replaceComment(yyscanner,0);
  				   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 782 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     replaceComment(yyscanner,1); 
                                   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 785 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ 
  				     replaceComment(yyscanner,0);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 790 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{   
                                     /* See Bug 752712: end the multiline comment when finding a @} or \} command */
                                     copyToOutput(yyscanner," */",3); 
				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->inSpecialComment=FALSE;
				     yyextra->inRoseComment=FALSE;
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 798 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ 
                                     replaceComment(yyscanner,1); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
  				   }
	YY_BREAK
case 68:
#line 804 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
case 69:
/* rule 69 can match eol */
#line 805 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 805 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{    // or   //!something
  				     replaceComment(yyscanner,0);
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 71:
/* rule 71 can match eol */
#line 811 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
case 72:
/* rule 72 can match eol */
#line 812 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 812 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ 
                                     replaceComment(yyscanner,1); 
				     yyextra->readLineCtx=YY_START;
				     BEGIN(ReadLine);
                                   }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 817 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (!yyextra->inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
  				       replaceComment(yyscanner,0);
				       yyextra->readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 829 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (!yyextra->inRoseComment)
				     {
				       REJECT;
				     }
				     else
				     {
                                       replaceComment(yyscanner,1); 
				       yyextra->readLineCtx=YY_START;
				       BEGIN(ReadLine);
				     }
                                   }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 841 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ /* end of special comment */
                                     copyToOutput(yyscanner," */",3); 
				     copyToOutput(yyscanner,yytext,(int)yyleng); 
				     yyextra->inSpecialComment=FALSE;
				     yyextra->inRoseComment=FALSE;
                                     yyextra->readLineCtx = Scan; // reset, otherwise there will be problems with:
                                                                  //   static void handleCondSectionId
				     BEGIN(Scan); 
                                   }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 850 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,"/&zwj;**",8);
				   }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 853 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,"*&zwj;/",7);
				   }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 856 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				   }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 859 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 862 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
				     copyToOutput(yyscanner,yytext,(int)yyleng);
				     BEGIN(yyextra->readLineCtx);
				   }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 866 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // escaped command
				     copyToOutput(yyscanner,yytext,(int)yyleng);
  				   }
	YY_BREAK
case 83:
/* rule 83 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 869 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // conditional section
  				     yyextra->condCtx = YY_START; 
  				     BEGIN(CondLine);
  				   }
	YY_BREAK
case 84:
/* rule 84 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 873 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // end of conditional section
  				     bool oldSkip=yyextra->skip;
  				     endCondSection(yyscanner);
				     if (YY_START==CComment && oldSkip && !yyextra->skip) 
    			             {
				       //printf("** Adding start of comment!\n");
				       if (yyextra->lang!=SrcLangExt_Python &&
					   yyextra->lang!=SrcLangExt_VHDL &&
					   yyextra->lang!=SrcLangExt_Markdown &&
					   yyextra->lang!=SrcLangExt_Fortran)
				       {
 				         ADDCHAR('/');
     				         ADDCHAR('*');
					 if (yyextra->specialComment)
					 {
					   ADDCHAR('*');
					 }
				       }
    				     }
				    }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 893 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     handleCondSectionId(yyscanner,yytext);
  				   }
	YY_BREAK
case 86:
/* rule 86 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 896 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
  				     yyextra->condCtx=YY_START;
                                     handleCondSectionId(yyscanner," "); // fake section id causing the section to be hidden unconditionally
                                   }
	YY_BREAK
case 87:
/* rule 87 can match eol */
#line 901 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 901 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // forgot section id?
                                     handleCondSectionId(yyscanner," "); // fake section id causing the section to be hidden unconditionally
				     if (*yytext=='\n') { yyextra->lineNr++; copyToOutput(yyscanner,"\n",1);}
  				   }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 905 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // expand alias without arguments
				     replaceAliases(yyscanner,QCString(yytext));
  				   }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 908 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // expand alias with arguments
                                     yyextra->lastBlockContext=YY_START;
				     yyextra->blockCount=1;
				     yyextra->aliasString=yytext;
				     yyextra->lastEscaped=0;
				     BEGIN( ReadAliasArgs );
  				   }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 915 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // skip leading special comments (see bug 618079)
  				   }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 917 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{ // oops, end of comment in the middle of an alias?
                                     if (yyextra->lang==SrcLangExt_Python)
				     {
				       REJECT;
				     }
				     else // abort the alias, restart scanning
				     {
				       copyToOutput(yyscanner,yyextra->aliasString.data(),yyextra->aliasString.length());
				       copyToOutput(yyscanner,yytext,(int)yyleng);
				       BEGIN(Scan);
				     }
  				   }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 929 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 933 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     if (yyextra->lastEscaped)  yyextra->lastEscaped=FALSE;
                                     else                yyextra->lastEscaped=TRUE;
                                     yyextra->aliasString+=yytext;
                                   }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 938 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
                                     yyextra->lineNr++;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 943 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
                                     if (!yyextra->lastEscaped) yyextra->blockCount++;
				     yyextra->lastEscaped=FALSE;
                                   }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 948 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     if (!yyextra->lastEscaped) yyextra->blockCount--;
				     if (yyextra->blockCount==0)
				     {
				       replaceAliases(yyscanner,yyextra->aliasString);
				       BEGIN( yyextra->lastBlockContext );
				     }
				     yyextra->lastEscaped=FALSE;
  			           }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 958 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
                                     yyextra->aliasString+=yytext;
				     yyextra->lastEscaped=FALSE;
  				   }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 962 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
  				     copyToOutput(yyscanner,yytext,(int)yyleng);
  				   }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 966 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
{
  				     copyToOutput(yyscanner,yytext,(int)yyleng);
                                   }
	YY_BREAK
/*
<*>\n  { fprintf(stderr,"Lex scanner %s (%s) default rule newline for state %s.\n", __FILE__, qPrint(yyextra->fileName),stateToString(YY_START));}
  */
case 101:
YY_RULE_SETUP
#line 972 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"
ECHO;
	YY_BREAK
#line 3566 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv_intermediate.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(CNComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * commentcnvYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( commentcnvYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of commentcnvYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentcnvYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentcnvYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 649 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 649 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 648);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentcnvYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentcnvYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentcnvYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        commentcnvYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            commentcnvYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	commentcnvYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	commentcnvYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void commentcnvYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentcnvYYpop_buffer_state();
	 *		commentcnvYYpush_buffer_state(new_buffer);
     */
	commentcnvYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentcnvYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (commentcnvYYwrap()) processing, but the only time this flag
	 * is looked at is after commentcnvYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void commentcnvYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentcnvYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentcnvYYalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentcnvYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentcnvYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void commentcnvYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentcnvYYfree((void *) b->yy_ch_buf ,yyscanner );

	commentcnvYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentcnvYYrestart() or at EOF.
 */
    static void commentcnvYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	commentcnvYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentcnvYY_init_buffer was _probably_
     * called from commentcnvYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void commentcnvYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentcnvYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void commentcnvYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	commentcnvYYensure_buffer_stack(yyscanner);

	/* This block is copied from commentcnvYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentcnvYY_switch_to_buffer. */
	commentcnvYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void commentcnvYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	commentcnvYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		commentcnvYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentcnvYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentcnvYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)commentcnvYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in commentcnvYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentcnvYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) commentcnvYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentcnvYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentcnvYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentcnvYY_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return commentcnvYY_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to commentcnvYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentcnvYY_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) commentcnvYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentcnvYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentcnvYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentcnvYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE commentcnvYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int commentcnvYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int commentcnvYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *commentcnvYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *commentcnvYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int commentcnvYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *commentcnvYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void commentcnvYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void commentcnvYYset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "commentcnvYYset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void commentcnvYYset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "commentcnvYYset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see commentcnvYY_switch_to_buffer
 */
void commentcnvYYset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void commentcnvYYset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int commentcnvYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void commentcnvYYset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* commentcnvYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int commentcnvYYlex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) commentcnvYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* commentcnvYYlex_init_extra has the same functionality as commentcnvYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to commentcnvYYalloc in
 * the yyextra field.
 */
int commentcnvYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    commentcnvYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) commentcnvYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    commentcnvYYset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentcnvYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentcnvYYlex_init()
     */
    return 0;
}

/* commentcnvYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentcnvYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentcnvYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentcnvYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	commentcnvYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        commentcnvYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    commentcnvYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentcnvYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    commentcnvYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentcnvYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *commentcnvYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void commentcnvYYfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see commentcnvYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 972 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/commentcnv.l"


static void replaceCommentMarker(yyscan_t yyscanner,const char *s,int len)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=s;
  char c;
  // copy leading blanks
  while ((c=*p) && (c==' ' || c=='\t' || c=='\n')) 
  {
    ADDCHAR(c);
    yyextra->lineNr += c=='\n';
    p++;
  }
  // replace start of comment marker by blanks and the last character by a *
  int blanks=0;
  while ((c=*p) && (c=='/' || c=='!' || c=='#')) 
  {
    blanks++;
    p++;
    if (*p=='<') // comment-after-item marker 
    { 
      blanks++;
      p++; 
    }
    if (c=='!') // end after first !
    {
      break;
    }
  }
  if (blanks>0)
  {
    while (blanks>2)
    {
      ADDCHAR(' ');
      blanks--;
    }
    if (blanks>1) ADDCHAR('*');
    ADDCHAR(' ');
  }
  // copy comment line to output
  ADDARRAY(p,len-(int)(p-s));
}

static inline int computeIndent(const char *s)
{
  int col=0;
  int tabSize=Config_getInt(TAB_SIZE);
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c==' ') col++;
    else if (c=='\t') col+=tabSize-(col%tabSize); 
    else break;
  }
  return col;
}

static inline void copyToOutput(yyscan_t yyscanner,const char *s,int len)
{
  int tabSize=Config_getInt(TAB_SIZE);
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int i;
  if (yyextra->skip) // only add newlines.
  {
    for (i=0;i<len;i++)
    {
      switch(s[i])
      {
        case '\n':
	  ADDCHAR('\n');
	  yyextra->lineNr++;
          yyextra->col=0;
          break;
        case '\t':
          yyextra->col+=tabSize-(yyextra->col%tabSize);
          break;
        default:
          yyextra->col++;
          break;
      }
    }
  }
  else if (len>0)
  {
    ADDARRAY(s,len);
    for (i=0;i<len;i++) 
    {
      switch (s[i])
      {
	case '\n': yyextra->col=0; 
	           //fprintf(stderr,"---> copy %d\n",g_lineNr);
		   yyextra->lineNr++; break;
	case '\t': yyextra->col+=tabSize-(yyextra->col%tabSize); break;
	default:   yyextra->col++; break;
      }
    }
  }
}

static void clearCommentStack(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  while (!yyextra->commentStack.empty()) yyextra->commentStack.pop();
}

static void startCondSection(yyscan_t yyscanner,const QCString &sectId)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("startCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
  CondParser prs;
  bool expResult = prs.parse(yyextra->fileName,yyextra->lineNr,sectId);
  yyextra->condStack.push(commentcnvYY_CondCtx(yyextra->lineNr,sectId,yyextra->skip));
  if (!expResult) // not enabled
  {
    yyextra->skip=TRUE;
  }
}

static void endCondSection(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->condStack.empty())
  {
    warn(yyextra->fileName,yyextra->lineNr,"Found \\endcond command without matching \\cond");
    yyextra->skip=FALSE;
  }
  else
  {
    const commentcnvYY_CondCtx &ctx = yyextra->condStack.top();
    yyextra->skip=ctx.skip;
    yyextra->condStack.pop();
  }
  //printf("endCondSection: skip=%d stack=%d\n",g_skip,g_condStack.count());
}

static void handleCondSectionId(yyscan_t yyscanner,const char *expression)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  bool oldSkip=yyextra->skip;
  startCondSection(yyscanner,QCString(expression));
  if ((yyextra->condCtx==CComment || yyextra->readLineCtx==SComment) && 
      !oldSkip && yyextra->skip) 
  {
    if (yyextra->lang!=SrcLangExt_Python &&
        yyextra->lang!=SrcLangExt_VHDL &&
        yyextra->lang!=SrcLangExt_Markdown &&
        yyextra->lang!=SrcLangExt_Fortran)
    {
      ADDCHAR('*');
      ADDCHAR('/');
    }
  }
  if (yyextra->readLineCtx==SComment)
  {
    BEGIN(SComment);
  }
  else
  {
    BEGIN(yyextra->condCtx);
  }
}

/** copies string \a s with length \a len to the output, while 
 *  replacing any alias commands found in the string.
 */
static void replaceAliases(yyscan_t yyscanner,const QCString &s)
{
  QCString result = resolveAliasCmd(s);
  //printf("replaceAliases(%s)->'%s'\n",s,result.data());
  copyToOutput(yyscanner,result.data(),result.length());
}


static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yy_size_t bytesInBuf = yyextra->inBuf->curPos()-yyextra->inBufPos;
  yy_size_t bytesToCopy = std::min(max_size,bytesInBuf);
  memcpy(buf,yyextra->inBuf->data()+yyextra->inBufPos,bytesToCopy);
  yyextra->inBufPos+=bytesToCopy;
  return bytesToCopy;
}

static void replaceComment(yyscan_t yyscanner,int offset)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->mlBrief || yyextra->skip)
  {
    copyToOutput(yyscanner,yytext,(int)yyleng);
  }
  else
  {
    //printf("replaceComment(%s)\n",yytext);
    int i=computeIndent(&yytext[offset]);
    if (i==yyextra->blockHeadCol)
    {
      replaceCommentMarker(yyscanner,yytext,(int)yyleng);
    }
    else
    {
      copyToOutput(yyscanner," */",3);
      for (i=(int)yyleng-1;i>=0;i--) unput(yytext[i]);
      yyextra->inSpecialComment=FALSE;
      BEGIN(Scan);
    }
  }
}

/*! This function does three things:
 *  -# It converts multi-line C++ style comment blocks (that are aligned)
 *     to C style comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO).
 *  -# It replaces aliases with their definition (see ALIASES)
 *  -# It handles conditional sections (cond...endcond blocks)
 */
void convertCppComments(BufStr *inBuf,BufStr *outBuf,const QCString &fileName)
{
  yyscan_t yyscanner;
  commentcnvYY_state extra;
  commentcnvYYlex_init_extra(&extra,&yyscanner);
#ifdef FLEX_DEBUG
  commentcnvYYset_debug(1,yyscanner);
#endif
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("convertCppComments(%s)\n",fileName);
  yyextra->inBuf    = inBuf;
  yyextra->outBuf   = outBuf;
  yyextra->inBufPos = 0;
  yyextra->col      = 0;
  yyextra->mlBrief = Config_getBool(MULTILINE_CPP_IS_BRIEF);
  yyextra->skip     = FALSE;
  yyextra->fileName = fileName;
  yyextra->lang = getLanguageFromFileName(fileName);
  yyextra->pythonDocString = FALSE;
  yyextra->lineNr   = 1;
  while (!yyextra->condStack.empty()) yyextra->condStack.pop();
  clearCommentStack(yyscanner);
  yyextra->vhdl = FALSE;

  printlex(yy_flex_debug, TRUE, __FILE__, qPrint(fileName));
  yyextra->isFixedForm = FALSE;
  if (yyextra->lang==SrcLangExt_Fortran)
  {
    FortranFormat fmt = convertFileNameFortranParserCode(fileName);
    yyextra->isFixedForm = recognizeFixedForm(QCString(inBuf->data()),fmt);
  }

  if (yyextra->lang==SrcLangExt_Markdown)
  {
    yyextra->nestingCount=0;
    BEGIN(CComment);
    yyextra->commentStack.push(yyextra->lineNr);
  }
  else
  {
    BEGIN(Scan);
  }
  yylex(yyscanner);
  while (!yyextra->condStack.empty())
  {
    const commentcnvYY_CondCtx &ctx = yyextra->condStack.top();
    QCString sectionInfo(" ");
    if (ctx.sectionId!=" ") sectionInfo.sprintf(" with label '%s' ",ctx.sectionId.stripWhiteSpace().data());
    warn(yyextra->fileName,ctx.lineNr,"Conditional section%sdoes not have "
	"a corresponding \\endcond command within this file.",sectionInfo.data());
    yyextra->condStack.pop();
  }
  if (yyextra->nestingCount>0 && yyextra->lang!=SrcLangExt_Markdown && yyextra->lang!=SrcLangExt_Fortran)
  {
    QCString tmp("(probable line reference: ");
    bool first = TRUE;
    while (!yyextra->commentStack.empty())
    {
      int lineNr = yyextra->commentStack.top();
      if (!first) tmp += ", ";
      tmp += QCString().setNum(lineNr);
      first = FALSE;
      yyextra->commentStack.pop();
    }
    tmp += ")";
    warn(yyextra->fileName,yyextra->lineNr,"Reached end of file while still inside a (nested) comment. "
        "Nesting level %d %s",yyextra->nestingCount,tmp.data());
  }
  yyextra->nestingCount = 0;
  if (Debug::isFlagSet(Debug::CommentCnv))
  {
    yyextra->outBuf->at(yyextra->outBuf->curPos())='\0';
    Debug::print(Debug::CommentCnv,0,"-----------\nCommentCnv: %s\n"
                 "output=[\n%s]\n-----------\n",qPrint(fileName),yyextra->outBuf->data()
                );
  }
  printlex(yy_flex_debug, FALSE, __FILE__, qPrint(fileName));
  commentcnvYYlex_destroy(yyscanner);
}


//----------------------------------------------------------------------------

#if USE_STATE2STRING
#include "commentcnv.l.h"
#endif

