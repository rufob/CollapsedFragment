#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer pycodeYY_create_buffer

    #define yy_delete_buffer pycodeYY_delete_buffer

    #define yy_scan_buffer pycodeYY_scan_buffer

    #define yy_scan_string pycodeYY_scan_string

    #define yy_scan_bytes pycodeYY_scan_bytes

    #define yy_init_buffer pycodeYY_init_buffer

    #define yy_flush_buffer pycodeYY_flush_buffer

    #define yy_load_buffer_state pycodeYY_load_buffer_state

    #define yy_switch_to_buffer pycodeYY_switch_to_buffer

    #define yypush_buffer_state pycodeYYpush_buffer_state

    #define yypop_buffer_state pycodeYYpop_buffer_state

    #define yyensure_buffer_stack pycodeYYensure_buffer_stack

    #define yylex pycodeYYlex

    #define yyrestart pycodeYYrestart

    #define yylex_init pycodeYYlex_init

    #define yylex_init_extra pycodeYYlex_init_extra

    #define yylex_destroy pycodeYYlex_destroy

    #define yyget_debug pycodeYYget_debug

    #define yyset_debug pycodeYYset_debug

    #define yyget_extra pycodeYYget_extra

    #define yyset_extra pycodeYYset_extra

    #define yyget_in pycodeYYget_in

    #define yyset_in pycodeYYset_in

    #define yyget_out pycodeYYget_out

    #define yyset_out pycodeYYset_out

    #define yyget_leng pycodeYYget_leng

    #define yyget_text pycodeYYget_text

    #define yyget_lineno pycodeYYget_lineno

    #define yyset_lineno pycodeYYset_lineno

        #define yyget_column pycodeYYget_column

        #define yyset_column pycodeYYset_column

    #define yywrap pycodeYYwrap

    #define yyalloc pycodeYYalloc

    #define yyrealloc pycodeYYrealloc

    #define yyfree pycodeYYfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pycodeYYrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pycodeYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void pycodeYYrestart ( FILE *input_file , yyscan_t yyscanner );
void pycodeYY_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE pycodeYY_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void pycodeYY_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void pycodeYY_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void pycodeYYpush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void pycodeYYpop_buffer_state ( yyscan_t yyscanner );

static void pycodeYYensure_buffer_stack ( yyscan_t yyscanner );
static void pycodeYY_load_buffer_state ( yyscan_t yyscanner );
static void pycodeYY_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER pycodeYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE pycodeYY_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE pycodeYY_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE pycodeYY_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *pycodeYYalloc ( yy_size_t , yyscan_t yyscanner );
void *pycodeYYrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void pycodeYYfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer pycodeYY_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pycodeYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pycodeYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pycodeYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pycodeYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pycodeYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1090] =
    {   0,
    16425,16425,   66,   66,   75,   73,   74,   72,   73,   74,
       71,   74,   65,   73,   74,   70,   73,   74,   64,   73,
       74,   73,   74,   73,   74,   73,   74,   44,   71,   74,
       73,   74,   29,   43,   73,   74,   29,   43,   73,   74,
       29,   43,   73,   74,   29,   43,   73,   74,   29,   43,
       73,   74,   29,   43,   73,   74,   29,   43,   73,   74,
       29,   43,   73,   74,   29,   43,   73,   74,   29,   43,
       73,   74,   29,   43,   73,   74,   29,   43,   73,   74,
       29,   43,   73,   74,   29,   43,   73,   74,   29,   43,
       73,   74,   29,   43,   73,   74,   29,   43,   73,   74,

       29,   43,   73,   74,   29,   43,   73,   74,   29,   43,
       73,   74,   29,   43,   73,   74,   29,   43,   73,   74,
       29,   43,   73,   74,   29,   43,   73,   74,   72,   73,
       74,   19,   73,   74,   18,   73,   74,   18,   73,   74,
       18,   73,   74,   18,   73,   74,   21,   73,   74,   20,
       72,   73,   74,   23,   71,   74,   21,   65,   73,   74,
       21,   70,   73,   74,   21,   64,   73,   74,   22,   73,
       74,   20,   21,   73,   74,   24,   73,   74,   21,   73,
       74,   21,   73,   74,   21,   73,   74,   21,   73,   74,
       14,   73,   74,   14,   73,   74,   14,   73,   74,   14,

       73,   74,   15,   72,   73,   74,   15,   73,   74,   17,
       73,   74,   16,   73,   74,   16,   73,   74,   16,   73,
       74,   16,   73,   74,   42,   71,   74,   29,   73,   74,
       29,   73,   74,   29,   73,   74,   29,   73,   74,   29,
       73,   74,   29,   73,   74,   29,   73,   74,   29,   73,
       74,   29,   73,   74,   29,   73,   74,   29,   73,   74,
       29,   73,   74,   29,   73,   74,   29,   73,   74,   29,
       73,   74,   29,   73,   74,   29,   73,   74,   29,   73,
       74,   29,   73,   74,   29,   73,   74,   29,   73,   74,
       29,   73,   74,   29,   73,   74,   29,   73,   74,   38,

       72,   73,   74,   37,   71,   74,   30,   72,   73,   74,
       36,   71,   74,   70,   73,   74,   34,   73,   74,   34,
       73,   74,   34,   73,   74,   34,   73,   74,   34,   73,
       74,   34,   73,   74,   34,   73,   74,   34,   73,   74,
       34,   73,   74,   34,   73,   74,   34,   73,   74,   34,
       73,   74,   34,   73,   74,   34,   73,   74,   34,   73,
       74,   34,   73,   74,   34,   73,   74,   34,   73,   74,
       34,   73,   74,   34,   73,   74,   34,   73,   74,   34,
       73,   74,   72,   73,   74,16423,   40,   71,   74, 8233,
       73,   74, 8233,   70,   73,   74, 8233,   73,   74, 8233,

       73,   74, 8233,   73,   74,   49,   50,   73,   74,   49,
       50,   72,   73,   74,   50,   65,   73,   74,   49,   50,
       70,   73,   74,   48,   50,   64,   73,   74,   49,   50,
       73,   74,   49,   50,   73,   74,   50,   73,   74,   49,
       50,   73,   74,   55,   56,   73,   74,   55,   56,   72,
       73,   74,   54,   56,   65,   73,   74,   55,   56,   70,
       73,   74,   56,   64,   73,   74,   55,   56,   73,   74,
       55,   56,   73,   74,   56,   73,   74,   55,   56,   73,
       74,   59,   61,   73,   74,   59,   61,   72,   73,   74,
       59,   60,   71,   74,   59,   61,   65,   73,   74,   59,

       61,   70,   73,   74,   59,   61,   64,   73,   74,   59,
       61,   73,   74,   59,   61,   73,   74,   61,   73,   74,
       59,   61,   73,   74,   66,   73,   74,   66,   72,   73,
       74,   68,   71,   74,   65,   66,   73,   74,   66,   70,
       73,   74,   64,   66,   73,   74,   66,   73,   74,   66,
       73,   74,   66,   73,   74,   72,   70,   69,   70,   65,
       64,   13,   27,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   25,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   26,   29,

       43,   29,   43,   26,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   72,   19,
       18,   18,   21,   20,   72,   21,   21,   70,   21,   69,
       70,   21,   21,   21,   65,   21,   64,   21,   14,   14,
       15,   72,   16,   16,   29,   29,   29,   29,   29,   29,
       25,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   26,   29,   29,   26,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   38,   72,
       37,   30,   72,   35,   69,   70,   34,   34,   34,   34,

       34,   32,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   33,   34,   34,   33,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   72,16423,
       40, 8231,   49,   49,   72,   49,   70,   49,   69,   70,
       65,   49,   46,   46,   45,   55,   55,   72,   55,   70,
       55,   69,   70,   64,   55,   52,   52,   51,   59,   59,
       59,   66,   66,   72,   67,   66,   66,   70,   66,   69,
       70,   66,   65,   66,   64,   66,   66,   63,   69,   70,
       62,   13,   28,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   43,   29,

       43,   25,   29,   43,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   21,   63,   21,   69,
       70,   21,   62,   16,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   25,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   34,   34,   34,   34,   34,   34,   34,   32,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   47,   63,   49,   69,   70,

       55,   69,   70,   53,   62,   57,   63,   58,   62,   63,
       66,   66,   69,   70,   62,   66,   13,   13,   28,   29,
       43,    4,   29,   43,   25,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,    1,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
       29,   43,   29,   43,   29,   43,   29,   43,   29,   43,
       29,    4,   29,   25,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   31,   33,   34,   34,   34,   34,   34,   34,

       13,   29,   43,   25,   29,   43,   25,   29,   43,   12,
       28,16393,16395,   29,   43,   29,   43,   29,   43,   29,
       43,   29,   43,   29,   43,   29,   43,   29,   25,   29,
       25,   29,   29,   29,   29,   29,   29,   29,   29,   34,
       34,   34,   34,   34,   34,   34,   34,    3,   10,   27,
       12,   28,16393,16395,   29,   43,   29,   43,    8,   28,
    16389,16391,   29,   29,   34,   34, 8203,   28,   29,   43,
        6,   27,    8,   28,16389,16391,   29,   34, 8201,   27,
     8203,   28, 8199,   28, 8197,   27, 8199,   28,    2
    } ;

static const flex_int16_t yy_accept[575] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    4,    5,    6,
        8,   11,   13,   16,   19,   22,   24,   26,   28,   31,
       33,   37,   41,   45,   49,   53,   57,   61,   65,   69,
       73,   77,   81,   85,   89,   93,   97,  101,  105,  109,
      113,  117,  121,  125,  129,  132,  135,  138,  141,  144,
      147,  150,  154,  157,  161,  165,  169,  172,  176,  179,
      182,  185,  188,  191,  194,  197,  200,  203,  207,  210,
      213,  216,  219,  222,  225,  228,  231,  234,  237,  240,

      243,  246,  249,  252,  255,  258,  261,  264,  267,  270,
      273,  276,  279,  282,  285,  288,  291,  294,  297,  300,
      304,  307,  311,  314,  317,  320,  323,  326,  329,  332,
      335,  338,  341,  344,  347,  350,  353,  356,  359,  362,
      365,  368,  371,  374,  377,  380,  383,  387,  390,  393,
      397,  400,  403,  406,  410,  415,  419,  424,  429,  433,
      437,  440,  444,  448,  453,  458,  463,  467,  471,  475,
      478,  482,  486,  491,  495,  500,  505,  510,  514,  518,
      521,  525,  528,  532,  535,  539,  543,  547,  550,  553,
      556,  557,  557,  558,  560,  560,  561,  562,  562,  563,

      564,  564,  566,  568,  570,  572,  574,  576,  579,  581,
      583,  585,  587,  589,  591,  593,  595,  597,  599,  602,
      604,  607,  609,  611,  613,  615,  617,  619,  621,  623,
      625,  627,  629,  630,  631,  632,  633,  634,  636,  637,
      639,  642,  643,  644,  646,  648,  649,  650,  651,  653,
      653,  654,  655,  656,  657,  658,  659,  660,  661,  663,
      664,  665,  666,  667,  668,  669,  670,  671,  672,  673,
      675,  676,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  689,  691,  692,  694,  697,  698,  699,
      700,  701,  702,  704,  705,  706,  707,  708,  709,  710,

      711,  712,  713,  714,  716,  717,  719,  720,  721,  722,
      723,  724,  725,  726,  727,  728,  729,  731,  732,  733,
      734,  736,  736,  738,  741,  742,  743,  744,  745,  746,
      747,  749,  751,  754,  754,  755,  756,  757,  758,  759,
      760,  761,  762,  763,  765,  765,  766,  767,  769,  772,
      773,  775,  777,  778,  779,  781,  782,  782,  782,  783,
      784,  786,  788,  790,  792,  794,  796,  798,  800,  802,
      805,  807,  809,  811,  813,  815,  817,  819,  821,  823,
      825,  827,  829,  831,  833,  835,  837,  839,  842,  844,
      845,  846,  847,  848,  849,  850,  851,  852,  853,  854,

      856,  857,  858,  859,  860,  861,  862,  863,  864,  865,
      866,  867,  868,  869,  870,  871,  872,  873,  874,  875,
      876,  877,  878,  879,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  893,  894,  895,  896,
      898,  901,  901,  904,  906,  906,  908,  910,  912,  915,
      917,  917,  918,  919,  920,  922,  925,  928,  930,  932,
      934,  936,  936,  938,  939,  941,  943,  945,  947,  949,
      951,  953,  955,  957,  959,  961,  962,  964,  966,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,
      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,

      988,  989,  990,  991,  992,  993,  996,  997,  998,  999,
     1000, 1001, 1002, 1004, 1007, 1010, 1014, 1016, 1018, 1020,
     1022, 1024, 1026, 1028, 1028, 1029, 1031, 1033, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1048, 1049, 1051, 1051, 1055, 1057, 1059,
     1063, 1064, 1065, 1066, 1067, 1067, 1069, 1071, 1073, 1073,
     1077, 1078, 1079, 1079, 1081, 1081, 1083, 1085, 1085, 1087,
     1087, 1089, 1090, 1090
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    4,    7,    8,
        9,    4,    4,   10,    4,   11,    4,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    4,    4,
        4,    4,    1,   14,   15,   15,   15,   15,   15,   16,
       15,   15,   15,   15,   15,   15,   15,   17,   15,   15,
       15,   18,   15,   19,   20,   15,   15,   15,   15,   15,
        4,   21,    4,    1,   22,    4,   23,   24,   25,   26,

       27,   28,   29,   30,   31,   15,   32,   33,   34,   35,
       36,   37,   15,   38,   39,   40,   41,   15,   42,   43,
       44,   15,    4,    4,    4,    4,    1,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15
    } ;

static const YY_CHAR yy_meta[45] =
    {   0,
        1,    2,    3,    4,    5,    4,    5,    6,    2,    4,
        7,    8,    2,    1,    9,    9,    9,    9,    9,    9,
       10,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9
    } ;

static const flex_int16_t yy_base[621] =
    {   0,
        0,   40,   81,    0,  125,    0,  169,    0,  213,    0,
      257,    0,  301,    0,    6,    8,  345,    0,  389,  430,
      470,  510,  550,  590,  630,  670,  710,  750, 1842, 1843,
     1839, 1843, 1835, 1833, 1831,    7,   10,   14, 1843,    0,
        5,   14,   15,   22,   23,  403,   28,   42,  389,   46,
      391,  407,  390,  418,   48,  431,  409,  443,  451,  452,
      472,  487,  476,  478,   47, 1843,    0,   57,  496,  522,
        0, 1835, 1843, 1831,   66, 1828, 1843,    0, 1843,  791,
      812,    6,  375,    0,  399,  528,  531, 1832, 1843, 1843,
     1822,  513,  536,  568, 1843,   58,  474,  485,  554,  534,

      576,  574,  569,  590,  591,  609,  608,  511,  619,  592,
      613,  632,  651,  656,  614,  649,  687,  670,  688,   74,
     1843, 1830, 1843, 1825,    0, 1807,  495, 1791,  702,  377,
     1790,  428, 1800,  422,  501, 1793,  698, 1802, 1788, 1785,
      540,  679, 1784,  716,  439, 1790,  587, 1843, 1843, 1814,
      675,  724,  731,    0, 1817, 1813,  738, 1779,  717,  756,
      602,  766,    0, 1774, 1761,  759, 1749,  734,  771,  653,
      772, 1843, 1744, 1843, 1727, 1716, 1705,  753,  820,    0,
      823,    0, 1700,  632, 1677, 1669, 1666,  776,  824,  827,
     1651, 1641,    0,    0, 1637, 1631, 1610,  780,  515, 1843,

        0,  556,  739,  658,  795,  832,  838,  813,  836,  843,
      800,  842,  848,  860,  861,  865,  866,  870,  872,  878,
      880,  882,  884,  886,  890,  896,  897,  901,  902,  909,
      903,  911,  695, 1843,    0,  921,    0, 1612, 1608,  939,
      942, 1597,  924, 1592, 1587,    0,    0,  925, 1591,    0,
     1567,  928,  934,  945,  946,  950,  955,  956,  957,  961,
      963,  962,  972,  968,  979,  981,  987,  995,  997, 1001,
     1002, 1003, 1007, 1009, 1011, 1013, 1015, 1019, 1021, 1026,
     1027, 1032, 1034,  797, 1843, 1512,    0,    0, 1480, 1471,
      970, 1485,   26, 1483, 1486, 1472, 1477,  519, 1479, 1466,

     1462, 1449, 1441,    0, 1417,    0, 1419, 1408, 1397, 1403,
     1401, 1365, 1360, 1372, 1346, 1352,  812, 1843, 1843,    0,
     1375, 1367, 1046, 1050, 1365, 1055, 1843,  897, 1843,    0,
     1363, 1058, 1059, 1348, 1338, 1068, 1843,  982, 1843, 1339,
     1327, 1843,    0, 1319,  708, 1843, 1312,    0,    0, 1308,
     1308, 1288, 1069, 1843,    0, 1843, 1274,    0, 1070, 1074,
     1075, 1076, 1080, 1081, 1082, 1086, 1087, 1088, 1093, 1104,
     1094, 1102, 1108, 1113, 1112, 1117, 1119, 1123, 1129, 1131,
     1137, 1141, 1142, 1146, 1148, 1150,    0, 1172,    0, 1249,
     1152, 1161, 1176, 1178, 1182, 1154, 1156, 1186, 1188, 1190,

     1196, 1198, 1200, 1207, 1202, 1208, 1212, 1218, 1223, 1229,
     1227, 1233, 1235, 1239, 1241, 1243, 1217, 1218, 1212, 1198,
     1199, 1182, 1174,    0, 1184, 1175, 1173, 1152, 1139, 1147,
     1115, 1120, 1104, 1103, 1093, 1077, 1078, 1070, 1044, 1843,
     1248,  991, 1252, 1843, 1045, 1843, 1843,    0,    0,    0,
     1060, 1843, 1250, 1257, 1259, 1267, 1269, 1271, 1273, 1279,
     1277,    0, 1281, 1066, 1283, 1285, 1291, 1289, 1293, 1295,
     1297, 1299, 1314, 1315, 1320, 1321, 1322, 1328, 1330, 1332,
     1339, 1341, 1343, 1345, 1350, 1352, 1351, 1358, 1356, 1365,
     1370, 1377, 1379, 1383, 1029, 1014, 1011,  996,  920,  918,

      899,  890,  895,  837,  841,    0,  815,  821,  782,  780,
      767, 1387, 1389, 1391, 1399, 1403, 1404, 1405, 1409, 1410,
     1411, 1415, 1417,    0, 1416, 1429, 1433, 1422, 1438, 1439,
     1447, 1451, 1452, 1453,  746,  747,  735,  734,  713,  695,
      704,  683,  858,  702, 1843,    0, 1457, 1458, 1459, 1463,
     1465, 1471,  644,  621,  618, 1473, 1475, 1843,    0, 1479,
     1481,  602,  584, 1843,    0, 1485, 1486,  574, 1843,    0,
     1487,  502, 1843, 1515, 1525, 1535, 1545, 1555, 1565, 1575,
      490, 1580, 1582, 1591, 1601, 1611, 1614, 1617, 1621, 1623,
     1631, 1641, 1650, 1660, 1670, 1679, 1689, 1699, 1709, 1719,

     1729, 1734,  440, 1743,  431, 1753, 1763, 1773, 1783,  419,
     1788, 1792,  410, 1796,  396,   31, 1800, 1804,   26, 1808
    } ;

static const flex_int16_t yy_def[621] =
    {   0,
      574,  574,  573,    3,  573,    5,  573,    7,  573,    9,
      573,   11,  573,   13,    2,    2,  573,   17,  575,  575,
      576,  576,  577,  577,  578,  578,  579,  579,  573,  573,
      573,  573,  573,  580,  573,  573,  573,  573,  573,  581,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  573,  573,  583,  583,  583,  583,
      584,  573,  573,  584,  585,  584,  573,  584,  573,  586,
      586,   81,   81,  587,  587,  587,  587,  573,  573,  573,
      588,  588,  588,  588,  573,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  573,
      573,  573,  573,  580,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  591,  573,  573,  580,
      573,  573,  573,  592,  592,  573,  593,  573,  592,  592,
      594,  592,  595,  595,  573,  596,  573,  595,  595,  597,
      595,  573,  573,  573,  573,  580,  573,  573,  573,  598,
      573,  599,  599,  573,  599,  600,  599,  599,  599,  599,
      573,  573,  580,  601,  573,  573,  573,  573,  602,  573,

      603,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  573,  573,  583,  583,  584,  573,  584,  585,
      604,  584,   81,  584,  584,   81,  587,  587,  573,  605,
      588,  588,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  573,  573,  573,  601,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  591,  573,  573,  592,
      592,  573,  593,  606,  573,  592,  573,  573,  573,  595,
      595,  596,  607,  573,  573,  595,  573,  573,  573,  573,
      573,  573,  599,  599,  573,  573,  599,  600,  608,  599,
      599,  599,  599,  573,  601,  573,  609,  610,  602,  611,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  584,  604,  584,  588,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  573,
      606,  573,  607,  573,  573,  573,  573,  599,  608,  599,
      609,  573,  612,  611,  582,  582,  582,  582,  582,  582,
      582,  613,  582,  573,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  590,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  612,  582,  582,  582,  614,  582,  582,  582,  582,
      582,  582,  582,  615,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  590,  590,  590,  590,  590,  590,
      590,  590,  573,  573,  573,  616,  614,  582,  582,  617,
      589,  589,  590,  590,  573,  618,  582,  573,  619,  617,
      589,  590,  573,  573,  616,  618,  620,  573,  573,  619,
      620,  573,    0,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573
    } ;

static const flex_int16_t yy_nxt[1888] =
    {   0,
      573,   31,   32,  573,   33,   34,   35,  120,  121,  120,
      121,  196,  200,  197,  196,  201,  197,   36,  196,   37,
      197,  200,  200,  246,  201,  201,  196,  198,  197,  200,
      200,  198,  201,  201,  567,  200,  203,   36,  201,  556,
       38,   31,   32,  246,   33,   34,   35,  198,  233,  200,
      204,  198,  201,  200,  234,  200,  201,   36,  201,   37,
      205,  196,  207,  197,  419,  200,  208,  193,  201,  420,
      222,  241,  212,  193,  193,  284,  285,   36,  193,  209,
       38,   30,   31,   39,   30,   33,   34,   35,   30,   30,
       30,   30,   30,   30,   40,   41,   42,   43,   44,   45,

       46,   30,   41,   47,   48,   49,   50,   51,   52,   53,
       41,   54,   41,   55,   41,   56,   57,   58,   59,   60,
       61,   62,   63,   41,   64,   30,   65,   32,   30,   33,
       34,   35,   66,   30,   30,   30,   30,   30,   30,   67,
       67,   67,   68,   67,   69,   30,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   68,   67,   67,   70,   67,   67,   67,   71,
       72,   73,   71,   74,   75,   76,   30,   77,   78,   71,
       71,   79,   71,   80,   80,   80,   81,   80,   82,   71,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   81,   80,   80,   83,
       80,   80,   80,   30,   31,   32,   30,   33,   34,   35,
       30,   30,   30,   30,   30,   30,   30,   84,   84,   84,
       85,   84,   86,   30,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   84,   84,   87,   84,   84,   84,   30,   88,   32,
       30,   33,   34,   35,   89,   89,   89,   30,   30,   90,
       30,   91,   91,   91,   92,   91,   93,   30,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   91,   91,   94,   91,   91,

       91,   30,   31,   95,   30,   33,   34,   35,   30,   30,
       30,   30,   30,   30,   40,   96,   97,   98,   99,  100,
      101,   30,   96,  102,  103,  104,  105,  106,  107,  108,
       96,  109,   96,  110,   96,  111,  112,  113,  114,  115,
      116,  117,  118,   96,  119,   30,  122,  123,   30,   33,
      124,   35,   30,   30,   30,   30,   30,   30,   30,  125,
      126,  125,  127,  128,  129,   30,  125,  130,  131,  132,
      133,  134,  135,  136,  125,  137,  125,  138,  125,  139,
      140,  141,  142,  125,  143,  144,  145,  125,  146,   30,
      147,  148,  246,   33,  150,   35,  200,  200,  200,  201,

      201,  201,   30,  196,  550,  197,  151,  196,  152,  197,
      200,  292,  246,  201,  200,  293,  200,  201,  516,  201,
      206,  210,  218,  213,  211,  200,  151,  453,  201,  153,
       30,  147,  148,  214,   33,  150,   35,  215,  200,  390,
      206,  201,  216,   30,  217,  219,  221,  151,  360,  152,
      200,  220,  221,  201,  298,  196,  221,  197,  200,  200,
      295,  201,  201,  296,  299,  224,  223,  151,  314,  315,
      153,  155,   32,  226,  156,  157,  158,  227,  228,  200,
      225,  200,  201,  200,  201,  200,  201,  159,  201,  160,
      161,  196,  200,  197,  200,  201,  254,  201,  199,  196,

      196,  197,  197,  572,  206,  230,  231,  159,  232,  229,
      162,  155,   32,  236,  156,  157,  158,  196,  200,  197,
      255,  201,  357,  250,  206,  358,  196,  159,  197,  160,
      161,  300,  196,  236,  197,  196,  301,  197,  302,  236,
      196,  200,  197,  269,  201,  248,  250,  159,  248,  425,
      162,  164,   32,  252,  165,  166,  167,  426,  196,  236,
      197,  200,  309,  200,  201,  248,  201,  168,  248,  169,
      170,  256,  196,  252,  197,  572,  200,  310,  250,  201,
      196,  200,  197,  200,  201,  252,  201,  168,  317,  318,
      171,  164,   32,  257,  165,  166,  167,  200,  200,  200,

      201,  201,  201,  328,  329,  252,  260,  168,  258,  169,
      170,  568,  259,  257,  273,  200,  200,  263,  201,  201,
      200,  200,  261,  201,  201,  262,  200,  168,  306,  201,
      171,  173,  174,  345,  175,  176,  177,  346,  266,  200,
      279,  264,  201,  267,  563,  268,  270,  178,  274,  179,
      180,  265,  271,  272,  338,  339,  200,  272,  200,  201,
      196,  201,  197,  200,  306,  200,  201,  178,  201,  272,
      181,  173,  174,  275,  175,  176,  177,  200,  277,  196,
      201,  197,  278,  196,  562,  197,  280,  178,  276,  179,
      180,  196,  362,  197,  200,  200,  233,  201,  201,  281,

      282,  311,  234,  544,  257,  312,  196,  178,  197,  345,
      181,  183,  184,  346,  185,  186,  187,  306,  283,  291,
      196,  325,  197,  197,  257,  304,  424,  188,  196,  189,
      197,  305,  306,  291,  424,  196,  306,  197,  196,  291,
      335,  198,  193,  324,  193,  424,  200,  188,  198,  201,
      190,  183,  184,  291,  185,  186,  187,  196,  193,  197,
      325,  198,  197,  193,  333,  193,  554,  188,  198,  189,
      325,  361,  197,  326,  306,  196,  196,  335,  335,  193,
      351,  553,  352,  326,  196,  424,  197,  188,  336,  336,
      190,  237,  306,  326,  237,  237,  237,  237,  284,  285,

      237,  237,  200,  326,  237,  201,  306,  200,  336,  336,
      201,  237,  237,  317,  318,  237,  244,  237,  245,  542,
      200,  237,  237,  201,  196,  237,  197,  196,  351,  197,
      352,  351,  237,  352,  369,  363,  196,  198,  197,  200,
      198,  353,  201,  200,  353,  200,  201,  306,  201,  200,
      200,  364,  201,  201,  306,  200,  365,  198,  201,  543,
      198,  353,  366,  221,  353,  367,  541,  200,  200,  370,
      201,  201,  200,  200,  540,  201,  201,  200,  371,  200,
      201,  368,  201,  555,  373,  200,  372,  200,  201,  200,
      201,  200,  201,  200,  201,  374,  201,  200,  442,  329,

      201,  375,  221,  200,  200,  376,  201,  201,  200,  200,
      200,  201,  201,  201,  377,  378,  200,  539,  200,  201,
      380,  201,  538,  221,  379,  196,  381,  197,  237,  196,
      237,  197,  196,  383,  197,  537,  382,  386,  250,  384,
      193,  200,  385,  355,  201,  221,  193,  193,  536,  355,
      355,  193,  200,  200,  355,  201,  201,  200,  424,  196,
      201,  197,  200,  200,  200,  201,  201,  201,  200,  200,
      200,  201,  201,  201,  196,  200,  197,  391,  201,  200,
      392,  272,  201,  445,  339,  397,  200,  396,  200,  201,
      393,  201,  442,  329,  200,  394,  399,  201,  401,  400,

      395,  398,  200,  403,  200,  201,  402,  201,  200,  200,
      200,  201,  201,  201,  200,  404,  200,  201,  200,  201,
      200,  201,  200,  201,  272,  201,  200,  306,  200,  201,
      405,  201,  406,  200,  200,  424,  201,  201,  407,  200,
      408,  200,  201,  410,  201,  411,  445,  339,  272,  409,
      193,  535,  193,  413,  355,  424,  355,  414,  412,  325,
      416,  197,  193,  355,  193,  355,  193,  464,  452,  272,
      355,  415,  196,  351,  335,  352,  511,  357,  193,  355,
      358,  200,  200,  200,  201,  201,  201,  200,  200,  200,
      201,  201,  201,  200,  200,  200,  201,  201,  462,  424,

      200,  200,  456,  201,  201,  464,  457,  458,  460,  200,
      510,  200,  201,  455,  201,  200,  459,  509,  201,  200,
      200,  221,  201,  201,  200,  461,  200,  201,  221,  201,
      200,  508,  463,  201,  465,  466,  200,  507,  200,  201,
      467,  201,  506,  505,  200,  457,  469,  201,  200,  200,
      504,  201,  201,  200,  468,  200,  201,  200,  201,  200,
      201,  200,  201,  200,  201,  470,  201,  221,  200,  473,
      503,  201,  424,  355,  502,  471,  481,  457,  474,  355,
      355,  472,  475,  200,  355,  200,  201,  477,  201,  200,
      476,  464,  201,  200,  482,  200,  462,  200,  201,  501,

      201,  306,  478,  200,  479,  200,  201,  200,  201,  200,
      201,  306,  201,  500,  200,  200,  480,  201,  201,  200,
      499,  498,  201,  272,  272,  200,  484,  483,  201,  485,
      200,  486,  497,  201,  200,  478,  200,  201,  496,  201,
      200,  488,  200,  201,  424,  201,  200,  487,  200,  201,
      200,  201,  355,  201,  355,  495,  355,  357,  355,  250,
      358,  272,  492,  489,  200,  490,  200,  201,  355,  201,
      478,  493,  355,  491,  200,  494,  200,  201,  200,  201,
      200,  201,  452,  201,  200,  457,  200,  201,  200,  201,
      200,  201,  200,  201,  350,  201,  200,  514,  200,  201,

      200,  201,  200,  201,  200,  201,  200,  201,  513,  201,
      221,  517,  347,  520,  450,  515,  448,  519,  522,  518,
      344,  200,  200,  221,  524,  201,  521,  200,  200,  200,
      201,  201,  201,  447,  221,  200,  523,  200,  201,  200,
      201,  221,  201,  446,  334,  221,  200,  478,  200,  201,
      200,  201,  200,  201,  444,  201,  526,  200,  200,  200,
      201,  201,  201,  200,  331,  200,  201,  525,  201,  322,
      272,  440,  200,  528,  531,  201,  321,  200,  439,  527,
      201,  529,  530,  533,  200,  438,  200,  524,  532,  201,
      200,  272,  543,  201,  357,  272,  200,  358,  200,  201,

      544,  201,  437,  306,  436,  272,  200,  534,  272,  201,
      545,  200,  200,  546,  201,  201,  200,  200,  200,  201,
      201,  201,  200,  200,  200,  201,  201,  201,  457,  200,
      543,  435,  201,  434,  544,  433,  200,  457,  548,  201,
      200,  549,  457,  201,  221,  200,  200,  306,  201,  201,
      457,  221,  432,  431,  200,  478,  551,  201,  200,  200,
      200,  201,  201,  201,  545,  200,  200,  546,  201,  201,
      558,  552,  200,  559,  478,  201,  430,  272,  200,  478,
      564,  201,  200,  565,  429,  201,  558,  272,  200,  559,
      478,  201,  564,  569,  569,  565,  570,  570,  557,  306,

      428,  221,  221,  427,  424,  561,  423,  272,  422,  421,
      306,  418,  417,  286,  272,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  193,  193,  250,  193,  193,
      193,  193,  193,  193,  193,  202,  202,  202,  202,  235,
      235,  237,  249,  242,  237,  237,  239,  237,  237,  237,

      237,  240,  240,  389,  240,  240,  240,  240,  240,  240,
      240,  243,  387,  238,  243,  243,  195,  243,  243,  243,
      243,  247,  247,  251,  251,  251,  253,  253,  253,  253,
      288,  288,  319,  319,  319,  192,  319,  319,  319,  319,
      319,  320,  320,  356,  320,  354,  320,  320,  320,  320,
      323,  323,  191,  323,  323,  323,  323,  323,  323,  323,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      330,  330,  350,  330,  349,  330,  330,  330,  330,  332,
      332,  347,  332,  332,  332,  332,  332,  332,  332,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  342,

      342,  344,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  341,  343,  343,  343,  343,  343,  343,  343,  348,
      348,  194,  348,  348,  348,  348,  348,  348,  348,  355,
      355,  340,  355,  355,  355,  355,  355,  355,  355,  359,
      359,  359,  359,  388,  388,  191,  388,  388,  388,  388,
      388,  388,  388,  441,  441,  334,  441,  441,  441,  441,
      441,  441,  441,  443,  443,  192,  443,  443,  443,  443,
      443,  443,  443,  449,  449,  331,  449,  449,  449,  449,
      449,  449,  449,  451,  451,  195,  451,  451,  451,  451,
      451,  451,  451,  454,  454,  454,  454,  512,  512,  512,

      512,  547,  547,  547,  547,  560,  560,  560,  560,  566,
      566,  566,  566,  571,  571,  571,  571,  322,  321,  194,
      316,  313,  306,  308,  307,  303,  297,  294,  290,  289,
      287,  286,  250,  249,  242,  239,  238,  195,  194,  192,
      191,  573,   29,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573
    } ;

static const flex_int16_t yy_chk[1888] =
    {   0,
        0,    1,    1,    0,    1,    1,    1,   15,   15,   16,
       16,   36,   41,   36,   37,   41,   37,    1,   38,    1,
       38,   42,   43,   82,   42,   43,   44,   37,   44,   44,
       45,   38,   44,   45,  619,   47,   42,    1,   47,  616,
        1,    2,    2,   82,    2,    2,    2,   37,   65,   48,
       43,   38,   48,   50,   65,   55,   50,    2,   55,    2,
       45,   68,   47,   68,  293,   96,   47,   75,   96,  293,
       55,   75,   50,   75,   75,  120,  120,    2,   75,   48,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   83,   19,   19,   19,   49,   53,   51,   49,

       53,   51,   19,   85,  615,   85,   19,   46,   19,   46,
       46,  130,   83,   46,   52,  130,   57,   52,  613,   57,
       46,   49,   53,   51,   49,   54,   19,  610,   54,   19,
       20,   20,   20,   51,   20,   20,   20,   52,   56,  605,
       46,   56,   52,   20,   52,   54,   57,   20,  603,   20,
       58,   54,   54,   58,  134,   59,   54,   59,   59,   60,
      132,   59,   60,  132,  134,   58,   56,   20,  145,  145,
       20,   21,   21,   59,   21,   21,   21,   59,   60,   61,
       58,   97,   61,   63,   97,   64,   63,   21,   64,   21,
       21,   62,   98,   62,   62,   98,   97,   62,  581,  127,

       69,  127,   69,  572,   62,   63,   63,   21,   64,   61,
       21,   22,   22,   69,   22,   22,   22,   92,  108,   92,
       98,  108,  199,   92,   62,  199,   70,   22,   70,   22,
       22,  135,   86,   69,   86,   87,  135,   87,  135,   70,
       93,  100,   93,  108,  100,   86,   93,   22,   87,  298,
       22,   23,   23,   93,   23,   23,   23,  298,   99,   70,
       99,   99,  141,  202,   99,   86,  202,   23,   87,   23,
       23,  100,   94,   93,   94,  568,  103,  141,   94,  103,
      101,  102,  101,  101,  102,   94,  101,   23,  147,  147,
       23,   24,   24,  101,   24,   24,   24,  104,  105,  110,

      104,  105,  110,  161,  161,   94,  103,   24,  102,   24,
       24,  563,  102,  101,  110,  107,  106,  105,  107,  106,
      111,  115,  104,  111,  115,  104,  109,   24,  562,  109,
       24,   25,   25,  184,   25,   25,   25,  184,  107,  112,
      115,  106,  112,  107,  555,  107,  109,   25,  111,   25,
       25,  106,  109,  109,  170,  170,  116,  109,  113,  116,
      114,  113,  114,  114,  554,  204,  114,   25,  204,  112,
       25,   26,   26,  113,   26,   26,   26,  118,  114,  151,
      118,  151,  114,  142,  553,  142,  116,   26,  113,   26,
       26,  117,  204,  117,  117,  119,  233,  117,  119,  118,

      118,  142,  233,  544,  117,  142,  129,   26,  129,  345,
       26,   27,   27,  345,   27,   27,   27,  542,  119,  129,
      144,  159,  144,  159,  117,  137,  541,   27,  152,   27,
      152,  137,  137,  144,  540,  153,  137,  153,  168,  129,
      168,  152,  157,  157,  157,  539,  203,   27,  153,  203,
       27,   28,   28,  144,   28,   28,   28,  178,  157,  178,
      160,  152,  160,  166,  166,  166,  538,   28,  153,   28,
      162,  203,  162,  160,  537,  169,  171,  169,  171,  166,
      188,  536,  188,  162,  198,  535,  198,   28,  169,  171,
       28,   80,  511,  160,   80,   80,   80,   80,  284,  284,

       80,   80,  205,  162,   80,  205,  510,  211,  169,  171,
      211,   80,   81,  317,  317,   81,   81,   81,   81,  509,
      208,   81,   81,  208,  179,   81,  179,  181,  189,  181,
      189,  190,   81,  190,  211,  205,  206,  179,  206,  206,
      181,  189,  206,  209,  190,  207,  209,  508,  207,  212,
      210,  208,  212,  210,  507,  213,  208,  179,  213,  543,
      181,  189,  209,  207,  190,  210,  505,  214,  215,  212,
      214,  215,  216,  217,  504,  216,  217,  218,  213,  219,
      218,  210,  219,  543,  214,  220,  213,  221,  220,  222,
      221,  223,  222,  224,  223,  215,  224,  225,  328,  328,

      225,  217,  216,  226,  227,  218,  226,  227,  228,  229,
      231,  228,  229,  231,  220,  222,  230,  503,  232,  230,
      225,  232,  502,  223,  224,  236,  226,  236,  243,  248,
      243,  248,  252,  228,  252,  501,  227,  232,  252,  230,
      240,  253,  231,  241,  253,  229,  240,  240,  500,  241,
      241,  240,  254,  255,  241,  254,  255,  256,  499,  257,
      256,  257,  257,  258,  259,  257,  258,  259,  260,  262,
      261,  260,  262,  261,  291,  264,  291,  254,  264,  263,
      255,  258,  263,  338,  338,  261,  265,  260,  266,  265,
      256,  266,  442,  442,  267,  259,  262,  267,  264,  263,

      259,  261,  268,  265,  269,  268,  264,  269,  270,  271,
      272,  270,  271,  272,  273,  266,  274,  273,  275,  274,
      276,  275,  277,  276,  267,  277,  278,  498,  279,  278,
      268,  279,  269,  280,  281,  497,  280,  281,  271,  282,
      273,  283,  282,  276,  283,  277,  445,  445,  274,  275,
      323,  496,  323,  279,  324,  495,  324,  281,  278,  326,
      283,  326,  332,  333,  332,  333,  323,  464,  451,  280,
      324,  282,  336,  353,  336,  353,  439,  359,  332,  333,
      359,  360,  361,  362,  360,  361,  362,  363,  364,  365,
      363,  364,  365,  366,  367,  368,  366,  367,  368,  438,

      369,  371,  362,  369,  371,  370,  363,  364,  366,  372,
      437,  370,  372,  361,  370,  373,  365,  436,  373,  375,
      374,  371,  375,  374,  376,  367,  377,  376,  372,  377,
      378,  435,  369,  378,  373,  374,  379,  434,  380,  379,
      376,  380,  433,  432,  381,  375,  378,  381,  382,  383,
      431,  382,  383,  384,  377,  385,  384,  386,  385,  391,
      386,  396,  391,  397,  396,  380,  397,  379,  392,  383,
      430,  392,  429,  388,  428,  381,  396,  385,  384,  388,
      388,  382,  386,  393,  388,  394,  393,  392,  394,  395,
      391,  400,  395,  398,  397,  399,  398,  400,  399,  427,

      400,  426,  393,  401,  394,  402,  401,  403,  402,  405,
      403,  425,  405,  423,  404,  406,  395,  404,  406,  407,
      422,  421,  407,  401,  402,  408,  403,  399,  408,  404,
      409,  406,  420,  409,  411,  405,  410,  411,  419,  410,
      412,  408,  413,  412,  418,  413,  414,  407,  415,  414,
      416,  415,  441,  416,  441,  417,  443,  453,  443,  390,
      453,  409,  413,  410,  454,  411,  455,  454,  441,  455,
      415,  414,  443,  412,  456,  416,  457,  456,  458,  457,
      459,  458,  357,  459,  461,  455,  460,  461,  463,  460,
      465,  463,  466,  465,  352,  466,  468,  459,  467,  468,

      469,  467,  470,  469,  471,  470,  472,  471,  458,  472,
      460,  463,  351,  467,  350,  461,  347,  466,  469,  465,
      344,  473,  474,  471,  473,  474,  468,  475,  476,  477,
      475,  476,  477,  341,  470,  478,  472,  479,  478,  480,
      479,  474,  480,  340,  335,  475,  481,  476,  482,  481,
      483,  482,  484,  483,  334,  484,  480,  485,  487,  486,
      485,  487,  486,  489,  331,  488,  489,  479,  488,  325,
      481,  322,  490,  483,  486,  490,  321,  491,  316,  482,
      491,  484,  485,  488,  492,  315,  493,  492,  487,  493,
      494,  490,  514,  494,  512,  489,  513,  512,  514,  513,

      515,  514,  314,  313,  312,  493,  515,  491,  494,  515,
      516,  517,  518,  516,  517,  518,  519,  520,  521,  519,
      520,  521,  522,  525,  523,  522,  525,  523,  513,  528,
      526,  311,  528,  310,  527,  309,  526,  522,  517,  526,
      527,  519,  520,  527,  518,  529,  530,  308,  529,  530,
      521,  523,  307,  305,  531,  525,  528,  531,  532,  533,
      534,  532,  533,  534,  547,  548,  549,  547,  548,  549,
      550,  530,  551,  550,  533,  551,  303,  529,  552,  531,
      556,  552,  557,  556,  302,  557,  560,  534,  561,  560,
      532,  561,  566,  567,  571,  566,  567,  571,  548,  301,

      300,  557,  549,  299,  297,  551,  296,  561,  295,  294,
      292,  290,  289,  286,  552,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  580,  580,  251,  580,  580,
      580,  580,  580,  580,  580,  582,  582,  582,  582,  583,
      583,  584,  249,  245,  584,  584,  244,  584,  584,  584,

      584,  585,  585,  242,  585,  585,  585,  585,  585,  585,
      585,  586,  239,  238,  586,  586,  197,  586,  586,  586,
      586,  587,  587,  588,  588,  588,  589,  589,  589,  589,
      590,  590,  591,  591,  591,  196,  591,  591,  591,  591,
      591,  592,  592,  195,  592,  192,  592,  592,  592,  592,
      593,  593,  191,  593,  593,  593,  593,  593,  593,  593,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      595,  595,  187,  595,  186,  595,  595,  595,  595,  596,
      596,  185,  596,  596,  596,  596,  596,  596,  596,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  598,

      598,  183,  598,  598,  598,  598,  598,  598,  598,  599,
      599,  177,  599,  599,  599,  599,  599,  599,  599,  600,
      600,  176,  600,  600,  600,  600,  600,  600,  600,  601,
      601,  175,  601,  601,  601,  601,  601,  601,  601,  602,
      602,  602,  602,  604,  604,  173,  604,  604,  604,  604,
      604,  604,  604,  606,  606,  167,  606,  606,  606,  606,
      606,  606,  606,  607,  607,  165,  607,  607,  607,  607,
      607,  607,  607,  608,  608,  164,  608,  608,  608,  608,
      608,  608,  608,  609,  609,  158,  609,  609,  609,  609,
      609,  609,  609,  611,  611,  611,  611,  612,  612,  612,

      612,  614,  614,  614,  614,  617,  617,  617,  617,  618,
      618,  618,  618,  620,  620,  620,  620,  156,  155,  150,
      146,  143,  140,  139,  138,  136,  133,  131,  128,  126,
      124,  122,   91,   88,   76,   74,   72,   35,   34,   33,
       31,   29,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2020 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*  This code is based on the work done by the MoxyPyDoxy team
 *  (Linda Leong, Mike Rivera, Kim Truong, and Gabriel Estrada)
 *  in Spring 2005 as part of CS 179E: Compiler Design Project
 *  at the University of California, Riverside; the course was
 *  taught by Peter H. Froehlich <phf@acm.org>.
 */

#line 36 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"

#include <vector>
#include <unordered_map>
#include <string>
#include <stack>

#include <stdio.h>

#include "pycode.h"
#include "message.h"
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"
#include "config.h"
#include "groupdef.h"
#include "classlist.h"
#include "filedef.h"
#include "namespacedef.h"
#include "tooltip.h"
#include "scopedtypevariant.h"
#include "symbolresolver.h"

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0


struct pycodeYY_state
{
  std::unordered_map< std::string, ScopedTypeVariant > codeClassMap;
  QCString      curClassName;
  StringVector  curClassBases;

  CodeOutputInterface * code = 0;
  const char *  inputString = 0;     //!< the code fragment as text
  yy_size_t     inputPosition = 0;   //!< read offset during parsing
  QCString      fileName;
  const char *  currentFontClass = 0;
  bool          insideCodeLine = FALSE;
  const Definition *searchCtx = 0;
  bool          collectXRefs = FALSE;
  int           inputLines = 0;      //!< number of line in the code fragment
  int           yyLineNr = 0;        //!< current line number
  const FileDef *    sourceFileDef = 0;
  const Definition * currentDefinition = 0;
  const MemberDef *  currentMemberDef = 0;
  bool          includeCodeFragment = FALSE;
  QCString      realScope;
  int           bodyCurlyCount = 0;
  bool          searchingForBody = FALSE;
  QCString      classScope;
  int           paramParens = 0;

  bool          insideBody = false;
  bool          exampleBlock = FALSE;
  QCString      exampleName;

  QCString      type;
  QCString      name;

  bool          doubleStringIsDoc = FALSE;
  bool          doubleQuote = FALSE;
  bool          noSuiteFound = FALSE;
  int           stringContext = 0;

  std::stack<yy_size_t> indents;  //!< Tracks indentation levels for scoping in python

  QCString      docBlock;     //!< contents of all lines of a documentation block
  bool          endComment = FALSE;
  VariableContext theVarContext;
  CallContext theCallContext;
  SymbolResolver symbolResolver;
  TooltipManager tooltipManager;
};


#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

static void startCodeLine(yyscan_t yyscanner);
static int countLines(yyscan_t yyscanner);
static void setCurrentDoc(yyscan_t yyscanner, const QCString &anchor);
static void addToSearchIndex(yyscan_t yyscanner, const QCString &text);
static const ClassDef *stripClassName(yyscan_t yyscanner,const QCString &s,Definition *d);
static void codify(yyscan_t yyscanner,const QCString &text);
static void endCodeLine(yyscan_t yyscanner);
static void nextCodeLine(yyscan_t yyscanner);
static void writeMultiLineCodeLink(yyscan_t yyscanner, CodeOutputInterface &ol, const Definition *d, const QCString &text);
static void startFontClass(yyscan_t yyscanner,const char *s);
static void endFontClass(yyscan_t yyscanner);
static void codifyLines(yyscan_t yyscanner,const QCString &text);
static bool getLinkInScope(yyscan_t yyscanner, const QCString &c, const QCString &m,
                           const QCString &memberText, CodeOutputInterface &ol, const QCString &text);
static bool getLink(yyscan_t yyscanner, const QCString &className, const QCString &memberName,
                    CodeOutputInterface &ol, const QCString &text=QCString());
static void generateClassOrGlobalLink(yyscan_t yyscanner, CodeOutputInterface &ol,
                                      const QCString &clName, bool typeOnly=FALSE);
static void generateFunctionLink(yyscan_t yyscanner, CodeOutputInterface &ol,
                                const QCString &funcName);
static bool findMemberLink(yyscan_t yyscanner, CodeOutputInterface &ol,
                           const Definition *sym, const QCString &symName);
static void findMemberLink(yyscan_t yyscanner, CodeOutputInterface &ol,
                           const QCString &symName);
static void adjustScopesAndSuites(yyscan_t yyscanner,unsigned indentLength);
static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size);
static inline void pop_state(yyscan_t yyscanner);

#if 0 // TODO: call me to store local variables and get better syntax highlighting, see code.l
static void addVariable(yyscan_t yyscanner, QCString type, QCString name);
#endif

//-------------------------------------------------------------------

static std::mutex g_searchIndexMutex;
static std::mutex g_docCrossReferenceMutex;
static std::mutex g_countFlowKeywordsMutex;

//-------------------------------------------------------------------

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

#line 1392 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode_intermediate.cpp"

#line 1394 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode_intermediate.cpp"

#define INITIAL 0
#define Body 1
#define FunctionDec 2
#define FunctionParams 3
#define ClassDec 4
#define ClassInheritance 5
#define Suite 6
#define SuiteCaptureIndent 7
#define SuiteStart 8
#define SuiteMaintain 9
#define SingleQuoteString 10
#define DoubleQuoteString 11
#define TripleString 12
#define DocBlock 13

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#define YY_EXTRA_TYPE struct pycodeYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int pycodeYYlex_init (yyscan_t* scanner);

int pycodeYYlex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pycodeYYlex_destroy ( yyscan_t yyscanner );

int pycodeYYget_debug ( yyscan_t yyscanner );

void pycodeYYset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE pycodeYYget_extra ( yyscan_t yyscanner );

void pycodeYYset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *pycodeYYget_in ( yyscan_t yyscanner );

void pycodeYYset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *pycodeYYget_out ( yyscan_t yyscanner );

void pycodeYYset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int pycodeYYget_leng ( yyscan_t yyscanner );

char *pycodeYYget_text ( yyscan_t yyscanner );

int pycodeYYget_lineno ( yyscan_t yyscanner );

void pycodeYYset_lineno ( int _line_number , yyscan_t yyscanner );

int pycodeYYget_column  ( yyscan_t yyscanner );

void pycodeYYset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pycodeYYwrap ( yyscan_t yyscanner );
#else
extern int pycodeYYwrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pycodeYYlex (yyscan_t yyscanner);

#define YY_DECL int pycodeYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)pycodeYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in pycodeYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pycodeYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				pycodeYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		pycodeYY_load_buffer_state(yyscanner );
		}

	{
#line 305 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"


#line 1689 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 574 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 573 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 308 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN( FunctionDec );
                                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 314 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN( FunctionDec );
                                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 321 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN( ClassDec );
                                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 327 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      startFontClass(yyscanner,"keywordtype");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 332 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 336 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 340 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 344 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"self.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[5]);
                                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 348 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 10:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 352 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 356 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 360 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,"cls.");
                                      findMemberLink(yyscanner,*yyextra->code,&yytext[4]);
                                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 364 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // decorator
                                      startFontClass(yyscanner,"preprocessor");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK

case 14:
YY_RULE_SETUP
#line 371 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext);
                                      // codify(yyscanner,yytext);
                                      yyextra->curClassName = yytext;
                                      yyextra->curClassBases.clear();
                                      BEGIN( ClassInheritance );
                                    }
	YY_BREAK

case 15:
YY_RULE_SETUP
#line 380 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 384 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      // The parser
                                      // is assuming
                                      // that ALL identifiers
                                      // in this state
                                      // are base classes;
                                      // it doesn't check to see
                                      // that the first parenthesis
                                      // has been seen.

                                      // This is bad - it should
                                      // probably be more strict
                                      // about what to accept.

                                      yyextra->curClassBases.push_back(yytext);
                                      yyextra->insideBody = true;
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext);
                                      yyextra->insideBody = false;
                                      // codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 405 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);

                                      // Assume this will
                                      // be a one-line suite;
                                      // found counter-example
                                      // in SuiteStart.

                                      // Push a class scope

                                      std::unique_ptr<ClassDef> classDefToAdd { createClassDef("<code>",1,1,yyextra->curClassName,ClassDef::Class,QCString(),QCString(),FALSE) };
                                      ScopedTypeVariant var(yyextra->curClassName);
                                      for (const auto &s : yyextra->curClassBases)
                                      {
                                        const ClassDef *baseDefToAdd = 0;
                                        // find class in the local scope
                                        auto it = yyextra->codeClassMap.find(s);
                                        if (it != yyextra->codeClassMap.end())
                                        {
                                          baseDefToAdd = toClassDef(it->second.globalDef());
                                        }
                                        // Try to find class in global scope
                                        if (baseDefToAdd==0)
                                        {
                                          baseDefToAdd=yyextra->symbolResolver.resolveClass(yyextra->currentDefinition,s.c_str());
                                        }

                                        if (baseDefToAdd && baseDefToAdd->name()!=yyextra->curClassName)
                                        {
                                          var.localDef()->insertBaseClass(baseDefToAdd->name());
                                        }
                                      }
                                      yyextra->codeClassMap.emplace(std::make_pair(yyextra->curClassName.str(),std::move(var)));

                                      // Reset class-parsing variables.
                                      yyextra->curClassName.resize(0);
                                      yyextra->curClassBases.clear();

                                      yyextra->noSuiteFound = TRUE;
                                      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 450 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      generateFunctionLink(yyscanner,*yyextra->code,yytext);
                                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 454 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                      BEGIN( FunctionParams );
                                    }
	YY_BREAK


case 20:
YY_RULE_SETUP
#line 461 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      // Parses delimiters
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 466 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 470 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 474 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 478 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);

                                      // Assume this will
                                      // be a one-line suite;
                                      // found counter-example
                                      // in SuiteStart.
                                      yyextra->noSuiteFound = TRUE;
                                      BEGIN( SuiteStart );
                                    }
	YY_BREAK


case 25:
YY_RULE_SETUP
#line 492 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      // Position-sensitive rules!
                                      // Must come AFTER keyword-triggered rules
                                      // Must come BEFORE identifier NONEMPTY-like rules
                                      //   to syntax highlight.

                                      startFontClass(yyscanner,"keyword");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 503 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      if (yyextra->currentMemberDef && yyextra->currentMemberDef->isFunction())
                                      {
                                        std::lock_guard<std::mutex> lock(g_countFlowKeywordsMutex);
                                        MemberDefMutable *mdm = toMemberDefMutable(yyextra->currentMemberDef);
                                        if (mdm)
                                        {
                                          mdm->incrementFlowKeyWordCount();
                                        }
                                      }
                                      startFontClass(yyscanner,"keywordflow");
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 27:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 517 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      yyextra->insideBody = true;
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext);
                                      yyextra->insideBody = false;
                                    }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 522 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      yyextra->insideBody = true;
                                      generateClassOrGlobalLink(yyscanner,*yyextra->code,yytext,TRUE);
                                      yyextra->insideBody = false;
                                    }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 527 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ codify(yyscanner,yytext); }
	YY_BREAK


case 30:
YY_RULE_SETUP
#line 535 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 538 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN(Body);
                                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 544 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      startFontClass(yyscanner,"keyword");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);

                                      // No indentation necessary
                                      yyextra->noSuiteFound = FALSE;
                                    }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 553 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      if (yyextra->currentMemberDef && yyextra->currentMemberDef->isFunction())
                                      {
                                        std::lock_guard<std::mutex> lock(g_countFlowKeywordsMutex);
                                        MemberDefMutable *mdm = toMemberDefMutable(yyextra->currentMemberDef);
                                        if (mdm)
                                        {
                                          mdm->incrementFlowKeyWordCount();
                                        }
                                      }
                                      startFontClass(yyscanner,"keywordflow");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);

                                      // No indentation necessary
                                      yyextra->noSuiteFound = FALSE;
                                    }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 570 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 575 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString
                                         )
                                      {
                                        REJECT;
                                      }
                                      yy_push_state(YY_START,yyscanner);
                                      BEGIN(DocBlock);
                                      yyextra->docBlock=yytext;
                                    }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 588 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                      if ( yyextra->noSuiteFound )
                                      {
                                        // printf("New suite to capture! [%d]\n", yyextra->yyLineNr);
                                        BEGIN ( SuiteCaptureIndent );
                                      }
                                    }
	YY_BREAK


case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 599 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      // Blankline - ignore, keep looking for indentation.
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 604 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      // This state lasts momentarily,
                                      // to check the indentation
                                      // level that is about to be
                                      // used.
                                      codifyLines(yyscanner,yytext);
                                      yyextra->indents.push(yyleng);
                                      // printf("Captured indent of %d [line %d]\n", yyleng, yyextra->yyLineNr);
                                      BEGIN( Suite );
                                    }
	YY_BREAK


case 39:
YY_RULE_SETUP
#line 618 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      // This implements poor
                                      // indentation-tracking;
                                      // should be improved.
                                      // (translate tabs to space, etc)
                                      codifyLines(yyscanner,yytext);
                                      adjustScopesAndSuites(yyscanner,static_cast<int>(yyleng));
                                    }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 627 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      // If this ever succeeds,
                                      // it means that this is
                                      // a blank line, and
                                      // can be ignored.
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 635 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                       // Default rule; matches
                                       // the empty string, assuming
                                       // real text starts here.
                                       // Just go straight to Body.
                                       adjustScopesAndSuites(yyscanner,0);
                                    }
	YY_BREAK

case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 645 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                      BEGIN( SuiteMaintain );
                                    }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 649 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 652 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
// Single quoted string like 'That\'s a """nice""" string!'
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 657 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // line continuation
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 660 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // escaped char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 663 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // triple double quotes
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 666 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // end of the string
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN(yyextra->stringContext);
                                    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 671 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // normal chars
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 674 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // normal char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK

// Double quoted string like "That's \"a '''nice'''\" string!"
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 680 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // line continuation
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 683 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // escaped char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 686 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // triple single quotes
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 689 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // end of the string
                                      codify(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                      BEGIN(yyextra->stringContext);
                                    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 694 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // normal chars
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 697 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // normal char
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK


case 57:
#line 704 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
case 58:
YY_RULE_SETUP
#line 704 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                      if (yyextra->doubleQuote==(yytext[0]=='"'))
                                      {
                                        endFontClass(yyscanner);
                                        BEGIN(yyextra->stringContext);
                                      }
                                    }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 712 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 715 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codifyLines(yyscanner,yytext);
                                    }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 718 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      codify(yyscanner,yytext);
                                    }
	YY_BREAK

case 62:
YY_RULE_SETUP
#line 724 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      if (YY_START==SingleQuoteString) REJECT;
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      yyextra->doubleQuote=yytext[yyleng-1]=='"';
                                      codify(yyscanner,yytext);
                                      BEGIN(TripleString);
                                    }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 732 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      if (YY_START==DoubleQuoteString) REJECT;
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      yyextra->doubleQuote=yytext[yyleng-1]=='"';
                                      codify(yyscanner,yytext);
                                      BEGIN(TripleString);
                                    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 740 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // single quoted string
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      codify(yyscanner,yytext);
                                      BEGIN(SingleQuoteString);
                                    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 752 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // double quoted string
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      startFontClass(yyscanner,"stringliteral");
                                      yyextra->stringContext=YY_START;
                                      codify(yyscanner,yytext);
                                      BEGIN(DoubleQuoteString);
                                    }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 764 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // contents of current comment line
                                      yyextra->docBlock+=yytext;
                                    }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 767 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // comment block (next line is also comment line)
                                     yyextra->docBlock+=yytext;
                                    }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 770 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // comment block ends at the end of this line
                                      // remove special comment (default config)
                                      if (Config_getBool(STRIP_CODE_COMMENTS))
                                      {
                                        yyextra->yyLineNr+=((QCString)yyextra->docBlock).contains('\n');
                                        yyextra->endComment=TRUE;
                                      }
                                      else // do not remove comment
                                      {
                                        startFontClass(yyscanner,"comment");
                                        codifyLines(yyscanner,yyextra->docBlock);
                                        endFontClass(yyscanner);
                                      }
                                      unput(*yytext);
                                      pop_state(yyscanner);
                                    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 786 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                      if (YY_START==SingleQuoteString ||
                                         YY_START==DoubleQuoteString ||
                                         YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      yy_push_state(YY_START,yyscanner);
                                      BEGIN(DocBlock);
                                      yyextra->docBlock=yytext;
                                    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 797 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{ // normal comment
                                      if (YY_START==SingleQuoteString ||
                                          YY_START==DoubleQuoteString ||
                                          YY_START==TripleString)
                                      {
                                        REJECT;
                                      }
                                      startFontClass(yyscanner,"comment");
                                      codifyLines(yyscanner,yytext);
                                      endFontClass(yyscanner);
                                    }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 808 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                    if (yyextra->endComment)
                                    {
                                      yyextra->endComment=FALSE;
                                    }
                                    else
                                    {
                                      codifyLines(yyscanner,yytext);
                                    }
                                    //printf("[pycode] %d NEWLINE [line %d] no match\n",
                                    //       YY_START, yyextra->yyLineNr);

                                    BEGIN(Body);
                                  }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 823 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                    codify(yyscanner,yytext);
                                    BEGIN(Body);
                                  }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 827 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                    codify(yyscanner,yytext);
                                    // printf("[pycode] '%s' [ state %d ]  [line %d] no match\n",
                                    //        yytext, YY_START, yyextra->yyLineNr);

                                    BEGIN(Body);
                                  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Body):
case YY_STATE_EOF(FunctionDec):
case YY_STATE_EOF(FunctionParams):
case YY_STATE_EOF(ClassDec):
case YY_STATE_EOF(ClassInheritance):
case YY_STATE_EOF(Suite):
case YY_STATE_EOF(SuiteCaptureIndent):
case YY_STATE_EOF(SuiteStart):
case YY_STATE_EOF(SuiteMaintain):
case YY_STATE_EOF(SingleQuoteString):
case YY_STATE_EOF(DoubleQuoteString):
case YY_STATE_EOF(TripleString):
case YY_STATE_EOF(DocBlock):
#line 835 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
{
                                    if (YY_START==DocBlock && !Config_getBool(STRIP_CODE_COMMENTS))
                                    {
                                      startFontClass(yyscanner,"comment");
                                      codifyLines(yyscanner,yyextra->docBlock);
                                      endFontClass(yyscanner);
                                    }
                                    yyterminate();
                                  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 844 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"
ECHO;
	YY_BREAK
#line 2601 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode_intermediate.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * pycodeYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( pycodeYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of pycodeYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pycodeYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pycodeYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 574 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 574 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 573);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pycodeYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pycodeYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pycodeYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        pycodeYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            pycodeYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	pycodeYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	pycodeYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void pycodeYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pycodeYYpop_buffer_state();
	 *		pycodeYYpush_buffer_state(new_buffer);
     */
	pycodeYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pycodeYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (pycodeYYwrap()) processing, but the only time this flag
	 * is looked at is after pycodeYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void pycodeYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pycodeYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pycodeYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pycodeYYalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pycodeYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pycodeYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void pycodeYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pycodeYYfree((void *) b->yy_ch_buf ,yyscanner );

	pycodeYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pycodeYYrestart() or at EOF.
 */
    static void pycodeYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	pycodeYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pycodeYY_init_buffer was _probably_
     * called from pycodeYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void pycodeYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pycodeYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void pycodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	pycodeYYensure_buffer_stack(yyscanner);

	/* This block is copied from pycodeYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pycodeYY_switch_to_buffer. */
	pycodeYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void pycodeYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	pycodeYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		pycodeYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pycodeYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)pycodeYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in pycodeYYensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)pycodeYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in pycodeYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pycodeYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) pycodeYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pycodeYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pycodeYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pycodeYY_scan_bytes() instead.
 */
YY_BUFFER_STATE pycodeYY_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return pycodeYY_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to pycodeYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pycodeYY_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) pycodeYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pycodeYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pycodeYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pycodeYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) pycodeYYalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) pycodeYYrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE pycodeYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int pycodeYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int pycodeYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *pycodeYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *pycodeYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int pycodeYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *pycodeYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void pycodeYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void pycodeYYset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "pycodeYYset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void pycodeYYset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "pycodeYYset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see pycodeYY_switch_to_buffer
 */
void pycodeYYset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void pycodeYYset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int pycodeYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void pycodeYYset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* pycodeYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int pycodeYYlex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) pycodeYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* pycodeYYlex_init_extra has the same functionality as pycodeYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to pycodeYYalloc in
 * the yyextra field.
 */
int pycodeYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    pycodeYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) pycodeYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    pycodeYYset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pycodeYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pycodeYYlex_init()
     */
    return 0;
}

/* pycodeYYlex_destroy is for both reentrant and non-reentrant scanners. */
int pycodeYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pycodeYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pycodeYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	pycodeYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        pycodeYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    pycodeYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pycodeYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    pycodeYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pycodeYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *pycodeYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void pycodeYYfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see pycodeYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 844 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pycode.l"


/*@ ----------------------------------------------------------------------------
 */

#if 0 // TODO: call me to store local variables and get better syntax highlighting, see code.l
static void addVariable(yyscan_t yyscanner, QCString type, QCString name)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("PyVariableContext::addVariable(%s,%s)\n",qPrint(type),qPrint(name));
  QCString ltype = type.simplifyWhiteSpace();
  QCString lname = name.simplifyWhiteSpace();

  auto it = yyextra->codeClassMap.find(ltype.str());
  if (it!=yyextra->codeClassMap.end())
  {
    yyextra->theVarContext.addVariable(lname,std::move(it->second));
  }
  else
  {
    const ClassDef *varType = getResolvedClass(yyextra->currentDefinition,yyextra->sourceFileDef,ltype); // look for global class definitions
    if (varType)
    {
      yyextra->theVarContext.addVariable(lname,ScopedTypeVariant(varType));
    }
    else
    {
      if (!yyextra->theVarContext.atGlobalScope()) // for local variable add a dummy entry to avoid linking to a global that is shadowed.
      {
        yyextra->theVarContext.addVariable(lname.str(),ScopedTypeVariant());
      }
    }
  }
}
#endif

//-------------------------------------------------------------------------------

static yy_size_t yyread(yyscan_t yyscanner, char *buf,yy_size_t max_size)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yy_size_t inputPosition = yyextra->inputPosition;
  const char *s = yyextra->inputString + inputPosition;
  yy_size_t c=0;
  while( c < max_size && *s )
  {
    *buf++ = *s++;
    c++;
  }
  yyextra->inputPosition += c;
  return c;
}

//-------------------------------------------------------------------------------

/*!
  Examines current stack of white-space indentations;
  re-syncs the parser with the correct scope.
*/
static void adjustScopesAndSuites(yyscan_t yyscanner,unsigned indentLength)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  // States to pop
  if (!yyextra->indents.empty() && indentLength < yyextra->indents.top())
  {
    while (!yyextra->indents.empty() && indentLength < yyextra->indents.top())
    {
      // printf("Exited scope indent of [%d]\n", yyextra->indents.top());
      yyextra->indents.pop(); // Pop the old suite's indentation

      yyextra->currentMemberDef=0;
      if (yyextra->currentDefinition)
        yyextra->currentDefinition=yyextra->currentDefinition->getOuterScope();
    }
  }

  // Are there any remaining indentation levels for suites?
  if (!yyextra->indents.empty())
  {
    BEGIN( Suite );
  }
  else
  {
    BEGIN( Body );
  }
}

//-------------------------------------------------------------------------------

/*! counts the number of lines in the input */
static int countLines(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *p=yyextra->inputString;
  char c;
  int count=1;
  while ((c=*p))
  {
    p++;
    if (c=='\n') count++;
  }
  if (p>yyextra->inputString && *(p-1)!='\n')
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++;
  }
  return count;
}

//-------------------------------------------------------------------------------

static void setCurrentDoc(yyscan_t yyscanner, const QCString &anchor)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (Doxygen::searchIndex)
  {
    std::lock_guard<std::mutex> lock(g_searchIndexMutex);
    if (yyextra->searchCtx)
    {
      yyextra->code->setCurrentDoc(yyextra->searchCtx,yyextra->searchCtx->anchor(),FALSE);
    }
    else
    {
      yyextra->code->setCurrentDoc(yyextra->sourceFileDef,anchor,TRUE);
    }
  }
}

//-------------------------------------------------------------------------------

static void addToSearchIndex(yyscan_t yyscanner, const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (Doxygen::searchIndex)
  {
    std::lock_guard<std::mutex> lock(g_searchIndexMutex);
    yyextra->code->addWord(text,FALSE);
  }
}

//-------------------------------------------------------------------------------

static const ClassDef *stripClassName(yyscan_t yyscanner,const QCString &s,Definition *d)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  int pos=0;
  QCString type = s;
  QCString className;
  QCString templSpec;
  while (extractClassNameFromType(type,pos,className,templSpec)!=-1)
  {
    QCString clName=className+templSpec;
    const ClassDef *cd=0;
    if (!yyextra->classScope.isEmpty())
    {
      cd=yyextra->symbolResolver.resolveClass(d,yyextra->classScope+"::"+clName);
    }
    if (cd==0)
    {
      cd=yyextra->symbolResolver.resolveClass(d,clName);
    }
    if (cd)
    {
      return cd;
    }
  }

  return 0;
}

//-------------------------------------------------------------------------------

/*! start a new line of code, inserting a line number if yyextra->sourceFileDef
 * is TRUE. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //if (yyextra->currentFontClass) { yyextra->code->endFontClass(yyscanner); }
  if (yyextra->sourceFileDef)
  {
    //QCString lineNumber,lineAnchor;
    //lineNumber.sprintf("%05d",yyextra->yyLineNr);
    //lineAnchor.sprintf("l%05d",yyextra->yyLineNr);

    const Definition *d = yyextra->sourceFileDef->getSourceDefinition(yyextra->yyLineNr);
    //printf("startCodeLine %d d=%p\n",yyextra->yyLineNr,d);
    //yyextra->code->startLineNumber();

    if (!yyextra->includeCodeFragment && d && d->isLinkableInProject())
    {
      yyextra->currentDefinition = d;
      yyextra->currentMemberDef = yyextra->sourceFileDef->getSourceMember(yyextra->yyLineNr);
      yyextra->insideBody = false;
      yyextra->endComment = FALSE;
      yyextra->searchingForBody = TRUE;
      yyextra->realScope = d->name();
      yyextra->classScope = d->name();
      //printf("Real scope: '%s'\n",qPrint(yyextra->realScope));
      yyextra->bodyCurlyCount = 0;
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",yyextra->yyLineNr);
      if (yyextra->currentMemberDef)
      {
        yyextra->code->writeLineNumber(yyextra->currentMemberDef->getReference(),
                                yyextra->currentMemberDef->getOutputFileBase(),
                                yyextra->currentMemberDef->anchor(),yyextra->yyLineNr,
                                !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
      else
      {
        yyextra->code->writeLineNumber(d->getReference(),
                                d->getOutputFileBase(),
                                QCString(),yyextra->yyLineNr,
                                !yyextra->includeCodeFragment);
        setCurrentDoc(yyscanner,lineAnchor);
      }
    }
    else
    {
      yyextra->code->writeLineNumber(QCString(),QCString(),QCString(),yyextra->yyLineNr,
                                     !yyextra->includeCodeFragment);
    }
  }
  yyextra->code->startCodeLine(yyextra->sourceFileDef);
  yyextra->insideCodeLine=true;

  if (yyextra->currentFontClass)
  {
    yyextra->code->startFontClass(yyextra->currentFontClass);
  }
}

//-------------------------------------------------------------------------------

static void codify(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  yyextra->code->codify(text);
}

//-------------------------------------------------------------------------------

static void endCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  endFontClass(yyscanner);
  yyextra->code->endCodeLine();
  yyextra->insideCodeLine=false;
}

//-------------------------------------------------------------------------------

static void nextCodeLine(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const char *fc = yyextra->currentFontClass;
  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (yyextra->yyLineNr<yyextra->inputLines)
  {
    yyextra->currentFontClass = fc;
    startCodeLine(yyscanner);
  }
}

//-------------------------------------------------------------------------------

/*! writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(yyscan_t yyscanner,
                  CodeOutputInterface &ol,
                  const Definition *d,
                  const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (text.isEmpty()) return;
  bool sourceTooltips = Config_getBool(SOURCE_TOOLTIPS);
  yyextra->tooltipManager.addTooltip(ol,d);
  QCString ref  = d->getReference();
  QCString file = d->getOutputFileBase();
  QCString anchor = d->anchor();
  QCString tooltip;
  if (!sourceTooltips) // fall back to simple "title" tooltips
  {
    tooltip = d->briefDescriptionAsTooltip();
  }
  bool done=FALSE;
  const char *p=text.data();
  while (!done)
  {
    const char *sp=p;
    char c;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      yyextra->yyLineNr++;
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(d->codeSymbolType(),ref,file,anchor,QCString(sp,p-sp-1),tooltip);
      nextCodeLine(yyscanner);
    }
    else
    {
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(d->codeSymbolType(),ref,file,anchor,sp,tooltip);
      done=TRUE;
    }
  }
}

//-------------------------------------------------------------------------------

static void startFontClass(yyscan_t yyscanner,const char *s)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  // if font class is already set don't stop and start it.
  // strcmp does not like null pointers as input.
  if (!yyextra->currentFontClass || !s || strcmp(yyextra->currentFontClass,s))
  {
    endFontClass(yyscanner);
    yyextra->code->startFontClass(s);
    yyextra->currentFontClass=s;
  }
}

//-------------------------------------------------------------------------------

static void endFontClass(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (yyextra->currentFontClass)
  {
    yyextra->code->endFontClass();
    yyextra->currentFontClass=0;
  }
}

//-------------------------------------------------------------------------------

static void codifyLines(yyscan_t yyscanner,const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if (text.isEmpty()) return;
  //printf("codifyLines(%d,\"%s\")\n",yyextra->yyLineNr,text);
  const char *p=text.data(),*sp=p;
  char c;
  bool done=FALSE;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      yyextra->yyLineNr++;
      int l = (int)(p-sp-1);
      char *tmp = (char*)malloc(l+1);
      memcpy(tmp,sp,l);
      tmp[l]='\0';
      yyextra->code->codify(tmp);
      free(tmp);
      nextCodeLine(yyscanner);
    }
    else
    {
      yyextra->code->codify(sp);
      done=TRUE;
    }
  }
}

//-------------------------------------------------------------------------------

static bool getLinkInScope(yyscan_t yyscanner,
                           const QCString &c,  // scope
                           const QCString &m,  // member
                           const QCString &memberText, // exact text
                           CodeOutputInterface &ol,
                           const QCString &text
                          )
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  const MemberDef    *md = 0;
  const ClassDef     *cd = 0;
  const FileDef      *fd = 0;
  const NamespaceDef *nd = 0;
  const GroupDef     *gd = 0;
  //printf("Trying '%s'::'%s'\n",qPrint(c),qPrint(m));
  if (getDefs(c,m,"()",md,cd,fd,nd,gd,FALSE,yyextra->sourceFileDef) &&
      md->isLinkable())
  {
    //Definition *d=0;
    //if (cd) d=cd; else if (nd) d=nd; else if (fd) d=fd; else d=gd;

    const Definition *d = md->getOuterScope()==Doxygen::globalScope ?
                          md->getBodyDef() : md->getOuterScope();
    //printf("Found! d=%s\n",d?qPrint(d->name()):"<none>");
    if (md->getGroupDef()) d = md->getGroupDef();
    if (d && d->isLinkable())
    {
      yyextra->theCallContext.setScope(ScopedTypeVariant(stripClassName(yyscanner,md->typeString(),md->getOuterScope())));
      //printf("yyextra->currentDefinition=%p yyextra->currentMemberDef=%p\n",
      //        yyextra->currentDefinition,yyextra->currentMemberDef);

      if (yyextra->currentDefinition && yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
      {
        std::lock_guard<std::mutex> lock(g_docCrossReferenceMutex);
        addDocCrossReference(toMemberDefMutable(yyextra->currentMemberDef),toMemberDefMutable(md));
      }
      //printf("d->getReference()='%s' d->getOutputBase()='%s' name='%s' member name='%s'\n",qPrint(d->getReference()),qPrint(d->getOutputFileBase()),qPrint(d->name()),qPrint(md->name()));

      writeMultiLineCodeLink(yyscanner,ol,md, !text.isEmpty() ? text : memberText);
      addToSearchIndex(yyscanner,!text.isEmpty() ? text : memberText);
      return TRUE;
    }
  }
  return FALSE;
}

//-------------------------------------------------------------------------------

static bool getLink(yyscan_t yyscanner,
                    const QCString &className,
                    const QCString &memberName,
                    CodeOutputInterface &ol,
                    const QCString &text)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString m=removeRedundantWhiteSpace(memberName);
  QCString c=className;
  if (!getLinkInScope(yyscanner,c,m,memberName,ol,text))
  {
    if (!yyextra->curClassName.isEmpty())
    {
      if (!c.isEmpty()) c.prepend("::");
      c.prepend(yyextra->curClassName);
      return getLinkInScope(yyscanner,c,m,memberName,ol,text);
    }
    return FALSE;
  }
  return TRUE;
}

//-------------------------------------------------------------------------------

/*
  For a given string in the source code,
  finds its class or global id and links to it.
*/
static void generateClassOrGlobalLink(yyscan_t yyscanner,
                                      CodeOutputInterface &ol,
                                      const QCString &clName,
                                      bool typeOnly)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString className=clName;

  // Don't do anything for empty text
  if (className.isEmpty()) return;

  DBG_CTX((stderr,"generateClassOrGlobalLink(className=%s)\n",qPrint(className)));

  const ScopedTypeVariant *lcd = 0;
  const ClassDef *cd=0;             // Class def that we may find 
  const MemberDef *md=0;            // Member def that we may find 
  //bool isLocal=FALSE;

  if ((lcd=yyextra->theVarContext.findVariable(className))==0) // not a local variable
  {
    const Definition *d = yyextra->currentDefinition;
    QCString scope = substitute(className,".","::");

    cd = yyextra->symbolResolver.resolveClass(d,substitute(className,".","::"));
    md = yyextra->symbolResolver.getTypedef();

    DBG_CTX((stderr,"d=%s yyextra->sourceFileDef=%s\n",
        d?qPrint(d->displayName()):"<null>",
        yyextra->currentDefinition?qPrint(yyextra->currentDefinition->displayName()):"<null>"));
    DBG_CTX((stderr,"is found as a type %s\n",cd?qPrint(cd->name()):"<null>"));

    if (cd==0 && md==0) // also see if it is variable or enum or enum value
    {
      const NamespaceDef *nd = getResolvedNamespace(scope);
      if (nd)
      {
        writeMultiLineCodeLink(yyscanner,ol,nd,clName);
        addToSearchIndex(yyscanner,className);
        return;
      }
      else if (getLink(yyscanner,yyextra->classScope,clName,ol,clName))
      {
        return;
      }
    }
  }
  else
  {
    if (lcd->type()!=ScopedTypeVariant::Dummy)
    {
      yyextra->theCallContext.setScope(*lcd);
    }
    //isLocal=TRUE;
    DBG_CTX((stderr,"is a local variable cd=%p!\n",cd));
  }

  if (cd && cd->isLinkable()) // is it a linkable class
  {
    writeMultiLineCodeLink(yyscanner,ol,cd,clName);
    addToSearchIndex(yyscanner,className);
    if (md)
    {
      const Definition *d = md->getOuterScope()==Doxygen::globalScope ?
                            md->getBodyDef() : md->getOuterScope();
      if (md->getGroupDef()) d = md->getGroupDef();
      if (d && d->isLinkable() && md->isLinkable() &&
          yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
      {
        std::lock_guard<std::mutex> lock(g_docCrossReferenceMutex);
        addDocCrossReference(toMemberDefMutable(yyextra->currentMemberDef),toMemberDefMutable(md));
      }
    }
  }
  else // not a class, maybe a global member
  {
    int scopeEnd = className.findRev(".");
    if (scopeEnd!=-1 && !typeOnly) // name with explicit scope
    {
      QCString scope = substitute(className.left(scopeEnd),".","::");
      QCString locName = className.right(className.length()-scopeEnd-1);
      ClassDef *mcd = getClass(scope);
      DBG_CTX((stderr,"scope=%s locName=%s mcd=%p\n",qPrint(scope),qPrint(locName),mcd));
      if (mcd)
      {
        const MemberDef *mmd = mcd->getMemberByName(locName);
        if (mmd)
        {
          yyextra->theCallContext.setScope(ScopedTypeVariant(stripClassName(yyscanner,mmd->typeString(),mmd->getOuterScope())));
          writeMultiLineCodeLink(yyscanner,ol,mmd,clName);
          addToSearchIndex(yyscanner,className);
          const Definition *d = mmd->getOuterScope()==Doxygen::globalScope ?
                                mmd->getBodyDef() : mmd->getOuterScope();
          if (mmd->getGroupDef()) d = mmd->getGroupDef();
          if (d && d->isLinkable() && mmd->isLinkable() &&
              yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
          {
            std::lock_guard<std::mutex> lock(g_docCrossReferenceMutex);
            addDocCrossReference(toMemberDefMutable(yyextra->currentMemberDef),toMemberDefMutable(mmd));
          }
          return;
        }
      }
      else // check namespace as well
      {
        const NamespaceDef *mnd = getResolvedNamespace(scope);
        if (mnd)
        {
          const MemberDef *mmd=mnd->getMemberByName(locName);
          if (mmd)
          {
            //printf("name=%s scope=%s\n",qPrint(locName),qPrint(scope));
            yyextra->theCallContext.setScope(ScopedTypeVariant(stripClassName(yyscanner,mmd->typeString(),mmd->getOuterScope())));
            writeMultiLineCodeLink(yyscanner,ol,mmd,clName);
            addToSearchIndex(yyscanner,className);
            const Definition *d = mmd->getOuterScope()==Doxygen::globalScope ?
                                  mmd->getBodyDef() : mmd->getOuterScope();
            if (mmd->getGroupDef()) d = mmd->getGroupDef();
            if (d && d->isLinkable() && mmd->isLinkable() &&
                yyextra->currentMemberDef && yyextra->collectXRefs && yyextra->insideBody)
            {
              std::lock_guard<std::mutex> lock(g_docCrossReferenceMutex);
              addDocCrossReference(toMemberDefMutable(yyextra->currentMemberDef),toMemberDefMutable(mmd));
            }
            return;
          }
        }
      }
    }

    // nothing found, just write out the word
    codifyLines(yyscanner,clName);
    addToSearchIndex(yyscanner,clName);
  }
}

//-------------------------------------------------------------------------------

/*
   As of June 1, this function seems to work
   for file members, but scopes are not
   being correctly tracked for classes
   so it doesn't work for classes yet.

*/
static void generateFunctionLink(yyscan_t yyscanner,
                                CodeOutputInterface &ol,
                                const QCString &funcName)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  QCString locScope=yyextra->classScope;
  QCString locFunc=removeRedundantWhiteSpace(funcName);
  DBG_CTX((stdout,"*** locScope=%s locFunc=%s\n",qPrint(locScope),qPrint(locFunc)));
  int i=locFunc.findRev("::");
  if (i>0)
  {
    locScope=locFunc.left(i);
    locFunc=locFunc.right(locFunc.length()-i-2).stripWhiteSpace();
  }
  //printf("generateFunctionLink(%s) classScope='%s'\n",qPrint(locFunc),qPrint(locScope));
  if (!locScope.isEmpty())
  {
    auto it = yyextra->codeClassMap.find(locScope.str());
    if (it!=yyextra->codeClassMap.end())
    {
      ScopedTypeVariant ccd = it->second;
      //printf("using classScope %s\n",qPrint(yyextra->classScope));
      if (ccd.localDef() && !ccd.localDef()->baseClasses().empty())
      {
        for (const auto &bcName : ccd.localDef()->baseClasses())
        {
          if (getLink(yyscanner,bcName,locFunc,ol,funcName))
          {
            return;
          }
        }
      }
    }
  }
  if (!getLink(yyscanner,locScope,locFunc,ol,funcName))
  {
    generateClassOrGlobalLink(yyscanner,ol,funcName);
  }
  return;
}

//-------------------------------------------------------------------------------

static bool findMemberLink(yyscan_t yyscanner,
                           CodeOutputInterface &ol,
                           const Definition *sym,
                           const QCString &symName)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("sym %s outerScope=%s equal=%d\n",
  //    qPrint(sym->name()),qPrint(sym->getOuterScope()->name()),
  //    sym->getOuterScope()==yyextra->currentDefinition);

  if (sym->getOuterScope() &&
      sym->getOuterScope()->definitionType()==Definition::TypeClass &&
      yyextra->currentDefinition->definitionType()==Definition::TypeClass)
  {
    const ClassDef *cd = toClassDef(sym->getOuterScope());
    const ClassDef *thisCd = toClassDef(yyextra->currentDefinition);
    if (sym->definitionType()==Definition::TypeMember)
    {
      if (yyextra->currentMemberDef && yyextra->collectXRefs)
      {
        std::lock_guard<std::mutex> lock(g_docCrossReferenceMutex);
        addDocCrossReference(toMemberDefMutable(yyextra->currentMemberDef),toMemberDefMutable(toMemberDef(sym)));
      }
    }
    DBG_CTX((stderr,"cd=%s thisCd=%s\n",cd?qPrint(cd->name()):"<none>",thisCd?qPrint(thisCd->name()):"<none>"));

    // TODO: find the nearest base class in case cd is a base class of
    // thisCd
    if (cd==thisCd || (thisCd && thisCd->isBaseClass(cd,TRUE)))
    {
      writeMultiLineCodeLink(yyscanner,ol,sym,symName);
      return TRUE;
    }
  }
  return FALSE;
}

//-------------------------------------------------------------------------------

static void findMemberLink(yyscan_t yyscanner,
                           CodeOutputInterface &ol,
                           const QCString &symName)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  //printf("Member reference: %s scope=%s member=%s\n",
  //    yytext,
  //    yyextra->currentDefinition?qPrint(yyextra->currentDefinition->name()):"<none>",
  //    yyextra->currentMemberDef?qPrint(yyextra->currentMemberDef->name()):"<none>"
  //    );
  bool found = false;
  if (yyextra->currentDefinition)
  {
    auto v = Doxygen::symbolMap->find(symName);
    for (auto p : v)
    {
      if (findMemberLink(yyscanner,ol,p,symName)) found = true;
    }
  }
  //printf("sym %s not found\n",&yytext[5]);
  if (!found) codify(yyscanner,symName);
}


//-------------------------------------------------------------------------------

struct PythonCodeParser::Private
{
  yyscan_t yyscanner;
  pycodeYY_state state;
};

PythonCodeParser::PythonCodeParser() : p(std::make_unique<Private>())
{
  pycodeYYlex_init_extra(&p->state,&p->yyscanner);
#ifdef FLEX_DEBUG
  pycodeYYset_debug(1,p->yyscanner);
#endif
  resetCodeParserState();
}

PythonCodeParser::~PythonCodeParser()
{
  pycodeYYlex_destroy(p->yyscanner);
}

void PythonCodeParser::resetCodeParserState()
{
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;
  yyextra->codeClassMap.clear();
  yyextra->currentDefinition = 0;
  yyextra->currentMemberDef = 0;
  yyextra->doubleStringIsDoc = FALSE;
  yyextra->paramParens = 0;
  while (!yyextra->indents.empty()) yyextra->indents.pop();
  BEGIN( Body );
}

void PythonCodeParser::parseCode(CodeOutputInterface &codeOutIntf,
    const QCString &scopeName,
    const QCString &input,
    SrcLangExt /*lang*/,
    bool isExampleBlock,
    const QCString &exampleName,
    const FileDef *fileDef,
    int startLine,
    int endLine,
    bool inlineFragment,
    const MemberDef *memberDef,
    bool showLineNumbers,
    const Definition *searchCtx,
    bool collectXRefs
    )
{
  yyscan_t yyscanner = p->yyscanner;
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;

  //printf("***parseCode()\n");

  if (input.isEmpty()) return;
  printlex(yy_flex_debug, TRUE, __FILE__, fileDef ? qPrint(fileDef->fileName()): NULL);
  yyextra->fileName      = fileDef ? fileDef->fileName():"";
  yyextra->code = &codeOutIntf;
  yyextra->inputString   = input.data();
  yyextra->inputPosition = 0;
  yyextra->currentFontClass = 0;
  yyextra->insideCodeLine = FALSE;
  yyextra->searchCtx=searchCtx;
  yyextra->collectXRefs=collectXRefs;
  if (startLine!=-1)
    yyextra->yyLineNr    = startLine;
  else
    yyextra->yyLineNr    = 1;
  if (endLine!=-1)
    yyextra->inputLines  = endLine+1;
  else
    yyextra->inputLines  = yyextra->yyLineNr + countLines(yyscanner) - 1;


  yyextra->exampleBlock  = isExampleBlock;
  yyextra->exampleName   = exampleName;
  yyextra->sourceFileDef = fileDef;
  yyextra->symbolResolver.setFileScope(fileDef);

  bool cleanupSourceDef = FALSE;
  if (yyextra->exampleBlock && fileDef==0)
  {
    // create a dummy filedef for the example
    yyextra->sourceFileDef = createFileDef("",(!exampleName.isEmpty()?qPrint(exampleName):"generated"));
    cleanupSourceDef = TRUE;
  }
  if (yyextra->sourceFileDef)
  {
    setCurrentDoc(yyscanner,"l00001");
  }

  yyextra->includeCodeFragment = inlineFragment;
  // Starts line 1 on the output
  startCodeLine(yyscanner);

  pycodeYYrestart(0,yyscanner);

  pycodeYYlex(yyscanner);

  if (!yyextra->indents.empty())
  {
    // printf("Exited pysourceparser in inconsistent state!\n");
  }

  if (yyextra->insideCodeLine)
  {
    endCodeLine(yyscanner);
  }
  if (cleanupSourceDef)
  {
    // delete the temporary file definition used for this example
    delete yyextra->sourceFileDef;
    yyextra->sourceFileDef=0;
  }
  // write the tooltips
  yyextra->tooltipManager.writeTooltips(codeOutIntf);
  printlex(yy_flex_debug, FALSE, __FILE__, fileDef ? qPrint(fileDef->fileName()): NULL);
}

static inline void pop_state(yyscan_t yyscanner)
{
  struct yyguts_t *yyg = (struct yyguts_t*)yyscanner;
  if ( yyg->yy_start_stack_ptr <= 0 )
    warn(yyextra->fileName,yyextra->yyLineNr,"Unexpected statement '%s'",yytext );
  else
    yy_pop_state(yyscanner);
}

#if USE_STATE2STRING
#include "pycode.l.h"
#endif

