#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pre_intermediate.cpp"
#include <stdint.h>
// forward declare yyscan_t to improve type safety
#define YY_TYPEDEF_YY_SCANNER_T
struct yyguts_t;
typedef yyguts_t *yyscan_t;

#line 8 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pre_intermediate.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer preYY_create_buffer

    #define yy_delete_buffer preYY_delete_buffer

    #define yy_scan_buffer preYY_scan_buffer

    #define yy_scan_string preYY_scan_string

    #define yy_scan_bytes preYY_scan_bytes

    #define yy_init_buffer preYY_init_buffer

    #define yy_flush_buffer preYY_flush_buffer

    #define yy_load_buffer_state preYY_load_buffer_state

    #define yy_switch_to_buffer preYY_switch_to_buffer

    #define yypush_buffer_state preYYpush_buffer_state

    #define yypop_buffer_state preYYpop_buffer_state

    #define yyensure_buffer_stack preYYensure_buffer_stack

    #define yylex preYYlex

    #define yyrestart preYYrestart

    #define yylex_init preYYlex_init

    #define yylex_init_extra preYYlex_init_extra

    #define yylex_destroy preYYlex_destroy

    #define yyget_debug preYYget_debug

    #define yyset_debug preYYset_debug

    #define yyget_extra preYYget_extra

    #define yyset_extra preYYset_extra

    #define yyget_in preYYget_in

    #define yyset_in preYYset_in

    #define yyget_out preYYget_out

    #define yyset_out preYYset_out

    #define yyget_leng preYYget_leng

    #define yyget_text preYYget_text

    #define yyget_lineno preYYget_lineno

    #define yyset_lineno preYYset_lineno

        #define yyget_column preYYget_column

        #define yyset_column preYYset_column

    #define yywrap preYYwrap

    #define yyalloc preYYalloc

    #define yyrealloc preYYrealloc

    #define yyfree preYYfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void preYYrestart ( FILE *input_file , yyscan_t yyscanner );
void preYY_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE preYY_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void preYY_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void preYY_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void preYYpush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void preYYpop_buffer_state ( yyscan_t yyscanner );

static void preYYensure_buffer_stack ( yyscan_t yyscanner );
static void preYY_load_buffer_state ( yyscan_t yyscanner );
static void preYY_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE preYY_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE preYY_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE preYY_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *preYYalloc ( yy_size_t , yyscan_t yyscanner );
void *preYYrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void preYYfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer preYY_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 234
#define YY_END_OF_BUFFER 235
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1783] =
    {   0,
      146,  146,  217,  217,  235,  233,  234,    1,  233,  234,
      232,  234,    3,  233,  234,  233,  234,  233,  234,    2,
      233,  234,   13,  233,  234,    1,   13,  233,  234,   13,
      233,  234,   13,  232,  234,    3,   13,  233,  234,    5,
      233,  234,   13,  233,  234,   13,  233,  234,   13,  233,
      234,   13,  233,  234,   13,  233,  234,   13,  233,  234,
        2,   13,  233,  234,   86,  233,  234,    1,   86,  233,
      234,   81,  232,  234,    3,   86,  233,  234,   86,  233,
      234,   86,  233,  234,   83,   86,  233,  234,   83,   86,
      233,  234,   83,   86,  233,  234,   83,   86,  233,  234,

       83,   86,  233,  234,   83,   86,  233,  234,   83,   86,
      233,  234,    2,   86,  233,  234,  121,  233,  234,    1,
      121,  233,  234,  119,  232,  234,    3,  121,  233,  234,
      121,  233,  234,  121,  233,  234,  120,  121,  233,  234,
      120,  121,  233,  234,  120,  121,  233,  234,    2,  121,
      233,  234,  122,  125,  233,  234,    1,  122,  125,  233,
      234,  130,  232,  234,    3,  122,  125,  233,  234,  124,
      125,  233,  234,  125,  233,  234,  125,  233,  234,  122,
      125,  233,  234,    2,  122,  125,  233,  234,  131,  134,
      233,  234,    1,  131,  134,  233,  234,    3,  131,  134,

      233,  234,  133,  134,  233,  234,  131,  134,  233,  234,
      131,  134,  233,  234,  134,  233,  234,    2,  131,  134,
      233,  234,   47,  233,  234,    1,   47,  233,  234,   48,
      232,  234,    3,   47,  233,  234,   28,   47,  233,  234,
       29,   47,  233,  234,   47,  233,  234,   47,  233,  234,
       47,  233,  234,   44,   47,  233,  234,16427,   44,   47,
      233,  234,16427,   44,   47,  233,  234,16427,   47,  233,
      234,   44,   47,  233,  234,16427,   44,   47,  233,  234,
    16427,   21,   47,  233,  234,   23,   47,  233,  234,    2,
       47,  233,  234,   47,  233,  234,   30,  233,  234,    1,

       30,  233,  234,   33,  233,  234,   30,  233,  234,   30,
      233,  234,  233,  234,    2,   30,  233,  234,   31,  233,
      234,    1,   31,  233,  234,   31,  233,  234,   31,  233,
      234,    2,   31,  233,  234,   37,  233,  234,    1,   37,
      233,  234,   39,  233,  234,   37,  233,  234,   37,  233,
      234,  233,  234,    2,   37,  233,  234,   34,  233,  234,
        1,   34,  233,  234,   36,  233,  234,   34,  233,  234,
       34,  233,  234,  233,  234,    2,   34,  233,  234,   41,
       42,  233,  234,    1,   41,   42,  233,  234,   41,  232,
      234,    3,   41,   42,  233,  234,   42,  233,  234,   41,

       42,  233,  234,   41,   42,  233,  234,    2,   41,   42,
      233,  234,  233,  234,    1,  233,  234,    3,  233,  234,
      233,  234,  233,  234,    2,  233,  234,  136,  233,  234,
      140,  233,  234,    1,  140,  233,  234,  138,  232,  234,
        3,  140,  233,  234,  140,  233,  234,  140,  233,  234,
      140,  233,  234,    2,  140,  233,  234, 8336,  233,  234,
    16525,16527,16528,  146,  233,  234,  148,  233,  234,  149,
      233,  234,  147,  233,  234,  233,  234,  151,  233,  234,
      233,  234,  228,  233,  234,    1,  228,  233,  234,  217,
      228,  233,  234,  216,  232,  234,    3,  228,  233,  234,

      220,  228,  233,  234,  228,  233,  234,  221,  228,  233,
      234,  228,  233,  234,  228,  233,  234,  219,  228,  233,
      234,  213,  228,  233,  234,  228,  233,  234,    2,  228,
      233,  234,  114,  233,  234,    1,  114,  233,  234,  113,
      232,  234,    3,  114,  233,  234,  114,  233,  234,  114,
      233,  234,    2,  114,  233,  234,  112,  114,  233,  234,
        1,  112,  114,  233,  234,  112,  114,  233,  234,  112,
      113,  232,  234,    3,  112,  114,  233,  234,  111,  114,
      233,  234,  112,  114,  233,  234,  112,  114,  233,  234,
        2,  112,  114,  233,  234,  188,  190,  233,  234,    1,

      190,  233,  234,  189,  232,  234,    3,  188,  190,  233,
      234,  190,  233,  234,  190,  233,  234,  188,  190,  233,
      234,  190,  233,  234,  190,  233,  234,  190,  233,  234,
        2,  188,  190,  233,  234,  188,  190,  233,  234,  190,
      233,  234,  190,  233,  234,  190,  233,  234,   58,   61,
      233,  234,    1,   58,   61,  233,  234,   60,  232,  234,
        3,   58,   61,  233,  234,   61,  233,  234,   58,   61,
      233,  234,   58,   61,  233,  234,    2,   58,   61,  233,
      234,  191,  214,  233,  234,    1,  191,  214,  233,  234,
      194,  232,  234,    3,  191,  214,  233,  234,  214,  233,

      234,  191,  214,  233,  234,  191,  214,  233,  234,  213,
      214,  233,  234,  214,  233,  234,    2,  191,  214,  233,
      234,  190,  233,  234,  190,  233,  234,  190,  233,  234,
      188,  190,  233,  234,  190,  233,  234,  190,  233,  234,
      190,  233,  234,  202,  206,  207,  233,  234,    1,  202,
      207,  233,  234,  203,  232,  234,    3,  202,  206,  207,
      233,  234,  206,  207,  233,  234,  202,  206,  207,  233,
      234,  207,  233,  234,    2,  202,  206,  207,  233,  234,
      187,  233,  234,    1,  187,  233,  234,  186,  232,  234,
        3,  187,  233,  234,  187,  233,  234,  187,  233,  234,

      184,  187,  233,  234,  185,  187,  233,  234,    2,  187,
      233,  234,  199,  201,  233,  234,    1,  201,  233,  234,
      200,  232,  234,    3,  199,  201,  233,  234,  201,  233,
      234,  199,  201,  233,  234,  199,  201,  233,  234,    2,
      199,  201,  233,  234,  210,  211,  233,  234,    1,  211,
      233,  234,    3,  210,  211,  233,  234,  210,  211,  233,
      234,  210,  211,  233,  234,    2,  210,  211,  233,  234,
      103,  233,  234,    1,  103,  233,  234,  104,  232,  234,
        3,  103,  233,  234,  103,  233,  234,  103,  233,  234,
      102,  103,  233,  234,  101,  103,  233,  234,  103,  233,

      234,  101,  103,  233,  234,  101,  103,  233,  234,  101,
      103,  233,  234,  101,  103,  233,  234,  101,  103,  233,
      234,  101,  103,  233,  234,  101,  103,  233,  234,  101,
      103,  233,  234,  101,  103,  233,  234,    2,  103,  233,
      234,  110,  233,  234,    1,  110,  233,  234,  108,  232,
      234,    3,  110,  233,  234,  110,  233,  234,  110,  233,
      234,  106,  110,  233,  234,  110,  233,  234,    2,  110,
      233,  234,  109,  110,  233,  234,  107,  110,  233,  234,
      227,  233,  234,    1,  227,  233,  234,    3,  227,  233,
      234,  224,  227,  233,  234,  227,  233,  234,  227,  233,

      234,  227,  233,  234,    2,  227,  233,  234,  226,  227,
      233,  234,  227,  233,  234,   87,  233,  234,   85,  233,
      234,    1,   85,  233,  234,    3,   85,  233,  234,   85,
      233,  234,   85,  233,  234,   85,  233,  234,    2,   85,
      233,  234,   57,  233,  234,    1,   57,  233,  234,   55,
      232,  234,    3,   57,  233,  234,   53,   57,  233,  234,
       54,   57,  233,  234,   49,   57,  233,  234,   50,   57,
      233,  234,   57,  233,  234,   57,  233,  234,   56,   57,
      233,  234,    2,   57,  233,  234,   67,  233,  234,    1,
       67,  233,  234,    3,   67,  233,  234,   62,   67,  233,

      234,   63,   67,  233,  234,   67,  233,  234,   67,  233,
      234,   67,  233,  234,    2,   67,  233,  234,  170,  233,
      234,    1,  170,  233,  234,  169,  170,  233,  234,    3,
      170,  233,  234,  170,  233,  234,  170,  233,  234,    2,
      170,  233,  234,  173,  174,  233,  234,    1,  173,  174,
      233,  234,  172,  232,  234,    3,  173,  174,  233,  234,
      173,  233,  234,  173,  233,  234,  173,  174,  233,  234,
      173,  233,  234,    2,  173,  174,  233,  234,   12,  233,
      234,    1,   12,  233,  234,   11,  232,  234,    3,   12,
      233,  234,   12,  233,  234,   12,  233,  234,   12,  233,

      234,   12,  233,  234,    2,   12,  233,  234,  230,  231,
       13,   13,    5,   13,   13,   13,    6,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,  129,  230,  127,
      231,  120,  120,  120,  120,  122,  122,  131,  128,  131,
      230,  126,  131,  231,  131,  132,   27, 8235,   44,16427,
       44,16427,   46,   45,   46,   44,16427,   44,16427,   22,
       30,   30,  230,   30,  231,   30,   32,   31,   31,  230,
       31,  231,   31,   37,   37,  230,   37,  231,   37,   38,
       34,   34,  230,   34,  231,   34,   35,   41,   40,   41,
      230,   41,  231,   41,  137,  230,  231,  135,  136,  138,

      230,  231,  139, 8336, 8335, 8333, 8336,16525,16527,16528,
      146,  149,  148,  149,  147,  151,  151,  145,  217,  218,
      212,  152,  230,  153,  231,  213,  215,  112,  112,  111,
      188,  154,  156,  230,  155,  231,  188,  188,   58,   59,
       58,  231,   58,  191,  193,  191,  231,  191,  192,  191,
      183,  183,  230,  188,  202,  206,  202,  206,  204,  206,
      230,  205,  206,  231,  202,  206,  199,  196,  198,  230,
      197,  199,  231,  199,  210,  208,  210,  230,  209,  210,
      231,  210,  101,   88,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  106,  105,  107,  223,  230,  222,  231,

      225,   87,   84,   52,  230,   64,  230,   64,  231,   66,
       65,   66,  169,  174,  230,  231,  174,   10,    9,    8,
      230,  230,  231,    4,   83,   83,   83,   83,   83,   75,
       83,   83,   83,   83,   83,   83,  129,  129,  230,  129,
      230,  127,  127,  231,  120,  120,  120,  115,  120,  120,
      123,    4,  122,  128,  131,  128,  131,  230,  128,  128,
      131,  230,  126,  131,  126,  131,  231,  126,    4,  131,
       26,   26,   20,   44,16427,   30,  230,   30,  230,   30,
      231,    4,   30,   31,  230,   31,  230,   31,  231,    4,
       31,   37,  230,   37,  230,   37,  231,    4,   37,   34,

      230,   34,  230,   34,  231,    4,   34,   40,   41,  230,
       41,  230,   41,  231,    4,   41,  230,  230,  231,    4,
        4,  137,  230,  230,  231,    4,  150,  218,  152,  230,
      152,  230,  153,  231,  155,  231,    4,  188,  188,  159,
      158,   58,  231,    4,   58,  191,  231,    4,  191,  180,
      188,  182,  181,  206,  230,  206,  230,  206,  231,    4,
      202,  206,    4,  206,  195,  199,  231,    4,  199,  210,
      230,  210,  230,  210,  231,    4,  210,  101,  101,  101,
      101,  101,  101,   96,  101,  101,  223,  230,  222,  231,
       51,   52,  230,  176,  230,  176,  230,  175,  231,    4,

      174,  229,16398,16402,16398,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,  129,  229,  120,  116,
      120,  120,  120,  123,  128,  131,  229,   25,   24,   25,
       44,16427,   30,  229,   31,  229,   37,  229,   34,  229,
       40,   41,  229,  229,  229,  142,  151,  155,  157,  188,
      159,  158,  188,  182,  181,  206,  229,  210,  229,   95,
      101,  101,  101,  101,  101,   93,  101,  101,   99,   51,
    16398,16402,   16, 8206,   83,   83,   76,   79,   77,   77,
       83,   83,   83,   83,   83,   83,   83,   83,  117,  120,
      118,  120,  120,   24,   44,16427,   40,  161,  101,  101,

      101,  101,  101,  101,   91,   91,16401, 8206,   16, 8210,
       83,   83,   80,   72,   71,   83,   83,   83,   83,   78,
       44,16427,   40,  160,  168,  171,  167,  101,   98,  100,
      101,   92,   92,  101,  163,   15, 8210,   16,   70,   74,
       73,16452,   69,   40,  166,  164,   97,  101,   94,  162,
     8209,   16, 8260,   40,   90,   89,   16, 8260,   19,   40,
      179,  178,   16,   19,   19,   40,  177,  165,   16,    7,
       82,   40,   16,   40,   16,   40,   16,   40,   40,   40,
       40,   40
    } ;

static const flex_int16_t yy_accept[1456] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    6,    8,   11,   13,   16,   18,   20,
       23,   26,   30,   33,   36,   40,   43,   46,   49,   52,

       55,   58,   61,   65,   68,   72,   75,   79,   82,   85,
       89,   93,   97,  101,  105,  109,  113,  117,  120,  124,
      127,  131,  134,  137,  141,  145,  149,  153,  157,  162,
      165,  170,  174,  177,  180,  184,  189,  193,  198,  203,
      207,  211,  215,  218,  223,  226,  230,  233,  237,  241,
      245,  248,  251,  254,  259,  264,  269,  272,  277,  282,
      286,  290,  294,  297,  300,  304,  307,  310,  313,  315,
      319,  322,  326,  329,  332,  336,  339,  343,  346,  349,
      352,  354,  358,  361,  365,  368,  371,  374,  376,  380,
      384,  389,  392,  397,  400,  404,  408,  413,  415,  418,

      421,  423,  425,  428,  431,  434,  438,  441,  445,  448,
      451,  454,  458,  464,  467,  470,  473,  476,  478,  481,
      483,  486,  490,  494,  497,  501,  505,  508,  512,  515,
      518,  522,  526,  529,  533,  536,  540,  543,  547,  550,
      553,  557,  561,  566,  570,  574,  579,  583,  587,  591,
      596,  600,  604,  607,  612,  615,  618,  622,  625,  628,
      631,  636,  640,  643,  646,  649,  653,  658,  661,  666,
      669,  673,  677,  682,  686,  691,  694,  699,  702,  706,
      710,  714,  717,  722,  725,  728,  731,  735,  738,  741,
      744,  749,  754,  757,  763,  767,  772,  775,  781,  784,

      788,  791,  795,  798,  801,  805,  809,  813,  817,  821,
      824,  829,  832,  836,  840,  845,  849,  853,  858,  862,
      866,  871,  874,  878,  881,  885,  888,  891,  895,  899,
      902,  906,  910,  914,  918,  922,  926,  930,  934,  938,
      942,  945,  949,  952,  956,  959,  962,  966,  969,  973,
      977,  981,  984,  988,  992,  996,  999, 1002, 1005, 1009,
     1013, 1016, 1019, 1022, 1026, 1030, 1033, 1036, 1039, 1043,
     1046, 1050, 1053, 1057, 1061, 1065, 1069, 1073, 1076, 1079,
     1083, 1087, 1090, 1094, 1098, 1102, 1106, 1109, 1112, 1115,
     1119, 1122, 1126, 1130, 1134, 1137, 1140, 1144, 1148, 1153,

     1156, 1161, 1164, 1167, 1171, 1174, 1179, 1182, 1186, 1189,
     1193, 1196, 1199, 1202, 1205, 1209, 1210, 1211, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1217, 1218, 1218, 1218, 1218,
     1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
     1230, 1232, 1233, 1234, 1235, 1236, 1237, 1237, 1237, 1238,
     1239, 1242, 1245, 1246, 1247, 1247, 1247, 1248, 1248, 1249,
     1251, 1253, 1253, 1254, 1255, 1256, 1258, 1260, 1261, 1262,
     1264, 1266, 1267, 1268, 1269, 1271, 1273, 1274, 1275, 1277,
     1279, 1280, 1281, 1282, 1284, 1286, 1287, 1288, 1289, 1289,
     1290, 1292, 1294, 1295, 1295, 1296, 1297, 1298, 1298, 1298,

     1299, 1300, 1300, 1301, 1302, 1303, 1303, 1304, 1304, 1305,
     1306, 1307, 1311, 1311, 1312, 1313, 1314, 1315, 1316, 1316,
     1317, 1317, 1318, 1319, 1320, 1320, 1321, 1322, 1324, 1326,
     1327, 1328, 1328, 1329, 1330, 1331, 1332, 1333, 1335, 1337,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1340, 1341, 1343, 1344, 1345, 1345, 1346, 1348, 1349,
     1350, 1351, 1352, 1354, 1354, 1354, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1357, 1358, 1359, 1362, 1365, 1367, 1367,
     1367, 1368, 1369, 1371, 1374, 1375, 1376, 1379, 1382, 1383,

     1384, 1385, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
     1393, 1394, 1395, 1396, 1397, 1399, 1401, 1402, 1403, 1404,
     1404, 1404, 1404, 1406, 1408, 1410, 1411, 1412, 1413, 1414,
     1415, 1416, 1417, 1418, 1418, 1418, 1418, 1418, 1419, 1420,
     1421, 1422, 1423, 1424, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
     1435, 1436, 1437, 1438, 1440, 1442, 1443, 1445, 1446, 1447,
     1448, 1449, 1450, 1451, 1451, 1452, 1452, 1452, 1454, 1456,
     1459, 1460, 1463, 1465, 1468, 1469, 1471, 1472, 1472, 1473,
     1473, 1473, 1473, 1474, 1476, 1478, 1480, 1482, 1484, 1486,

     1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506,
     1508, 1508, 1509, 1511, 1513, 1515, 1517, 1518, 1519, 1520,
     1521, 1523, 1524, 1525, 1526, 1527, 1527, 1527, 1528, 1528,
     1529, 1531, 1533, 1535, 1537, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540,
     1540, 1541, 1542, 1544, 1546, 1548, 1550, 1550, 1551, 1551,
     1552, 1552, 1553, 1554, 1556, 1558, 1560, 1563, 1565, 1565,
     1565, 1565, 1566, 1568, 1570, 1572, 1574, 1576, 1578, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1589, 1591,

     1591, 1592, 1592, 1592, 1594, 1596, 1598, 1600, 1602, 1602,
     1602, 1602, 1603, 1603, 1603, 1603, 1605, 1605, 1606, 1606,
     1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
     1617, 1619, 1620, 1622, 1623, 1624, 1624, 1625, 1625, 1628,
     1629, 1631, 1631, 1631, 1631, 1633, 1635, 1637, 1639, 1641,
     1641, 1642, 1644, 1645, 1646, 1647, 1648, 1649, 1649, 1649,
     1649, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
     1650, 1650, 1650, 1650, 1651, 1651, 1652, 1653, 1653, 1653,
     1654, 1654, 1655, 1656, 1658, 1658, 1658, 1660, 1661, 1662,

     1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1670, 1671,
     1671, 1671, 1671, 1671, 1671, 1673, 1673, 1674, 1674, 1674,
     1675, 1675, 1676, 1677, 1679, 1680, 1681, 1682, 1683, 1684,
     1685, 1686, 1687, 1688, 1689, 1690, 1690, 1691, 1693, 1694,
     1694, 1694, 1695, 1695, 1695, 1695, 1697, 1697, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
     1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
     1699, 1699, 1699, 1699, 1699, 1699, 1700, 1701, 1702, 1703,
     1704, 1705, 1706, 1707, 1707, 1707, 1707, 1707, 1707, 1707,

     1707, 1707, 1707, 1708, 1708, 1709, 1709, 1710, 1710, 1711,
     1711, 1712, 1713, 1713, 1713, 1714, 1715, 1716, 1717, 1718,
     1719, 1720, 1721, 1721, 1721, 1721, 1723, 1723, 1724, 1724,
     1724, 1724, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725,
     1725, 1725, 1726, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727, 1727, 1727, 1727, 1728, 1729, 1730, 1731, 1732,
     1733, 1734, 1734, 1735, 1735, 1735, 1736, 1736, 1736, 1736,
     1736, 1737, 1737, 1738, 1738, 1739, 1739, 1739, 1740, 1740,
     1741, 1742, 1743, 1744, 1744, 1744, 1744, 1744, 1744, 1744,

     1744, 1745, 1745, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1747, 1748, 1749, 1749, 1750, 1751,
     1751, 1751, 1751, 1752, 1752, 1753, 1753, 1753, 1754, 1754,
     1754, 1754, 1754, 1754, 1754, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1756, 1757, 1757, 1757, 1757, 1757, 1758, 1758,
     1758, 1759, 1759, 1759, 1759, 1759, 1760, 1760, 1761, 1761,

     1761, 1761, 1761, 1761, 1761, 1761, 1762, 1762, 1762, 1762,
     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1763, 1763, 1763,
     1763, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1765,
     1766, 1766, 1767, 1767, 1768, 1768, 1768, 1769, 1769, 1769,
     1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1769, 1770,
     1770, 1770, 1771, 1772, 1772, 1772, 1772, 1772, 1773, 1773,
     1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1774,
     1774, 1774, 1774, 1774, 1774, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1776, 1776, 1776, 1776, 1776, 1776, 1777, 1777,
     1777, 1777, 1777, 1778, 1778, 1778, 1778, 1778, 1778, 1779,

     1779, 1779, 1779, 1779, 1779, 1779, 1779, 1780, 1780, 1780,
     1780, 1780, 1781, 1781, 1781, 1781, 1781, 1782, 1782, 1782,
     1782, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,

     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783,
     1783, 1783, 1783, 1783, 1783
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,    1,   16,   17,   18,   19,   20,   21,   20,
       20,   20,   20,   20,   20,   22,   23,   24,    1,   25,
       26,   27,   28,   29,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   31,   30,   30,   30,   30,
       30,   32,   30,   30,   33,   30,   30,   30,   30,   30,
       34,   35,   36,    1,   37,   38,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   48,   61,
       62,   48,   63,   11,   64,   65,    1,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    1,    1,
        9,   10,   11,   12,   13,    1,    9,   14,   15,   16,
       16,   16,   16,    1,   17,    1,    1,    1,   18,   19,
       19,   19,   19,    1,   20,    1,   19,   21,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,    1,   21,    1
    } ;

static const flex_int16_t yy_base[1648] =
    {   0,
        0,    4,    8,   74,  140,    0,  206,    0,  271,  275,
      291,  304,  370,    0,    0, 5325,  435,  439,  443,  471,
      475,  479,  511,  515,  519,  547,  551,  555,  621,    0,
      686,  690,  727,    0,  789,    0,  855,    0,  696,  920,
      985, 1050,  925,  930, 1116,    0, 1181, 1246,  950,  990,
      969,  979, 1042, 1186, 1193, 1213, 1312,    0, 1378,    0,
     1431,    0, 1235, 1492, 1496, 1500, 1537,    0, 1536, 1599,
     1664, 1729, 1604, 1624, 1795, 1861,    0,    0, 1926, 1991,
     1644, 1680, 5333, 7327, 7327, 7327, 7327,    1, 5304, 7327,
     7327, 7327, 2057, 7327, 7327, 7327,    0,    2, 5299,   17,

        0, 5263, 7327, 7327, 7327, 7327, 7327,    3, 5284,    0,
     5260, 5250,    1,    8, 5235, 5238, 7327, 7327, 7327, 7327,
     7327,   10, 5257,    0,    5, 5228, 7327,    0,    0, 7327,
        0, 7327, 5235,   11, 5241,    0,    0,    0,    0, 7327,
       16, 5236,    0,    0, 7327, 7327, 7327, 7327, 7327, 5221,
       26, 5219, 5236,  309,  312,  342,   10,  523,  330, 7327,
     7327, 7327, 5178,    0,    0, 7327,   27, 5212,    0,    0,
        0,    0,   46, 5211,    0,    0,    0, 7327,   49, 5210,
        0,    0,    0,    0, 7327,   52, 5209,    0,    0,    0,
        0,    0,    0, 5228,   54, 5206,    0,   17,  274,  277,

      321,  293,  278,   30, 5229, 5228, 7327, 5227,  323,  303,
      284, 5206,  453,  283, 5186, 5165, 5160, 5132,  347, 5143,
     7327, 7327,  321, 7327, 7327, 7327, 5118, 7327,  339, 5093,
     7327,    0,  287, 7327, 7327, 7327, 7327, 7327,  341, 5077,
     7327, 7327, 7327,  356, 7327, 7327, 7327,  348, 5067, 7327,
        0, 7327, 7327,    0, 5071,  434, 5059, 2095, 7327,  435,
        0,  529,  928, 5046, 4998,    0,    0, 7327,    0, 5023,
      436, 5009,    0, 5000, 4997, 7327, 4995, 5004,  450,  333,
        0,  507, 4986, 4997,  453,  416,  696,  961, 4977, 4948,
      487,    0, 7327,  506,  467,  552,  557,  529, 7327, 7327,

     7327, 7327,  477, 4983, 7327, 7327, 7327,    0, 7327, 7327,
        0, 4989,  478, 4978,    0,    0, 7327,    0,  485, 4977,
        0, 7327, 7327, 7327, 7327,  549, 4975, 7327,    0,  568,
     4950, 4921, 4909, 4898, 4881, 4865, 4852, 4843, 4844, 7327,
     7327, 7327, 7327, 7327,  550, 4866,    0, 4888, 7327, 7327,
        0, 7327, 7327, 7327, 7327,  572, 4850,    0, 7327, 7327,
      574,    0, 7327, 7327, 7327,  580, 4848,  592, 7327, 7327,
     7327, 7327, 7327, 7327, 4838, 7327, 7327,  586, 4843, 7327,
     7327, 7327, 7327, 7327, 7327, 7327,  587, 4840,  599, 7327,
     7327, 7327,    0, 7327,  592, 4829, 7327,    0,    0, 7327,

        0, 7327,  593, 4824,  667,    0, 7327, 7327, 7327, 7327,
      526,  595, 4822,   27, 7327,  446,  347,  714, 7327, 2156,
     7327, 1060,    0, 4782, 4777, 7327, 2220,  606,  690,    0,
     4785, 4771,  650, 4761,  959, 4740, 4748, 4747, 4742,  698,
      557,    0,  659, 4733, 1021,    0, 4761,  595, 1277,    0,
      730,  716, 1440, 7327, 4737,  726, 7327,  750, 7327,  933,
     1055, 4735, 7327, 7327, 4742, 1026, 1221, 7327,    0,  927,
      711, 1520, 7327,    0,  935,  713, 1692,    0,  945,  723,
     1747, 7327,    0,  953,  951, 1763, 7327,    0, 4737, 4736,
      997,  996, 1822, 1001, 7327, 1060, 1201, 2252,  964, 7327,

     1061, 4738, 7327, 1034, 1090, 2276, 7327, 4737, 1068, 7327,
     7327, 1200, 4736, 1003, 4736, 4735, 4734, 4733, 4717, 1018,
     4713, 1019, 7327,  740, 4722, 4725, 7327, 1071, 1092,    0,
     7327, 4723, 7327,  953, 7327,    0, 7327, 1095, 1093, 1888,
     2263, 4673, 4672, 4671, 4664, 4671, 4681, 4680, 4660, 4671,
     4642, 1073, 1054, 1191, 1228, 4654, 4625, 1220, 4651, 4623,
        0, 7327, 1183, 1923, 4652, 4650, 7327, 1263, 2319, 7327,
     1006, 7327, 1178, 4632, 1224, 1242, 1492, 4645, 4617, 1235,
     4643, 4615, 1253,    0,    0, 1221, 1258, 2353,  547, 4626,
        0, 1097, 1256, 1280, 1945,    0, 1261, 1286, 1961,    0,

     7327, 4656, 4613, 4589, 4595, 4594, 4576, 4539, 4589, 4520,
     4521,    0, 7327,    0, 1272, 1289, 7327,    0, 7327, 4572,
     4543,  729, 1291, 1441, 1497, 7327, 7327, 4546,    0,    0,
     1443, 1503, 1988,  577, 4487, 4483, 1208, 7327, 7327, 7327,
     7327, 4515, 7327, 7327, 4462, 1447, 1093, 1510, 4500, 1604,
     4464, 4445, 4443, 4431, 4425, 7327, 4428, 4403, 4391, 4392,
     4396, 4397,    0,    0, 4420,    0,    0, 4393, 4393, 4388,
     7327, 4391, 4391, 4400, 7327, 4379, 1530,    0,  267, 1514,
        0, 1537, 1518, 1598,    0,    0, 7327, 4374, 4361, 1540,
     1609, 4357, 7327, 1651,    0, 4336,    0,    0,    0, 4330,

        0,    0,    0, 4320,    0,    0,    0, 4315,    0,    0,
     4324, 4321,    0, 3779,    0,    0, 1536, 1618, 1593, 1603,
     7327, 3793, 1510, 3792, 3791, 1657, 1622, 7327, 3776, 3785,
     7327, 3766, 7327, 3757,    0, 3720, 3711, 3709, 1610, 3694,
     3700, 3710, 3701, 3680, 3694, 3677, 1523, 1580, 3684, 3674,
     3669, 3656, 3661, 3660, 3646, 3651, 3639, 3643, 1685, 1637,
     3651, 3615,    0,    0, 3643, 3642, 3626, 7327, 3622, 1686,
     1700, 3627, 3591,    0, 3635,    0, 1648,    0, 3600, 3592,
     1184, 7327,    0,    0,    0, 3623,    0,    0, 3638, 1710,
      315, 1507, 1639, 1621, 7327,  492, 3629, 3611, 7327, 3617,

     7327, 3608, 1700, 3599, 7327, 3598, 7327,    0, 3555, 3554,
     3563, 7327, 3533, 1504, 3580, 1782, 3579, 1788, 1713, 3541,
     3530, 1719, 2380, 3537, 3528, 3527, 3513, 3501, 3507, 3513,
        0, 1734, 1837, 1812, 1903, 3536, 7327, 1750, 1646, 7327,
     7327, 1796, 1878, 3533, 1907,    0,    0,    0,    0, 3538,
     3529,    0, 1700, 3530, 7327, 7327, 3514, 1687, 1633, 3482,
     7327, 3478, 3470, 3465, 3452, 3457, 3456, 3442, 3447, 3445,
     3444, 3445, 1751, 3435, 3424, 3415, 3421, 3409, 3408, 3412,
     3397, 3407, 3382,  960, 1714, 3400, 3372, 1981, 3364, 1533,
     1729, 3388, 3360,    0, 3364, 3372,    0, 7327,    4, 1503,

     1694, 1683, 1795, 7327, 1810, 1914, 7327, 3401, 7327, 1834,
     3352, 3360, 3360, 3378, 2444, 1980, 2221, 2224, 1436, 7327,
     1839, 3348, 3346, 7327, 7327, 1780, 3336, 2507, 1854, 3334,
     3319, 3326, 3327, 3362, 7327, 1861, 2005, 1940, 1963, 3344,
     3342, 7327, 3341, 2031, 3331, 2231, 3335, 3334, 3289, 3288,
     3289, 1918, 3279, 3305, 3267, 3250, 3263, 3252, 3243, 3254,
     3240, 2234, 1986, 3231, 2035, 3229, 3228, 3229, 3209, 3217,
     3208, 3219, 3205, 3205, 3203, 3192, 3183, 3176, 3183, 3185,
     3183, 3163, 3169, 3159, 2042, 1742, 3206, 3197, 1829, 2047,
     1823, 2050, 7327, 3194, 3185, 3176, 3144, 3182, 3123, 1889,

     2466, 2313, 2124, 2125, 1930, 2257, 2474, 2535, 7327, 2243,
     3131, 3170, 1930, 3120, 7327, 2122, 7327, 2260, 2267, 3119,
     3158, 3149, 3106, 2295, 3136, 2336, 3133, 3131, 2483, 3134,
     3075, 2128, 3073, 3072, 3073, 3053, 3061, 3052, 3063, 3049,
     3028, 2144, 7327, 2149, 3037, 3037, 3028, 3022, 3024, 3018,
     3016, 3007, 3006, 1871, 2998, 3011, 1898, 2993, 2995, 2983,
     2980, 2986, 2973, 2970, 2227, 3014, 7327, 7327, 1979, 2325,
     7327, 3004, 3003, 2347, 2999, 2997, 2943, 2544, 2550, 2344,
     7327, 1997, 2271, 2557, 2562, 2575, 2447, 2990, 2309, 2308,
     7327, 2350, 7327, 1725, 2355, 2448, 2979, 2452,    0, 2983,

     2982, 2916, 2965, 2914, 2912, 2909, 2895, 2893, 2892, 2881,
     2871, 2877, 2861, 2469, 2867, 2868, 2846, 2848, 2822, 2811,
     2796, 2792, 2768, 7327, 2790, 2780, 2772, 2761, 2744, 2750,
     2719, 2717, 2725, 2706, 7327, 2361, 2478, 7327, 2755, 2707,
     2586, 2579, 7327, 2592, 2619, 2623, 2451,    0, 2692, 2488,
     2725, 2626, 2726, 2721, 2696, 2628, 2492, 2627, 2620, 2611,
     2618, 2598, 2578, 2572, 2585, 2559, 2561,    0, 2550, 2552,
     2551, 2543, 2542, 2535, 2534, 2534, 2508, 2505, 2504, 2513,
     2499, 2463, 7327,    0, 2632, 2649, 2655, 2661, 2664, 2486,
        0, 2509, 2667, 2531, 2686, 2614, 2521, 2493, 2431,    0,

     2413, 2417, 2412, 2326, 2321, 7327, 2309, 2021, 2316, 2310,
     2304, 2303, 2292, 2285, 2276, 2276, 7327, 2697, 2693, 2701,
     2705, 2710, 2572, 2601, 2243, 2727, 2259, 2732, 2738, 7327,
     2261, 2260, 2203, 7327, 2192, 2199, 7327, 2198, 2100, 2095,
     2074, 1994, 1986, 1982, 1955, 2743, 2747, 2750, 2772, 2775,
     2680, 1989, 7327, 2778, 1968, 2781, 1972, 1953, 1902, 1876,
     1851, 1830, 1829, 1794, 1786, 2800, 2804, 2812, 2817, 2822,
     2829, 1796, 2840, 1774, 1707, 1633, 1628, 1585, 2845, 2852,
     2867, 2857, 2874, 2879, 1602, 2890, 1566, 1462, 1398, 2885,
     2897, 2909, 2902, 2914, 2919, 1297, 2936, 1261, 1223, 1137,

     2931, 2949, 2953, 1090, 2971,    4,   65, 2966,  317, 2978,
      344,  495, 2983,  676, 2994,  705,  919, 3000,  969, 3011,
     7327, 3006, 3018, 3023, 3030, 3035, 3042, 3047, 3054, 3059,
     3066, 3071, 3078, 3083, 3090, 3095, 3102, 3107, 3114, 3119,
     3126, 3131, 3138, 3143, 3150, 3155, 3162, 3167, 3174, 3179,
     3186, 3191, 3198, 3203, 3210, 3215, 3222, 3227, 3234, 3239,
     3246, 3251, 3258, 3263, 3270, 3275, 3282, 3287, 3294, 3299,
     3306, 3311, 3318, 3323, 3330, 3335, 3342, 3347, 3354, 3359,
     3366, 3371, 3378, 3383, 3390, 3395, 3402, 3407, 3414, 3419,
     3426, 3431, 3438, 3443, 3450, 3455, 3462, 3467, 3474, 3479,

     3486, 3491, 3498, 3503, 3510, 3515, 3522, 3527, 3534, 3539,
     3546, 3551, 3558, 3563, 3570, 3575, 3582, 3587, 3594, 3599,
     3606, 3611, 3618, 3623, 3630, 3635, 3642, 3647, 3654, 3659,
     3666, 3671, 3678, 3683, 3690, 3695, 3702, 3707, 3714, 3719,
     3726, 3731, 3738, 3743, 3750,  992, 3755, 3762, 3767, 3774,
     3779, 3786, 2499, 7327, 3799, 3820, 3841, 3862, 3883, 3904,
     3925, 3946, 3967, 3988, 4009, 4030, 4051, 4072, 4093, 4114,
     4135, 4156, 4177, 4198, 4219, 4240, 4261, 4282, 4303, 1949,
     2014, 2275, 4324, 4345, 4366, 4387, 4408, 4427, 4446, 4467,
     4488, 4509, 4530, 4551, 4572, 4593, 4614, 4635, 4656, 4675,

     4694, 4713, 4731, 1990, 2511, 4750, 4771, 4790, 4811, 4832,
     4853, 4874, 4895, 4916, 2590, 2625, 2629, 4937, 2659, 4958,
     4979, 4998, 5017, 2665, 2703, 5038, 5059, 2707, 5080, 5101,
     5122, 5143, 5164, 5185, 5206, 5225, 5244, 5265, 5286, 5307,
     5328, 5349, 5370, 5391, 5410, 5429, 5448, 5466, 2747, 5485,
     5506, 5525, 5546, 5567, 5588, 5609, 5630, 5651, 2771, 2773,
     2779, 2781, 5672, 5693, 5712, 5731, 5752, 5773, 5792, 2821,
     5811, 5832, 2835, 5853, 5874, 5895, 5916, 5937, 5958, 5979,
     6000, 6019, 6038, 6059, 6080, 6101, 6122, 6143, 6164, 6185,
     6206, 6225, 6246, 6267, 6288, 6309, 6330, 2849, 6351, 6372,

     6393, 6414, 6435, 6454, 2928, 6473, 6492, 6511, 6532, 6553,
     6574, 6595, 6616, 6637, 6658, 6679, 6700, 6721, 6740, 6759,
     6780, 6801, 6822, 2943, 6843, 6864, 6885, 6906, 6927, 6948,
     6969, 6990, 7011, 7032, 7053, 7074, 7095, 7116, 7137, 7158,
     7179, 7200, 7221, 7242, 7263, 7284, 7305
    } ;

static const flex_int16_t yy_def[1648] =
    {   0,
     1455, 1455, 1455, 1454, 1454,    5, 1454,    7, 1456, 1456,
     1457, 1457, 1454,   13,   13,   13, 1458, 1458, 1459, 1459,
     1460, 1460, 1461, 1461, 1462, 1462, 1463, 1463, 1454,   29,
     1464, 1464,   29,   33, 1454,   35, 1454,   37, 1465, 1466,
     1467, 1467, 1468, 1468, 1454,   45, 1467, 1467, 1469, 1469,
     1470, 1470, 1471, 1471, 1472, 1472, 1454,   57, 1454,   59,
       59,   61, 1473, 1473, 1473, 1473,   33,   67, 1474, 1474,
     1475, 1475, 1476, 1476, 1477, 1477,   76,   76, 1478, 1478,
     1479, 1479, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1480,

     1480, 1480, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1482, 1482, 1482, 1454, 1483, 1483, 1454,
     1483, 1454, 1484, 1454, 1483, 1483, 1485, 1485, 1485, 1454,
     1485, 1485, 1486, 1485, 1454, 1454, 1454, 1454, 1454, 1487,
     1454, 1454, 1454, 1488, 1488, 1488, 1489, 1488, 1488, 1454,
     1454, 1454, 1454, 1490, 1490, 1454, 1490, 1490, 1491, 1490,
     1492, 1492, 1492, 1492, 1492, 1493, 1493, 1454, 1493, 1493,
     1494, 1493, 1495, 1495, 1454, 1495, 1495, 1496, 1495, 1497,
     1497, 1497, 1497, 1498, 1497, 1497, 1497, 1499, 1499, 1499,

     1499, 1499, 1499, 1500, 1501, 1501, 1454, 1501, 1501, 1501,
     1454, 1501, 1502, 1454, 1454, 1454, 1454, 1454, 1503, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1504, 1454, 1454, 1454,
     1454, 1505, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1506, 1454, 1454, 1454, 1454, 1454, 1454,
     1507, 1454, 1454, 1507, 1454, 1454, 1507, 1454, 1454, 1454,
     1507, 1507, 1454, 1454, 1454, 1508, 1508, 1454, 1508, 1454,
     1508, 1508, 1508, 1509, 1509, 1454, 1509, 1454, 1509, 1509,
     1505, 1509, 1509, 1454, 1454, 1454, 1507, 1454, 1454, 1454,
     1510, 1511, 1454, 1510, 1512, 1510, 1454, 1510, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1513, 1454, 1454,
     1513, 1454, 1513, 1513, 1513, 1514, 1454, 1514, 1514, 1514,
     1514, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1515, 1454,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1516, 1454, 1454, 1454,
     1517, 1454, 1454, 1454, 1454, 1454, 1454, 1518, 1454, 1454,
     1454, 1519, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1520, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1521, 1454,
     1454, 1454, 1522, 1454, 1454, 1454, 1454, 1523, 1523, 1454,

     1523, 1454, 1454, 1523, 1454, 1523, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1524, 1524, 1524, 1454, 1454, 1524, 1524, 1524, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1526,
     1527, 1528, 1528, 1528, 1528, 1529, 1530, 1531, 1529, 1532,
     1533, 1534, 1532, 1454, 1454, 1535, 1454, 1454, 1454, 1536,
     1536, 1537, 1454, 1454, 1454, 1536, 1536, 1454, 1538, 1538,
     1538, 1538, 1454, 1539, 1539, 1539, 1539, 1540, 1540, 1540,
     1540, 1454, 1541, 1541, 1541, 1541, 1454, 1542, 1543, 1543,
     1542, 1542, 1542, 1544, 1454, 1544, 1544, 1544, 1454, 1454,

     1545, 1546, 1454, 1546, 1546, 1546, 1454, 1454, 1454, 1454,
     1454, 1547, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1548, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1549,
     1454, 1454, 1454, 1550, 1454, 1551, 1454, 1454, 1454, 1551,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1551, 1454, 1454, 1454, 1454, 1454, 1454,
     1552, 1454, 1552, 1552, 1553, 1553, 1454, 1553, 1553, 1454,
     1553, 1454, 1454, 1454, 1454, 1551, 1454, 1454, 1454, 1454,
     1454, 1454, 1554, 1555, 1556, 1556, 1556, 1554, 1454, 1454,
     1557, 1454, 1454, 1557, 1557, 1558, 1558, 1558, 1558, 1559,

     1454, 1454, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1560, 1454, 1561, 1454, 1454, 1454, 1562, 1454, 1454,
     1563, 1564, 1454, 1454, 1454, 1454, 1454, 1454, 1565, 1566,
     1454, 1454, 1566, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1567, 1454, 1568, 1569,
     1570, 1570, 1570, 1570, 1570, 1454, 1570, 1570, 1570, 1570,
     1570, 1570, 1571, 1571, 1571, 1572, 1572, 1573, 1573, 1573,
     1454, 1573, 1573, 1574, 1454, 1454, 1454, 1575, 1576, 1576,
     1577, 1576, 1578, 1578, 1579, 1580, 1454, 1454, 1454, 1454,
     1454, 1581, 1454, 1582, 1583, 1583, 1583, 1583, 1584, 1584,

     1584, 1584, 1585, 1585, 1585, 1585, 1586, 1586, 1586, 1586,
     1587, 1587, 1588, 1588, 1588, 1588, 1589, 1589, 1589, 1589,
     1454, 1590, 1590, 1590, 1590, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1591, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1591, 1454,
     1454, 1454, 1592, 1592, 1593, 1593, 1454, 1454, 1454, 1591,
     1454, 1454, 1454, 1594, 1594, 1594, 1595, 1594, 1454, 1454,
     1454, 1454, 1596, 1596, 1597, 1597, 1597, 1597, 1598, 1598,
     1598, 1598, 1598, 1598, 1454, 1598, 1598, 1454, 1454, 1599,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1600, 1454, 1454,
     1454, 1454, 1454, 1601, 1602, 1454, 1603, 1454, 1604, 1605,
     1605, 1605, 1454, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1606, 1607, 1607, 1607, 1607, 1608, 1454, 1454, 1609, 1454,
     1454, 1454, 1454, 1610, 1582, 1583, 1584, 1585, 1586, 1611,
     1611, 1588, 1589, 1590, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1591, 1454, 1454, 1454, 1454, 1454, 1591,
     1454, 1454, 1454, 1594, 1454, 1454, 1597, 1454, 1598, 1598,

     1598, 1598, 1598, 1454, 1598, 1598, 1454, 1612, 1454, 1454,
     1454, 1454, 1454, 1602, 1613, 1454, 1454, 1454, 1454, 1454,
     1604, 1605, 1605, 1454, 1454, 1454, 1605, 1605, 1605, 1605,
     1605, 1605, 1605, 1605, 1454, 1454, 1607, 1607, 1607, 1454,
     1454, 1454, 1454, 1454, 1614, 1582, 1615, 1615, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1598, 1598, 1598, 1598, 1598,
     1598, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1613,

     1613, 1613, 1454, 1613, 1613, 1454, 1454, 1454, 1454, 1604,
     1605, 1605, 1454, 1454, 1454, 1454, 1454, 1605, 1605, 1605,
     1605, 1454, 1454, 1454, 1616, 1582, 1617, 1617, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1618, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1598, 1454, 1454, 1598, 1454,
     1454, 1454, 1598, 1454, 1454, 1454, 1454, 1613, 1613, 1454,
     1454, 1454, 1613, 1454, 1454, 1454, 1604, 1454, 1454, 1454,
     1454, 1619, 1454, 1454, 1454, 1454, 1620, 1454, 1621, 1622,

     1622, 1623, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1618, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1598, 1454, 1454, 1454, 1454,
     1613, 1613, 1454, 1454, 1454, 1454, 1604, 1624, 1454, 1454,
     1625, 1454, 1621, 1626, 1626, 1623, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1627, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1628, 1613, 1613, 1454, 1454, 1454, 1604,
     1624, 1454, 1454, 1629, 1454, 1454, 1630, 1630, 1454, 1631,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1613, 1613, 1454,
     1454, 1454, 1454, 1632, 1454, 1454, 1633, 1454, 1454, 1454,
     1634, 1634, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1613, 1613, 1454, 1454, 1454,
     1632, 1632, 1454, 1454, 1635, 1454, 1636, 1636, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1613, 1613, 1454, 1454, 1454,
     1454, 1637, 1454, 1638, 1638, 1454, 1454, 1454, 1613, 1613,
     1454, 1454, 1454, 1454, 1639, 1454, 1640, 1640, 1454, 1613,
     1613, 1454, 1454, 1454, 1454, 1641, 1454, 1642, 1642, 1454,

     1613, 1613, 1454, 1643, 1454, 1644, 1644, 1454, 1645, 1454,
     1646, 1646, 1454, 1647, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454,    0, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,

     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454
    } ;

static const flex_int16_t yy_nxt[7394] =
    {   0,
     1454,   85, 1454,   86,   87,   85, 1454,   86,   87,   85,
     1312,   86,   87,  464,  465,  416,  416,  416,   88,  417,
      417,  417,   88,  495,  440,  440,   88,   89,  441,  441,
      451,   89,  499,  639,  452,   89,  427,  427,  427,  427,
      416,  470,  500,  495,  417,  471,  427,  427,  427,  427,
      433,  435,  434,  427,  443,  986,  444,  425,  436,  437,
      475,  640,  426,  479,  476,   90,  484,  480,  491,   90,
      485, 1312,  492,   90,   91,   92,   93,   94,   95,   91,
       91,   96,   91,   97,   91,   91,   91,   91,   91,   91,
       91,   91,   98,   91,   91,   91,   91,   91,   91,   91,

       91,   99,   91,  100,  100,  100,  100,   91,   91,   91,
      100,   91,  101,  101,  102,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,   91,   91,   91,  103,
      104,  105,  104,  106,  107,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  108,  104,
      104,  104,  104,  104,  104,  104,  104,  109,  104,  110,
      110,  110,  110,  104,  104,  104,  110,  104,  110,  110,
      111,  112,  113,  110,  110,  110,  114,  110,  110,  110,
      110,  110,  110,  115,  110,  110,  110,  110,  116,  110,

      110,  110,  104,  104,  104,  117,  118,  119,  118,  120,
      121,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  122,  118,  118,  118,  118,  118,
      118,  118,  118,  123,  118,  124,  124,  124,  124,  118,
      118,  118,  124,  118,  124,  124,  124,  124,  125,  124,
      124,  124,  126,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  118,  118,
      118,  127,  129,  681,  130,  131,  129,  132,  130,  131,
      495,  132,  133,  495,  495,  514,  133,  507,  508,  134,
      531,  532,  138,  134,   86,  139,  515,  140,  135,  495,

      495,  681,  135,  495,  495,  138,  503,   86,  139,  141,
      140,  458,  458,  458,  458,  458,  458, 1454,  142,  495,
      498,  459,  141,  524,  459,  143,  503,  495,  525,  693,
      506,  142,  458,  458,  458,  496,  136,  504,  143,  497,
      136,  505,  459,  461,  458,  458,  458,  495,  462,  520,
     1317,  467,  643,  528,  459,  440,  144,  529,  534,  441,
      569,  461,  440,  535,  521,  643,  441,  566,  901,  144,
      145,  146,  145,  147,  148,  145,  149,  145,  145,  145,
      145,  150,  145,  145,  145,  145,  145,  145,  151,  145,
      145,  145,  145,  145,  145,  145,  145,  152,  153,  154,

      155,  156,  155,  145,  157,  145,  154,  145,  154,  154,
      154,  154,  158,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  159,  154,
      154,  154,  160,  161,  145,  162,  165,  552,   86,   87,
      165,  166,   86,   87,  172,  166,   86,   87,  538,  166,
      416,  641,  539,  167,  563,  509,  510,  167,  574,  575,
      642,  173,  168,  553,  416,  511,  168,  573,  568,  169,
      174,  417,  172,  169,   86,   87,  177,  166,   86,   87,
      177,  586,   86,   87,  566,  587,  178,  513,  584,  173,
      178,  416,  593,  179, 1454,  417,  594,  179,  174,  597,

      170, 1317,  180,  598,  170,  585,  180,  584,  175,  181,
      570,  571,  184,  181,   86,   87,  184,  185,   86,   87,
      191,  185,  192,  193,  585,  458,  458,  458,  637,  186,
      584,  554,  194,  186,  906,  459,  175,  195,  187,  638,
      182,  566,  187,  555,  182,  188,  196,  585,  191,  188,
      192,  193,  199,  584,   86,  200,  199,   84,   86,  200,
      194,   84,  667,  416,  416,  195,  556,  417,  417,  201,
      585,  601,  602,  201,  196,  667,  189,   84,  202,  588,
      189,   84,  202,  466,  197,  589,  615,  779,  416,  738,
      616,  589,  417,  557,  416,  619,  620,  590,  417,  544,

      623,  624,  627,  628,  417,  625,  416,  631,  648,  416,
      417,  632,  197,  417,  677,  677,  203,  809,  649,  738,
      203,   84,   85,   84,   86,   87,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   88,
       84,   84,   84,   84,   84,   84,   84,   84,   89,   84,
      204,  204,  204,  204,   84,   84,   84,  204,   84,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,   84,   84,   84,   90,  206,  693,  207,
      208,  206,  648,  207,  208,  634,  653,  236,  576,  237,

      238,  634,  649,  664,  209,  668,  654,  635,  209,  636,
      577, 1321,  665,  210,  239,  669,  697,  210,  701,  644,
      211,  684,  685,  240,  211,  644,  644,  644,  705,  697,
      644,  701,  644,  578,  684,  680,  681,  689,  644,  644,
      644,  705,  524,  650,  682,  690,  690,  525,  803,  803,
      685,  212,  691,  691,  691,  212,  213,  213,  213,  213,
      579,  241,  459,  213,  681,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,   84,
       85,  214,   86,   87,   84,   84,   84,   84,   84,   84,

       84,  215,  216,   84,  217,   84,  218,   88,   84,   84,
       84,   84,   84,   84,   84,   84,   89,   84,  219,  219,
      219,  219,   84,  220,   84,  219,   84,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,   84,   84,   84,   90,  221,  222,  223,  224,  225,
      221,  226,  227,  221,  221,  221,  228,  221,  221,  221,
      221,  221,  221,  229,  221,  221,  221,  221,  221,  221,
      221,  221,  230,  231,  232,  232,  232,  232,  221,  233,
      221,  232,  221,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  221,  221,  221,
      234,  243,  244,  245,  246, 1321,  267,  247,  268,  269,
      558,  267,  695,  268,  269,  458,  458,  458,  248,  270,
      699,  696,  555,  271,  270,  459,  537,  249,  271,  700,
      703,  292,  272,  293,  294,  534,  709,  272,  707,  704,
      535,  656,  884,  580,  656,  556,  499,  708,  295,  709,
      300,  656,  301,  302,  555,  577,  500,  296,  297,  572,
      300,  693,  301,  302,  297,  250,  252,  303,  253,  254,
      273,  292,  557,  293,  294,  273,  304,  303,  578,  255,

      657,  715,  713,  256,  459,  514,  304,  495,  295,  570,
      658,  714,  257,  258,  715,  298,  515,  296,  297,  258,
      520,  520,  259,  671,  297,  579,  671,  495,  458,  458,
      458,  305,  306,  671,  307,  521,  521,  503,  459,  722,
      566,  305,  306,  309,  307,  310,  311,  260,  723,  259,
      261,  252,  262,  253,  254,  298,  312,  458,  458,  458,
      313,  462,  672,  499,  263,  717,  495,  459,  256,  314,
      509,  510,  673,  500,  718,  552,  731,  257,  258,  427,
      427,  427,  427,  694,  258,  732,  495,  264,  726,  427,
      427,  427,  427,  503,  757,  724,  427,  733,  643,  781,

      641,  553,  693,  758,  782,  815,  816,  315,  724,  642,
      733,  734,  260,  537,  265,  261,  274,  275,  274,  276,
      277,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      278,  274,  274,  274,  279,  274,  274,  274,  274,  274,
      274,  274,  274,  280,  274,  281,  281,  281,  281,  274,
      282,  274,  281,  274,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  274,  274,
      274,  283,  252,  641,  253,  254,  781,  309,  763,  310,
      311,  782,  642,  759,  317,  284,  293,  318,  768,  285,

      312,  763,  509,  510,  313,  555,  719,  495,  257,  286,
      637,  319,  511,  314,  317,  286,  293,  318,  259,  719,
      320,  638,  760,  458,  458,  458,  774,  495,  556, 1307,
      558,  319,  768,  459,  513,  775,  353,  771,   86,  354,
      320,  355,  555,  259,  770,  259,  261,  252,  287,  253,
      254,  315,  461,  356,  584,  557,  577,  556,  321,  768,
      288,  641,  357,  776,  285,  556,  785, 1307,  765,  358,
      642,  585,  578,  257,  286,  786,  776,  641,  321,  578,
      286,  765,  678,  289,  557,  783,  798,  769,  644,  678,
      678,  787,  557,  678,  643,  644,  641,  566,  783,  579,

      359,  678,  678,  678,  787,  804,  579,  799,  259,  693,
      290,  261,  322,  323,  322,  324,  325,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      326,  322,  322,  322,  322,  322,  322,  322,  322,  327,
      328,  329,  329,  329,  329,  322,  330,  322,  329,  322,
      331,  332,  333,  334,  329,  335,  329,  329,  329,  329,
      329,  329,  329,  336,  337,  329,  329,  329,  329,  338,
      329,  329,  339,  329,  322,  322,  322,  340,  341,  342,
      341,  343,  344,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  345,  341,  341,  341,

      341,  341,  341,  341,  341,  346,  341,  347,  347,  347,
      347,  341,  348,  341,  347,  341,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      341,  341,  341,  349,  350,  686,  641, 1300,  805,  646,
     1009,  686,  686,  686, 1009,  642,  686,  806,  686,  647,
      351,  351,  351,  351,  686,  686,  686,  351, 1299,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  353,  580,   86,  354,  353,  355,   86,

      354,  353,  643,   86,  354, 1454,  577,  360,  807, 1454,
      356,  360,  648,  503,  361,  643,  815,  816,  361,  357,
      681,  807,  649,  357,  685,  698,  358,  357,  854,  578,
      358,  698,  698,  698,  358,  890,  698,  364,  698,  106,
      365,  837,  495,  681,  698,  698,  698,  577,  681,  838,
      838,  841,  685,  902,  366,  839,  579,  359,  987,  842,
      842,  359,  495,  367,  870,  359,  362,  362,  362,  362,
      368,  681, 1299,  362,  871,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  495,

      364,  369,  106,  365,  685,  383,  648,   86,  384,  495,
      385,  843,  843,  843,  693,  386,  649,  366,  861,  495,
      872,  459,  387,  904,  495,  383,  367,   86,  384,  495,
      385,  388,  685,  368,  511,  386,  853,  873,  389,  885,
      819, 1454,  387,  862,  495,  408,  768,  409,  410,  584,
      411,  388,  681,  458,  458,  458,  513,  905,  389,  855,
      855,  855,  412,  459,  369,  371,  585,  372,  373,  390,
      374,  413,  861,  951,  556,  375,  376,  377,  414, 1289,
      681,  408,  378,  409,  410, 1454,  411,  884,  890,  390,
      952,  379,  380,  845,  952,  903, 1454,  702,  412,  555,

      577,  557,  891,  702,  702,  702,  495,  413,  702,  415,
      702,  909, 1454, 1288,  414,  648,  702,  702,  702,  910,
      910,  924,  556,  578,  924,  649,  495, 1094,  949,  381,
      371,  924,  372,  373,  989,  374,  935,  578,  950,  935,
      375,  376,  377,  988, 1454,  415,  935,  378,  899,  557,
      579,  556,  706,  965,  965,  965,  379,  380,  644,  706,
      706,  675,  900,  706,  579,  706,  578,  921,  710,  941,
      941,  706,  706,  706,  710,  710,  710, 1149,  557,  710,
     1288,  710, 1013, 1066,  916,  917,  918,  710,  710,  710,
      918,  918,  918,  579,  381,  391,  392, 1454,   86,  394,

      919,  391,  391,  391,  391,  920,  391,  942,  693,  391,
      391,  920, 1454,  395, 1454,  943,  943, 1454,  391,  391,
      391,  391,  396,  391, 1454, 1454, 1014,  716,  391,  391,
      391, 1454,  391,  716,  716,  644,  768,  990,  716,  936,
      716,  648, 1454, 1278,  920,  801,  716,  716,  716, 1454,
      920,  649,  991,  996,  996,  938, 1016,  391,  391,  391,
      397,  391,  392,  936,   86,  394, 1017,  391,  391,  391,
      391, 1069,  391, 1124, 1124,  391,  391, 1073,  768,  395,
      944,  944,  944,  937,  391,  391,  391,  391,  396,  391,
      459,  768, 1454,  735,  391,  391,  391, 1010,  391,  735,

      735,  735, 1003, 1277,  735, 1454,  644, 1023, 1454,  458,
      458,  458,  735,  735,  735, 1454,  992,  993,  994,  459,
     1032, 1032, 1032,  391,  391,  391,  397,  399,  764,  400,
      401,  402, 1013, 1454,  764,  764,  764,  873, 1127,  764,
      402,  764, 1454, 1003,  403, 1454,  939,  764,  764,  764,
      784, 1276, 1454,  404,  405,  768,  784,  784,  784, 1275,
      405,  784,  946,  784,  428,  671,  788,  428,  671,  784,
      784,  784,  788,  788,  788,  671, 1014,  788, 1275,  788,
      693, 1454, 1006, 1007, 1008,  788,  788,  788, 1042, 1043,
     1044,  406,  399,  644,  400,  401,  402,  527,  919,  808,

      808,  808,  818,  920,  808,  402,  644, 1454,  527,  403,
     1454, 1143,  808,  808,  808, 1143,  768, 1454,  404,  405,
     1136,  976,  977, 1237, 1237,  405,  978,  979, 1265,  430,
      980,  981,  430, 1024, 1024, 1024,  982,  965,  965,  965,
      983,  984,  920,  459, 1065, 1043, 1044,  768,  832, 1070,
     1071, 1072, 1074,  993,  994,  768,  406,  419,  419,  420,
      419,  419,  419,  419,  421,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  422,  422,  422,  422,
      419,  419,  419,  422,  419,  423,  423,  424,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  419,
      419,  419,  419,  541, 1016, 1264, 1080, 1081, 1454,  541,
     1032, 1032, 1032, 1263, 1017,  542,  543,  544, 1003, 1083,
      545,  546, 1082, 1083,  547,  548, 1042, 1043, 1044, 1262,
      549, 1044, 1043, 1044,  550,  551,  419,  419,  420,  419,
      419,  419,  419,  421,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  422,  422,  422,  422,  419,
      419,  419,  422,  419,  423,  423,  424,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  419,  419,
      419,  419,  646, 1008, 1008, 1008, 1008, 1008, 1008, 1065,
     1043, 1044,  647,  458,  458,  458,  965,  965,  965,  427,
      427,  427,  427,  459,  920,  648, 1261,  920, 1260,  427,
      427,  427,  427,  952, 1259,  649,  427,  720,  495, 1084,
     1085, 1086, 1090,  720,  720,  720, 1258, 1258,  720, 1092,
      720,  693, 1091, 1093, 1454,  919,  720,  720,  721,  503,
      920,  725, 1026,  920, 1003, 1253,  920,  725,  725,  725,
      442, 1093,  725,  442,  725, 1087, 1041, 1096, 1096, 1096,

      725,  725,  725,  736,  737,  738,  739,  459,  740,  741,
     1090,  924,  742,  743,  924, 1079, 1008, 1079,  744,  920,
     1091,  924,  745,  746,  766, 1245, 1003, 1137, 1071, 1072,
      766,  766,  766, 1244, 1243,  766, 1005,  766, 1098, 1098,
     1098, 1242, 1099,  766,  766,  766, 1080, 1081,  459, 1074,
      993,  994, 1092,  566,  584, 1241, 1093,  935,  777, 1240,
      935, 1239, 1082, 1182,  777,  777,  777,  935, 1238,  777,
      873,  778, 1236, 1183, 1093, 1005,  952,  777,  777,  777,
      925,  925,  926,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  430,

      430,  430,  430,  925,  925,  925,  925,  925,  925,  430,
      430,  430,  430,  925,  925,  925,  430,  925,  430,  430,
      430,  430,  430,  430,  430,  430,  927,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  925,  925,  925,  925, 1001,  917, 1002,  648,
     1150, 1150, 1150,  648, 1152, 1152, 1152, 1003, 1099,  649,
      459, 1235, 1004,  649,  459, 1182,  952, 1005, 1078, 1007,
     1079,  965,  965,  965,  952, 1183, 1086, 1086, 1086, 1003,
     1137, 1071, 1072, 1233, 1004, 1032, 1032, 1032, 1223, 1005,
     1193, 1193, 1193, 1190, 1032, 1032, 1032,  920, 1224, 1232,

      459, 1453, 1453, 1453, 1147, 1099, 1005, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015,  530, 1232, 1005,  530,
     1015, 1015, 1015, 1015, 1015, 1015,  920, 1086, 1086, 1086,
     1015, 1015, 1015,  693, 1015, 1102, 1141, 1085, 1142, 1225,
     1216, 1215, 1142, 1086, 1142, 1214, 1213, 1003,  920, 1144,
     1145, 1146, 1004, 1003, 1146, 1146, 1146, 1005, 1212, 1015,
     1015, 1015, 1015, 1005, 1223,  919, 1211, 1146, 1146, 1146,
      920, 1186, 1146, 1186, 1224,  920, 1210, 1209, 1185, 1145,
     1186, 1208, 1003,  873, 1187, 1188, 1189,  920,  920, 1003,

     1207,  873, 1005, 1251, 1004,  600, 1005, 1252,  600, 1005,
      919,  873, 1005, 1205,  818,  920, 1229, 1229, 1229,  920,
      952, 1189, 1189, 1189,  920, 1189, 1189, 1189, 1195, 1195,
     1195, 1204, 1099,  952, 1218, 1188, 1219,  920,  459,  952,
      612, 1005,  920,  612,  614, 1003,  920,  614, 1005, 1203,
     1004, 1219, 1189, 1219,  920, 1005, 1202, 1220, 1221, 1222,
     1201, 1200, 1003, 1222, 1222, 1222, 1222, 1222, 1222, 1226,
     1226, 1226, 1005,  919,  618, 1199, 1230,  618,  920,  459,
      428,  920, 1251,  428,  920,  920, 1252,  920, 1228, 1228,
     1228, 1157, 1099,  818, 1005, 1247, 1222, 1247,  459, 1246,

     1221, 1247, 1198, 1248, 1249, 1250, 1003, 1250, 1250, 1250,
     1003, 1005, 1250, 1250, 1250, 1004, 1005,  920,  430,  919,
     1005,  430,  442,  920,  920,  442,  920, 1198,  920, 1254,
     1254, 1254, 1196,  920, 1256, 1256, 1256,  693, 1099,  459,
     1229, 1229, 1229, 1192,  459, 1266, 1249, 1267, 1184, 1267,
     1250, 1267, 1268, 1269, 1270, 1005, 1003, 1139, 1181, 1005,
     1003, 1004,  530,  920, 1180,  530, 1005,  920,  919, 1179,
     1005, 1178,  920,  920, 1270, 1270, 1270, 1270, 1270, 1270,
     1271, 1271, 1271, 1273, 1273, 1273,  600, 1099,  612,  600,
      459,  612, 1177,  459,  614,  920,  618,  614,  920,  618,

     1230, 1176, 1279, 1269, 1280, 1005, 1280, 1270, 1280, 1005,
     1175, 1174,  920, 1003, 1281, 1282, 1283, 1003, 1004, 1283,
     1283, 1283,  768, 1005, 1283, 1283, 1283, 1005, 1173,  873,
      919, 1284, 1284, 1284,  920,  920,  430,  920, 1172,  430,
      920,  459, 1286, 1286, 1286,  920, 1099, 1290, 1282, 1291,
      442,  600,  459,  442, 1291, 1283, 1291,  873, 1003, 1294,
     1294, 1294, 1005, 1004,  600, 1003, 1005,  600, 1005, 1292,
     1293, 1294,  873, 1171,  920, 1005, 1294, 1294, 1294,  920,
      920, 1295, 1295, 1295,  920,  919, 1170, 1301, 1293, 1302,
      920,  459, 1297, 1297, 1297, 1169, 1099,  920, 1003, 1302,

     1294, 1302,  459, 1004, 1294, 1294, 1294, 1005, 1005, 1168,
     1003, 1292, 1293, 1294, 1005, 1167, 1294, 1294, 1294,  920,
     1005, 1303, 1303, 1303, 1114,  920, 1166,  919, 1165,  920,
     1164,  459,  920, 1301, 1293, 1302,  920,  920, 1305, 1305,
     1305, 1163, 1099,  430, 1003, 1162,  430, 1005,  459, 1004,
     1161, 1302, 1294, 1302, 1005, 1308, 1308, 1308, 1191, 1005,
     1160, 1191, 1003, 1159,  920,  459, 1158, 1103, 1313, 1313,
     1313,  920, 1005, 1310, 1310, 1310,  920, 1099,  459, 1157,
     1315, 1315, 1315,  459, 1099, 1318, 1318, 1318, 1155, 1155,
      459,  693, 1088, 1005, 1140,  459, 1320, 1320, 1320, 1076,

     1099, 1139, 1322, 1322, 1322, 1138,  459, 1071, 1324, 1324,
     1324, 1005,  459, 1323, 1323, 1323, 1135, 1099,  459, 1134,
     1325, 1325, 1325,  459, 1099, 1326, 1326, 1326, 1133, 1132,
      459, 1131, 1327, 1327, 1327,  459, 1099, 1328, 1328, 1328,
     1130, 1129,  459, 1128, 1329, 1329, 1329,  459, 1099, 1330,
     1330, 1330, 1126, 1125,  459, 1123, 1331, 1331, 1331,  459,
     1099, 1332, 1332, 1332, 1122, 1121,  459, 1120, 1333, 1333,
     1333,  459, 1099, 1334, 1334, 1334, 1119, 1118,  459, 1117,
     1335, 1335, 1335,  459, 1099, 1336, 1336, 1336, 1116, 1115,
      459, 1114, 1337, 1337, 1337,  459, 1099, 1338, 1338, 1338,

     1112, 1111,  459, 1110, 1339, 1339, 1339,  459, 1099, 1340,
     1340, 1340, 1109, 1108,  459, 1107, 1341, 1341, 1341,  459,
     1099, 1342, 1342, 1342, 1106, 1105,  459, 1104, 1343, 1343,
     1343,  459, 1099, 1344, 1344, 1344, 1103, 1101,  459, 1101,
     1345, 1345, 1345,  459, 1099, 1346, 1346, 1346,  693, 1095,
      459, 1022, 1347, 1347, 1347,  459, 1099, 1348, 1348, 1348,
     1094, 1019,  459, 1089, 1349, 1349, 1349,  459, 1099, 1350,
     1350, 1350, 1088,  432,  459, 1077, 1351, 1351, 1351,  459,
     1099, 1352, 1352, 1352, 1076, 1075,  459,  801, 1353, 1353,
     1353,  459, 1099, 1354, 1354, 1354,  801,  993,  459, 1068,

     1355, 1355, 1355,  459, 1099, 1356, 1356, 1356, 1067, 1064,
      459, 1063, 1357, 1357, 1357,  459, 1099, 1358, 1358, 1358,
     1062, 1061,  459, 1060, 1359, 1359, 1359,  459, 1099, 1360,
     1360, 1360, 1059, 1058,  459, 1057, 1361, 1361, 1361,  459,
     1099, 1362, 1362, 1362, 1056, 1055,  459, 1054, 1363, 1363,
     1363,  459, 1099, 1364, 1364, 1364, 1053, 1052,  459, 1051,
     1365, 1365, 1365,  459, 1099, 1366, 1366, 1366, 1050, 1049,
      459, 1048, 1367, 1367, 1367,  459, 1099, 1368, 1368, 1368,
     1047, 1046,  459, 1045, 1369, 1369, 1369,  459, 1099, 1370,
     1370, 1370, 1040, 1039,  459, 1038, 1371, 1371, 1371,  459,

     1099, 1372, 1372, 1372, 1037, 1036,  459, 1035, 1373, 1373,
     1373,  459, 1099, 1374, 1374, 1374, 1034,  861,  459, 1033,
     1375, 1375, 1375,  459, 1099, 1376, 1376, 1376, 1031, 1030,
      459, 1029, 1377, 1377, 1377,  459, 1099, 1378, 1378, 1378,
     1028, 1028,  459,  693, 1379, 1379, 1379,  459, 1099, 1380,
     1380, 1380,  942,  675,  459,  675, 1381, 1381, 1381,  459,
     1099, 1382, 1382, 1382, 1022, 1021,  459, 1020, 1383, 1383,
     1383,  459, 1099, 1384, 1384, 1384, 1019, 1018,  459,  822,
     1385, 1385, 1385,  459, 1099, 1386, 1386, 1386, 1012, 1011,
      459,  915, 1387, 1387, 1387,  459, 1099, 1388, 1388, 1388,

      999,  998,  459,  997, 1389, 1389, 1389,  459, 1099, 1390,
     1390, 1390,  801,  985,  459,  950, 1391, 1391, 1391,  459,
     1099, 1392, 1392, 1392,  893,  892,  459,  768, 1393, 1393,
     1393,  459, 1099, 1394, 1394, 1394,  887,  886,  459,  975,
     1395, 1395, 1395,  459, 1099, 1396, 1396, 1396,  974,  973,
      459,  972, 1397, 1397, 1397,  459, 1099, 1398, 1398, 1398,
      971,  970,  459,  969, 1399, 1399, 1399,  459, 1099, 1400,
     1400, 1400,  968,  967,  459,  966, 1401, 1401, 1401,  459,
     1099, 1402, 1402, 1402,  964,  963,  459,  962, 1403, 1403,
     1403,  459, 1099, 1404, 1404, 1404,  961,  960,  459,  959,

     1405, 1405, 1405,  459, 1099, 1406, 1406, 1406,  958,  957,
      459,  956, 1407, 1407, 1407,  459, 1099, 1408, 1408, 1408,
      955,  954,  459,  953, 1409, 1409, 1409,  459, 1099, 1410,
     1410, 1410,  857,  503,  459,  948, 1411, 1411, 1411,  459,
     1099, 1412, 1412, 1412,  948,  693,  459,  675, 1413, 1413,
     1413,  459, 1099, 1414, 1414, 1414,  934,  933,  459,  932,
     1415, 1415, 1415,  459, 1099, 1416, 1416, 1416,  931,  930,
      459,  929, 1417, 1417, 1417,  459, 1099, 1418, 1418, 1418,
      928,  923,  459,  922, 1419, 1419, 1419,  459, 1099, 1420,
     1420, 1420,  818,  915,  459,  426, 1421, 1421, 1421,  459,

     1099, 1422, 1422, 1422,  913,  912,  459,  911, 1423, 1423,
     1423,  459, 1099, 1424, 1424, 1424,  812,  812,  459,  801,
     1425, 1425, 1425,  459, 1099, 1426, 1426, 1426,  801,  812,
      459,  907, 1427, 1427, 1427,  459, 1099, 1428, 1428, 1428,
      898,  897,  459,  896, 1429, 1429, 1429,  459, 1099, 1430,
     1430, 1430,  895,  894,  459,  893, 1431, 1431, 1431,  459,
     1099, 1432, 1432, 1432,  892,  889,  459,  888, 1433, 1433,
     1433,  459, 1099, 1434, 1434, 1434,  566,  566,  459,  887,
     1435, 1435, 1435,  459, 1099, 1436, 1436, 1436,  886,  883,
      459,  882, 1437, 1437, 1437,  459, 1099, 1438, 1438, 1438,

      881,  880,  459,  879, 1439, 1439, 1439,  459, 1099, 1440,
     1440, 1440,  878,  877,  459,  876, 1441, 1441, 1441,  459,
     1099, 1442, 1442, 1442,  875,  874,  459,  869, 1443, 1443,
     1443,  459, 1099, 1444, 1444, 1444,  868,  867,  459,  866,
     1445, 1445, 1445,  459, 1099, 1446, 1446, 1446,  865,  864,
      459,  863, 1447, 1447, 1447,  459, 1099, 1448, 1448, 1448,
      860, 1099,  459,  859, 1449, 1449, 1449,  459, 1099, 1450,
     1450, 1450,  858, 1099,  459,  857, 1451, 1451, 1451,  459,
     1099, 1452, 1452, 1452,  812, 1099,  459,  730, 1453, 1453,
     1453,  459, 1099,  856,  503,  503,  503,  852,  459,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  446,  446,  446,  851,  446,  446,
      851,  446,  446,  849,  446,  446,  446,  446,  848,  446,
      446,  446,  446,  446,  446,  447,  447,  447,  847,  447,
      447,  447,  447,  447,  846,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  450,  450,  450,  693,
      450,  450,  840,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  840,  450,  454,  454,  454,
      675,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  455,  455,
      455,  675,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  460,
      460,  460,  672,  835,  834,  833,  832,  460,  831,  830,
      829,  828,  460,  827,  826,  460,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  469,  469,  469,
      825,  824,  469,  823,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  822,  469,  473,  473,
      473,  821,  473,  473,  473,  473,  473,  473,  473,  473,

      473,  473,  473,  473,  473,  473,  473,  473,  473,  474,
      474,  474,  820,  818,  474,  813,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      478,  478,  478,  812,  811,  478,  478,  478,  478,  810,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  627,
      478,  482,  482,  482,  801,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  483,  483,  483,  619,  797,  483,  796,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  795,  483,  487,  487,  487,  794,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  793,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  489,  489,  792,  489,  489,
      489,  489,  489,  489,  489,  791,  790,  489,  489,  489,
      489,  489,  489,  489,  789,  489,  494,  494,  494,  601,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  501,  780,  773,
      772,  582,  581,  767,  566,  501,  566,  762,  761,  560,
      501,  559,  756,  501,  502,  502,  502,  502,  502,  502,

      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  755,  502,  512,  512,  754,  753,  752,
      751,  750,  749,  512,  748,  747,  531,  730,  512,  526,
      729,  512,  512,  522,  728,  518,  517,  516,  517,  727,
      507,  503,  712,  712,  522,  464,  522,  693,  687,  522,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  536,  675,  536,  670,  536,  536,  536,  536,  536,
      536,  536,  536,  662,  536,  661,  536,  536,  660,  536,
      561,  561,  561,  659,  561,  561,  561,  561,  561,  561,

      561,  561,  655,  561,  561,  561,  561,  561,  561,  561,
      561,  565,  565,  565,  652,  565,  565,  565,  565,  565,
      565,  565,  565,  651,  565,  565,  565,  565,  565,  645,
      565,  565,  583,  583,  583,  429,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  418,
      583,  633,  583,  584,  584,  584,  418,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  418,  584,  584,
      418,  584,  622,  584,  585,  418,  585,  418,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  613,  585,  418,  585,  591,  611,  591,  610,  591,

      591,  591,  591,  591,  591,  591,  591,  609,  591,  591,
      591,  591,  591,  591,  591,  591,  596,  608,  596,  607,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  617,  617,  617,
      606,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  621,  621,
      621,  605,  621,  621,  621,  621,  621,  604,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      629,  603,  418,  629,  599,  595,  629,  592,  629,  629,
      418,  629,  582,  629,  581,  572,  629,  630,  630,  630,
      566,  630,  567,  630,  630,  630,  630,  630,  630,  566,
      630,  566,  630,  630,  566,  630,  564,  630,  663,  663,
      663,  562,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  666,
      666,  666,  560,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      446,  446,  446,  559,  446,  446,  540,  446,  446,  537,
      446,  446,  446,  446,  418,  446,  446,  446,  446,  446,

      446,  674,  674,  674,  418,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      418,  674,  676,  676,  676,  526,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  450,  450,  450,  523,  450,  450,  519,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  518,  450,  679,  679,  679,  517,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  683,  683,  683,  516,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,

      683,  683,  683,  683,  683,  683,  688,  688,  688,  503,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  460,  460,  460,
      503,  503,  503,  493,  490,  460,  486,  481,  477,  472,
      460,  468,  457,  460,  692,  692,  418,  692,  692,  692,
      692,  692,  692,  692,  692,  456,  692,  692,  692,  692,
      692,  692,  692,  453,  692,  469,  469,  469,  449,  448,
      469,  445,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  418,  469,  474,  474,  474,  439,
      438,  474,  432,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  474,  474,  474,  474,  478,  478,  478,
      431,  418,  478,  478,  478,  478,  429,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  418,  478,  483,  483,
      483,  418, 1454,  483,  163,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483, 1454,  483,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
     1454,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      711,  711, 1454,  711,  711,  711,  711,  711,  711,  711,
     1454, 1454,  711,  711,  711,  711,  711,  711,  711, 1454,
      711,  494,  494,  494, 1454,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  501, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
      501, 1454, 1454, 1454, 1454,  501, 1454, 1454,  501,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502, 1454,  502,
      512,  512, 1454, 1454, 1454, 1454, 1454, 1454,  512, 1454,
     1454, 1454, 1454,  512, 1454, 1454,  512,  512,  522, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,  522,
     1454,  522, 1454, 1454,  522,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  536, 1454,  536, 1454,
      536,  536,  536,  536,  536,  536,  536,  536, 1454,  536,
     1454,  536,  536, 1454,  536,  561,  561,  561, 1454,  561,
      561,  561,  561,  561,  561,  561,  561, 1454,  561,  561,
      561,  561,  561,  561,  561,  561,  565,  565,  565, 1454,
      565,  565,  565,  565,  565,  565,  565,  565, 1454,  565,
      565,  565,  565,  565, 1454,  565,  565,  583,  583,  583,
     1454,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583, 1454,  583, 1454,  583,  584,  584,
      584, 1454,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584, 1454,  584,  584, 1454,  584, 1454,  584,  585,
     1454,  585, 1454,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585, 1454,  585, 1454,  585,
      591, 1454,  591, 1454,  591,  591,  591,  591,  591,  591,
      591,  591, 1454,  591,  591,  591,  591,  591,  591,  591,
      591,  596, 1454,  596, 1454,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  800,  800,  800, 1454,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800, 1454,  800,  802,  802,  802, 1454,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  629, 1454, 1454,  629, 1454, 1454,
      629, 1454,  629,  629, 1454,  629, 1454,  629, 1454, 1454,
      629,  630,  630,  630, 1454,  630, 1454,  630,  630,  630,
      630,  630,  630, 1454,  630, 1454,  630,  630, 1454,  630,
     1454,  630,  814,  814,  814, 1454,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  817,  817,  817, 1454,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  428, 1454, 1454, 1454, 1454, 1454,

     1454, 1454,  428, 1454, 1454, 1454, 1454,  428, 1454, 1454,
      428,  663,  663,  663, 1454,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  666,  666,  666, 1454,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  836,  836,  836, 1454,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836, 1454,  836,  446,  446,  446, 1454,  446,  446,
     1454,  446,  446, 1454,  446,  446,  446,  446, 1454,  446,
      446,  446,  446,  446,  446,  679,  679,  679, 1454,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  681,  681,  681, 1454,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  683,  683,  683,
     1454,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  685,  685,
      685, 1454,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  450,
      450,  450, 1454,  450,  450, 1454,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450, 1454,  450,

      844,  844, 1454,  844,  844,  844,  844,  844,  844,  844,
      844, 1454,  844,  844,  844,  844,  844,  844,  844, 1454,
      844,  460,  460,  460, 1454, 1454, 1454, 1454, 1454,  460,
     1454, 1454, 1454, 1454,  460, 1454, 1454,  460,  469,  469,
      469, 1454, 1454,  469, 1454,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469, 1454,  469,  474,
      474,  474, 1454, 1454,  474, 1454,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      478,  478,  478, 1454, 1454,  478,  478,  478,  478, 1454,
      478,  478,  478,  478,  478,  478,  478,  478,  478, 1454,

      478,  483,  483,  483, 1454, 1454,  483, 1454,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
     1454,  483,  850,  850, 1454,  850,  850,  850,  850,  850,
      850,  850, 1454, 1454,  850,  850,  850,  850,  850,  850,
      850, 1454,  850,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488, 1454,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  494,  494,  494, 1454,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,

      502,  502,  502,  502, 1454,  502,  536, 1454,  536, 1454,
      536,  536,  536,  536,  536,  536,  536,  536, 1454,  536,
     1454,  536,  536, 1454,  536,  561,  561,  561, 1454,  561,
      561,  561,  561,  561,  561,  561,  561, 1454,  561,  561,
      561,  561,  561,  561,  561,  561,  565,  565,  565, 1454,
      565,  565,  565,  565,  565,  565,  565,  565, 1454,  565,
      565,  565,  565,  565, 1454,  565,  565,  585, 1454,  585,
     1454,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585, 1454,  585, 1454,  585,  583,  583,
      583, 1454,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  583,  583, 1454,  583, 1454,  583,  591,
     1454,  591, 1454,  591,  591,  591,  591,  591,  591,  591,
      591, 1454,  591,  591,  591,  591,  591,  591,  591,  591,
      596, 1454,  596, 1454,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  908,  908,  908, 1454,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
     1454,  908,  630,  630,  630, 1454,  630, 1454,  630,  630,
      630,  630,  630,  630, 1454,  630, 1454,  630,  630, 1454,
      630, 1454,  630,  814,  814,  814, 1454,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  914,  914,  914, 1454,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  817,  817,  817, 1454,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  428, 1454, 1454, 1454,
     1454, 1454, 1454, 1454,  428, 1454, 1454, 1454, 1454,  428,
     1454, 1454,  428,  663,  663,  663, 1454,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  442, 1454, 1454,  442, 1454, 1454,

     1454, 1454,  442, 1454, 1454, 1454, 1454,  442, 1454, 1454,
      442,  940,  940,  940, 1454,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
     1454,  940,  679,  679,  679, 1454,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  945,  945, 1454,  945,  945,  945,  945,
      945,  945,  945,  945, 1454,  945,  945,  945,  945,  945,
      945,  945, 1454,  945,  947,  947, 1454,  947,  947,  947,
      947,  947,  947,  947, 1454, 1454,  947,  947,  947,  947,
      947,  947,  947, 1454,  947,  995,  995,  995, 1454,  995,

      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995, 1454,  995, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1025, 1025, 1454,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1454, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1454, 1025, 1027, 1027,
     1454, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1454, 1454,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1454, 1027, 1097,
     1097, 1454, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1454, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1454, 1097,

     1100, 1100, 1454, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1454, 1454, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1454,
     1100, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1148, 1454, 1454, 1454, 1148, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1148, 1454, 1148, 1151,
     1151, 1454, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1454, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1454, 1151,
     1153, 1153, 1153, 1153, 1153, 1153, 1454, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,

     1153, 1154, 1154, 1454, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1454, 1454, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1454, 1154, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1194, 1194, 1454, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1454, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1454, 1194, 1197, 1197, 1454, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1454, 1454, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1454, 1197, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,

     1454, 1206, 1206, 1454, 1206, 1206, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1454, 1217, 1217, 1454, 1217, 1217, 1227, 1227, 1454,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1454, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1454, 1227, 1231, 1231,
     1454, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1454, 1454,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1454, 1231, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1454, 1234, 1234, 1454, 1234, 1234,
      817,  817,  817, 1454,  817,  817,  817,  817,  817,  817,

      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817, 1255, 1255, 1454, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1454, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1454, 1255, 1257, 1257, 1454, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1454, 1454, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1454, 1257, 1272, 1272, 1454, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1454, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1454, 1272, 1274, 1274, 1454, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1454, 1454, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1454, 1274, 1285, 1285, 1454, 1285, 1285,

     1285, 1285, 1285, 1285, 1285, 1285, 1454, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1454, 1285, 1287, 1287, 1454, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1454, 1454, 1287, 1287,
     1287, 1287, 1287, 1287, 1287, 1454, 1287, 1296, 1296, 1454,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1454, 1296,
     1296, 1296, 1296, 1296, 1296, 1296, 1454, 1296, 1298, 1298,
     1454, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1454, 1454,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1454, 1298, 1304,
     1304, 1454, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1454, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1454, 1304,

     1306, 1306, 1454, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
     1454, 1454, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1454,
     1306, 1309, 1309, 1454, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1454, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1454, 1309, 1311, 1311, 1454, 1311, 1311, 1311, 1311, 1311,
     1311, 1311, 1454, 1454, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1454, 1311, 1314, 1314, 1454, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1454, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1454, 1314, 1316, 1316, 1454, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1454, 1454, 1316, 1316, 1316, 1316,

     1316, 1316, 1316, 1454, 1316, 1319, 1319, 1454, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1454, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1454, 1319,   83, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454

    } ;

static const flex_int16_t yy_chk[7394] =
    {   0,
        0,    1,    0,    1,    1,    2,  899,    2,    2,    3,
     1306,    3,    3,  157,  157,   88,   98,  108,    1,   88,
       98,  108,    2,  198,  122,  134,    3,    1,  122,  134,
      141,    2,  204,  414,  141,    3,  100,  100,  100,  100,
      151,  167,  204,  198,  151,  167,  100,  100,  100,  100,
      113,  114,  113,  100,  125,  899,  125,   97,  114,  114,
      173,  414,   97,  179,  173,    1,  186,  179,  195,    2,
      186, 1307,  195,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,  679,    9,    9,   10,    9,   10,   10,
      199,   10,    9,  200,  203,  214,   10,  211,  211,    9,
      233,  233,   11,   10,   11,   11,  214,   11,    9,  202,

      199,  679,   10,  200,  203,   12,  210,   12,   12,   11,
       12,  154,  154,  154,  155,  155,  155,  791,   11,  202,
      202,  154,   12,  223,  155,   11,  209,  201,  223, 1309,
      210,   12,  159,  159,  159,  201,    9,  209,   12,  201,
       10,  209,  159,  155,  156,  156,  156,  201,  156,  219,
     1311,  159,  417,  229,  156,  239,   11,  229,  244,  239,
      280,  159,  248,  244,  219,  417,  248,  280,  791,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   17,  260,   17,   17,
       18,   17,   18,   18,   19,   18,   19,   19,  256,   19,
      271,  416,  256,   17,  271,  213,  213,   18,  286,  286,
      416,   19,   17,  260,  279,  213,   18,  285,  279,   17,
       19,  285,   20,   18,   20,   20,   21,   20,   21,   21,
       22,  295,   22,   22,  279,  295,   21,  213,  291,   20,
       22,  303,  313,   21,  796,  303,  313,   22,   20,  319,

       17, 1312,   21,  319,   18,  291,   22,  294,   19,   21,
      282,  282,   23,   22,   23,   23,   24,   23,   24,   24,
       25,   24,   25,   25,  294,  158,  158,  158,  411,   23,
      298,  262,   25,   24,  796,  158,   20,   25,   23,  411,
       21,  282,   24,  262,   22,   23,   25,  298,   26,   24,
       26,   26,   27,  296,   27,   27,   28,   27,   28,   28,
       26,   28,  441,  326,  345,   26,  262,  326,  345,   27,
      296,  330,  330,   28,   26,  441,   23,   27,   27,  296,
       24,   28,   28,  158,   25,  297,  356,  589,  361,  589,
      356,  297,  361,  262,  366,  368,  368,  297,  366,  297,

      378,  387,  389,  389,  378,  387,  395,  403,  428,  412,
      395,  403,   26,  412,  448,  448,   27,  634,  428,  634,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31, 1314,   31,
       31,   32,  429,   32,   32,  405,  433,   39,  287,   39,

       39,  405,  429,  440,   31,  443,  433,  405,   32,  405,
      287, 1316,  440,   31,   39,  443,  471,   32,  476,  418,
       31,  452,  452,   39,   32,  418,  418,  418,  480,  471,
      418,  476,  418,  287,  452,  451,  451,  456,  418,  418,
      418,  480,  524,  429,  451,  456,  456,  524,  622,  622,
      452,   31,  458,  458,  458,   32,   33,   33,   33,   33,
      287,   39,  458,   33,  451,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   40,   40,   40,   40, 1317,   43,   40,   43,   43,
      263,   44,  470,   44,   44,  460,  460,  460,   40,   43,
      475,  470,  263,   43,   44,  460,  263,   40,   44,  475,
      479,   49,   43,   49,   49,  534,  485,   44,  484,  479,
      534,  435,  884,  288,  435,  263,  499,  484,   49,  485,
       51,  435,   51,   51,  884,  288,  499,   49,   49,  288,
       52, 1319,   52,   52,   49,   40,   41,   51,   41,   41,
       43,   50,  263,   50,   50,   44,   51,   52,  288,   41,

      435,  492,  491,   41, 1446,  514,   52,  494,   50,  571,
      435,  491,   41,   41,  492,   49,  514,   50,   50,   41,
      520,  522,   41,  445,   50,  288,  445,  494,  466,  466,
      466,   51,   51,  445,   51,  520,  522,  504,  466,  504,
      571,   52,   52,   53,   52,   53,   53,   41,  504,   41,
       41,   42,   42,   42,   42,   50,   53,  461,  461,  461,
       53,  461,  445,  501,   42,  496,  496,  461,   42,   53,
      509,  509,  445,  501,  496,  552,  528,   42,   42,  422,
      422,  422,  422,  466,   42,  528,  496,   42,  509,  422,
      422,  422,  422,  505,  553,  505,  422,  529,  539,  592,

      538,  552, 1304,  553,  592,  647,  647,   53,  505,  538,
      529,  539,   42,  538,   42,   42,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   47,  573,   47,   47,  781,   54,  563,   54,
       54,  781,  573,  554,   55,   47,   55,   55, 1300,   47,

       54,  563,  512,  512,   54,  554,  497,  497,   47,   47,
      637,   55,  512,   54,   56,   47,   56,   56,   47,  497,
       55,  637,  558,  467,  467,  467,  586,  497,  554, 1299,
      555,   56,  575,  467,  512,  586,   63,  580,   63,   63,
       56,   63,  555,   47,  576,   47,   47,   48,   48,   48,
       48,   54,  467,   63,  583,  554,  576,  558,   55,  575,
       48,  593,   63,  587,   48,  555,  597, 1298,  568,   63,
      593,  583,  580,   48,   48,  597,  587,  615,   56,  576,
       48,  568,  449,   48,  558,  594,  615,  575,  449,  449,
      449,  598,  555,  449,  616,  449,  623,  568,  594,  580,

       63,  449,  449,  449,  598,  623,  576,  616,   48, 1296,
       48,   48,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   61,  453,  624, 1289,  631,  646,
      919,  453,  453,  453,  919,  624,  453,  631,  453,  646,
       61,   61,   61,   61,  453,  453,  453,   61, 1288,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   64,  577,   64,   64,   65,   64,   65,

       65,   66,  625,   66,   66,  900,  577,   65,  632,  792,
       64,   66,  648,  723,   65,  625,  814,  814,   66,   64,
      680,  632,  648,   65,  683,  472,   64,   66,  723,  577,
       65,  472,  472,  472,   66,  890,  472,   69,  472,   69,
       69,  677,  717,  682,  472,  472,  472,  890,  680,  677,
      677,  690,  683,  792,   69,  682,  577,   64,  900,  690,
      690,   65,  717,   69,  747,   66,   67,   67,   67,   67,
       69,  682, 1287,   67,  747,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,  719,

       70,   69,   70,   70,  684,   73,  650,   73,   73,  720,
       73,  691,  691,  691, 1285,   73,  650,   70,  739,  719,
      748,  691,   73,  794,  718,   74,   70,   74,   74,  720,
       74,   73,  684,   70,  727,   74,  718,  748,   73,  760,
      650,  793,   74,  739,  718,   81, 1278,   81,   81,  777,
       81,   74,  839,  694,  694,  694,  727,  794,   74,  726,
      726,  726,   81,  694,   70,   71,  777,   71,   71,   73,
       71,   81,  739,  859,  760,   71,   71,   71,   81, 1277,
      839,   82,   71,   82,   82,  902,   82,  759,  770,   74,
      859,   71,   71,  694, 1276,  793,  901,  477,   82,  759,

      770,  760,  771,  477,  477,  477,  853,   82,  477,   81,
      477,  803,  790, 1275,   82,  819,  477,  477,  477,  803,
      803,  822,  759,  770,  822,  819,  853, 1094,  858,   71,
       72,  822,   72,   72,  902,   72,  832,  771,  858,  832,
       72,   72,   72,  901,  986,   82,  832,   72,  790,  759,
      770,  885,  481,  873,  873,  873,   72,   72,  481,  481,
      481,  838,  790,  481,  771,  481,  891,  819,  486,  838,
      838,  481,  481,  481,  486,  486,  486, 1094,  885,  486,
     1274,  486,  926,  986,  816,  816,  816,  486,  486,  486,
      818,  818,  818,  891,   72,   75,   75,  903,   75,   75,

      816,   75,   75,   75,   75,  816,   75,  842, 1272,   75,
       75,  818,  905,   75,  834,  842,  842,  834,   75,   75,
       75,   75,   75,   75,  834,  991,  926,  493,   75,   75,
       75,  989,   75,  493,  493,  493, 1265,  903,  493,  833,
      493,  921,  833, 1264,  816,  910,  493,  493,  493,  833,
      818,  921,  905,  910,  910,  834,  929,   75,   75,   75,
       75,   76,   76,  936,   76,   76,  929,   76,   76,   76,
       76,  989,   76, 1054, 1054,   76,   76,  991, 1263,   76,
      843,  843,  843,  833,   76,   76,   76,   76,   76,   76,
      843, 1262, 1000,  540,   76,   76,   76,  921,   76,  540,

      540,  540, 1000, 1261,  540,  835,  540,  936,  835,  845,
      845,  845,  540,  540,  540,  835,  906,  906,  906,  845,
      952,  952,  952,   76,   76,   76,   76,   79,  564,   79,
       79,   79, 1013, 1005,  564,  564,  564, 1260, 1057,  564,
       79,  564,  938, 1005,   79,  938,  835,  564,  564,  564,
      595, 1259,  938,   79,   79, 1057,  595,  595,  595, 1258,
       79,  595,  845,  595, 1480,  939,  599, 1480,  939,  595,
      595,  595,  599,  599,  599,  939, 1013,  599, 1257,  599,
     1255, 1069,  916,  916,  916,  599,  599,  599,  963,  963,
      963,   79,   80,  633,   80,   80,   80, 1504,  916,  633,

      633,  633, 1252,  916,  633,   80,  633,  937, 1504,   80,
      937, 1082,  633,  633,  633, 1082, 1245,  937,   80,   80,
     1069,  888,  888, 1208, 1208,   80,  888,  888, 1244, 1481,
      888,  888, 1481,  944,  944,  944,  888,  965,  965,  965,
      888,  888,  916,  944,  985,  985,  985, 1243,  937,  990,
      990,  990,  992,  992,  992, 1242,   80,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,  258, 1016, 1241, 1003, 1003, 1004,  258,
     1032, 1032, 1032, 1240, 1016,  258,  258,  258, 1004, 1004,
      258,  258, 1003, 1004,  258,  258, 1042, 1042, 1042, 1239,
      258, 1044, 1044, 1044,  258,  258,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  427,  917,  917,  917,  918,  918,  918, 1065,
     1065, 1065,  427,  946,  946,  946,  962,  962,  962,  427,
      427,  427,  427,  946,  917, 1010, 1238,  918, 1236,  427,
      427,  427,  427, 1235, 1233, 1010,  427,  498,  498, 1006,
     1006, 1006, 1018,  498,  498,  498, 1232, 1231,  498, 1019,
      498, 1227, 1018, 1019, 1083, 1006,  498,  498,  498,  506,
     1006,  506,  946,  917, 1083, 1225,  918,  506,  506,  506,
     1482, 1019,  506, 1482,  506, 1010,  962, 1024, 1024, 1024,

      506,  506,  506,  541,  541,  541,  541, 1024,  541,  541,
     1090, 1089,  541,  541, 1089, 1002, 1002, 1002,  541, 1006,
     1090, 1089,  541,  541,  569, 1216, 1002, 1070, 1070, 1070,
      569,  569,  569, 1215, 1214,  569, 1002,  569, 1026, 1026,
     1026, 1213, 1026,  569,  569,  569, 1080, 1080, 1026, 1074,
     1074, 1074, 1092,  569,  588, 1212, 1092, 1095,  588, 1211,
     1095, 1210, 1080, 1136,  588,  588,  588, 1095, 1209,  588,
     1207,  588, 1205, 1136, 1092, 1002, 1204,  588,  588,  588,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  915,  915,  915, 1087,
     1096, 1096, 1096, 1147, 1098, 1098, 1098,  915, 1098, 1087,
     1096, 1203,  915, 1147, 1098, 1182, 1202,  915, 1001, 1001,
     1001, 1114, 1114, 1114, 1201, 1182, 1007, 1007, 1007, 1001,
     1137, 1137, 1137, 1199, 1001, 1029, 1029, 1029, 1190, 1001,
     1150, 1150, 1150, 1147, 1157, 1157, 1157, 1007, 1190, 1198,

     1150, 1453, 1453, 1453, 1087, 1453,  915,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928, 1505, 1197, 1001, 1505,
      928,  928,  928,  928,  928,  928, 1007, 1008, 1008, 1008,
      928,  928,  928, 1194,  928, 1029, 1078, 1078, 1078, 1192,
     1181, 1180, 1079, 1079, 1079, 1179, 1178, 1078, 1008, 1084,
     1084, 1084, 1078, 1079, 1085, 1085, 1085, 1078, 1177,  928,
      928,  928,  928, 1079, 1223, 1084, 1176, 1086, 1086, 1086,
     1084, 1142, 1142, 1142, 1223, 1085, 1175, 1174, 1141, 1141,
     1141, 1173, 1142, 1172, 1144, 1144, 1144, 1008, 1086, 1141,

     1171, 1170, 1142, 1224, 1141, 1515, 1078, 1224, 1515, 1141,
     1144, 1169, 1079, 1167, 1224, 1144, 1196, 1196, 1196, 1084,
     1166, 1145, 1145, 1145, 1085, 1146, 1146, 1146, 1152, 1152,
     1152, 1165, 1152, 1164, 1185, 1185, 1185, 1086, 1152, 1163,
     1516, 1142, 1145, 1516, 1517, 1185, 1146, 1517, 1141, 1162,
     1185, 1186, 1186, 1186, 1144, 1185, 1161, 1187, 1187, 1187,
     1160, 1159, 1186, 1188, 1188, 1188, 1189, 1189, 1189, 1193,
     1193, 1193, 1186, 1187, 1519, 1158, 1196, 1519, 1187, 1193,
     1524, 1145, 1251, 1524, 1188, 1146, 1251, 1189, 1195, 1195,
     1195, 1156, 1195, 1251, 1185, 1219, 1219, 1219, 1195, 1218,

     1218, 1218, 1155, 1220, 1220, 1220, 1219, 1221, 1221, 1221,
     1218, 1186, 1222, 1222, 1222, 1218, 1219, 1187, 1525, 1220,
     1218, 1525, 1528, 1188, 1220, 1528, 1189, 1154, 1221, 1226,
     1226, 1226, 1153, 1222, 1228, 1228, 1228, 1151, 1228, 1226,
     1229, 1229, 1229, 1149, 1228, 1246, 1246, 1246, 1140, 1247,
     1247, 1247, 1248, 1248, 1248, 1219, 1246, 1139, 1134, 1218,
     1247, 1246, 1549, 1220, 1133, 1549, 1246, 1221, 1248, 1132,
     1247, 1131, 1222, 1248, 1249, 1249, 1249, 1250, 1250, 1250,
     1254, 1254, 1254, 1256, 1256, 1256, 1559, 1256, 1560, 1559,
     1254, 1560, 1130, 1256, 1561, 1249, 1562, 1561, 1250, 1562,

     1229, 1129, 1266, 1266, 1266, 1246, 1267, 1267, 1267, 1247,
     1128, 1127, 1248, 1266, 1268, 1268, 1268, 1267, 1266, 1269,
     1269, 1269, 1126, 1266, 1270, 1270, 1270, 1267, 1125, 1123,
     1268, 1271, 1271, 1271, 1249, 1268, 1570, 1250, 1122, 1570,
     1269, 1271, 1273, 1273, 1273, 1270, 1273, 1279, 1279, 1279,
     1573, 1598, 1273, 1573, 1280, 1280, 1280, 1121, 1279, 1282,
     1282, 1282, 1266, 1279, 1598, 1280, 1267, 1598, 1279, 1281,
     1281, 1281, 1120, 1119, 1268, 1280, 1283, 1283, 1283, 1269,
     1282, 1284, 1284, 1284, 1270, 1281, 1118, 1290, 1290, 1290,
     1281, 1284, 1286, 1286, 1286, 1117, 1286, 1283, 1290, 1291,

     1291, 1291, 1286, 1290, 1293, 1293, 1293, 1279, 1290, 1116,
     1291, 1292, 1292, 1292, 1280, 1115, 1294, 1294, 1294, 1282,
     1291, 1295, 1295, 1295, 1113, 1293, 1112, 1292, 1111, 1281,
     1110, 1295, 1292, 1301, 1301, 1301, 1283, 1294, 1297, 1297,
     1297, 1109, 1297, 1605, 1301, 1108, 1605, 1290, 1297, 1301,
     1107, 1302, 1302, 1302, 1301, 1303, 1303, 1303, 1624, 1291,
     1106, 1624, 1302, 1105, 1293, 1303, 1104, 1103, 1308, 1308,
     1308, 1292, 1302, 1305, 1305, 1305, 1294, 1305, 1308, 1102,
     1310, 1310, 1310, 1305, 1310, 1313, 1313, 1313, 1101, 1100,
     1310, 1097, 1088, 1301, 1077, 1313, 1315, 1315, 1315, 1076,

     1315, 1075, 1318, 1318, 1318, 1073, 1315, 1072, 1322, 1322,
     1322, 1302, 1318, 1320, 1320, 1320, 1066, 1320, 1322, 1064,
     1323, 1323, 1323, 1320, 1323, 1324, 1324, 1324, 1063, 1062,
     1323, 1061, 1325, 1325, 1325, 1324, 1325, 1326, 1326, 1326,
     1060, 1059, 1325, 1058, 1327, 1327, 1327, 1326, 1327, 1328,
     1328, 1328, 1056, 1055, 1327, 1053, 1329, 1329, 1329, 1328,
     1329, 1330, 1330, 1330, 1052, 1051, 1329, 1050, 1331, 1331,
     1331, 1330, 1331, 1332, 1332, 1332, 1049, 1048, 1331, 1047,
     1333, 1333, 1333, 1332, 1333, 1334, 1334, 1334, 1046, 1045,
     1333, 1041, 1335, 1335, 1335, 1334, 1335, 1336, 1336, 1336,

     1040, 1039, 1335, 1038, 1337, 1337, 1337, 1336, 1337, 1338,
     1338, 1338, 1037, 1036, 1337, 1035, 1339, 1339, 1339, 1338,
     1339, 1340, 1340, 1340, 1034, 1033, 1339, 1031, 1341, 1341,
     1341, 1340, 1341, 1342, 1342, 1342, 1030, 1028, 1341, 1027,
     1343, 1343, 1343, 1342, 1343, 1344, 1344, 1344, 1025, 1023,
     1343, 1022, 1345, 1345, 1345, 1344, 1345, 1346, 1346, 1346,
     1021, 1020, 1345, 1014, 1347, 1347, 1347, 1346, 1347, 1348,
     1348, 1348, 1012, 1011, 1347,  999, 1349, 1349, 1349, 1348,
     1349, 1350, 1350, 1350,  998,  997, 1349,  996, 1351, 1351,
     1351, 1350, 1351, 1352, 1352, 1352,  995,  994, 1351,  988,

     1353, 1353, 1353, 1352, 1353, 1354, 1354, 1354,  987,  984,
     1353,  983, 1355, 1355, 1355, 1354, 1355, 1356, 1356, 1356,
      982,  981, 1355,  980, 1357, 1357, 1357, 1356, 1357, 1358,
     1358, 1358,  979,  978, 1357,  977, 1359, 1359, 1359, 1358,
     1359, 1360, 1360, 1360,  976,  975, 1359,  974, 1361, 1361,
     1361, 1360, 1361, 1362, 1362, 1362,  973,  972, 1361,  971,
     1363, 1363, 1363, 1362, 1363, 1364, 1364, 1364,  970,  969,
     1363,  968, 1365, 1365, 1365, 1364, 1365, 1366, 1366, 1366,
      967,  966, 1365,  964, 1367, 1367, 1367, 1366, 1367, 1368,
     1368, 1368,  961,  960, 1367,  959, 1369, 1369, 1369, 1368,

     1369, 1370, 1370, 1370,  958,  957, 1369,  956, 1371, 1371,
     1371, 1370, 1371, 1372, 1372, 1372,  955,  954, 1371,  953,
     1373, 1373, 1373, 1372, 1373, 1374, 1374, 1374,  951,  950,
     1373,  949, 1375, 1375, 1375, 1374, 1375, 1376, 1376, 1376,
      948,  947, 1375,  945, 1377, 1377, 1377, 1376, 1377, 1378,
     1378, 1378,  943,  941, 1377,  940, 1379, 1379, 1379, 1378,
     1379, 1380, 1380, 1380,  934,  933, 1379,  932, 1381, 1381,
     1381, 1380, 1381, 1382, 1382, 1382,  931,  930, 1381,  927,
     1383, 1383, 1383, 1382, 1383, 1384, 1384, 1384,  923,  922,
     1383,  914, 1385, 1385, 1385, 1384, 1385, 1386, 1386, 1386,

      913,  912, 1385,  911, 1387, 1387, 1387, 1386, 1387, 1388,
     1388, 1388,  908,  896, 1387,  895, 1389, 1389, 1389, 1388,
     1389, 1390, 1390, 1390,  893,  892, 1389,  889, 1391, 1391,
     1391, 1390, 1391, 1392, 1392, 1392,  887,  886, 1391,  883,
     1393, 1393, 1393, 1392, 1393, 1394, 1394, 1394,  882,  881,
     1393,  880, 1395, 1395, 1395, 1394, 1395, 1396, 1396, 1396,
      879,  878, 1395,  877, 1397, 1397, 1397, 1396, 1397, 1398,
     1398, 1398,  876,  875, 1397,  874, 1399, 1399, 1399, 1398,
     1399, 1400, 1400, 1400,  872,  871, 1399,  870, 1401, 1401,
     1401, 1400, 1401, 1402, 1402, 1402,  869,  868, 1401,  867,

     1403, 1403, 1403, 1402, 1403, 1404, 1404, 1404,  866,  865,
     1403,  864, 1405, 1405, 1405, 1404, 1405, 1406, 1406, 1406,
      863,  862, 1405,  860, 1407, 1407, 1407, 1406, 1407, 1408,
     1408, 1408,  857,  854, 1407,  851, 1409, 1409, 1409, 1408,
     1409, 1410, 1410, 1410,  850,  844, 1409,  836, 1411, 1411,
     1411, 1410, 1411, 1412, 1412, 1412,  830,  829, 1411,  828,
     1413, 1413, 1413, 1412, 1413, 1414, 1414, 1414,  827,  826,
     1413,  825, 1415, 1415, 1415, 1414, 1415, 1416, 1416, 1416,
      824,  821, 1415,  820, 1417, 1417, 1417, 1416, 1417, 1418,
     1418, 1418,  817,  815, 1417,  813, 1419, 1419, 1419, 1418,

     1419, 1420, 1420, 1420,  811,  810, 1419,  809, 1421, 1421,
     1421, 1420, 1421, 1422, 1422, 1422,  806,  804, 1421,  802,
     1423, 1423, 1423, 1422, 1423, 1424, 1424, 1424,  800,  798,
     1423,  797, 1425, 1425, 1425, 1424, 1425, 1426, 1426, 1426,
      789,  786, 1425,  780, 1427, 1427, 1427, 1426, 1427, 1428,
     1428, 1428,  779,  775, 1427,  773, 1429, 1429, 1429, 1428,
     1429, 1430, 1430, 1430,  772,  769, 1429,  767, 1431, 1431,
     1431, 1430, 1431, 1432, 1432, 1432,  766,  765, 1431,  762,
     1433, 1433, 1433, 1432, 1433, 1434, 1434, 1434,  761,  758,
     1433,  757, 1435, 1435, 1435, 1434, 1435, 1436, 1436, 1436,

      756,  755, 1435,  754, 1437, 1437, 1437, 1436, 1437, 1438,
     1438, 1438,  753,  752, 1437,  751, 1439, 1439, 1439, 1438,
     1439, 1440, 1440, 1440,  750,  749, 1439,  746, 1441, 1441,
     1441, 1440, 1441, 1442, 1442, 1442,  745,  744, 1441,  743,
     1443, 1443, 1443, 1442, 1443, 1444, 1444, 1444,  742,  741,
     1443,  740, 1445, 1445, 1445, 1444, 1445, 1447, 1447, 1447,
      738, 1447, 1445,  737, 1448, 1448, 1448, 1447, 1448, 1449,
     1449, 1449,  736, 1449, 1448,  734, 1450, 1450, 1450, 1449,
     1450, 1451, 1451, 1451,  732, 1451, 1450,  730, 1452, 1452,
     1452, 1451, 1452,  729,  725,  724,  722,  714, 1452, 1455,

     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,

     1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460,
     1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461,
     1461, 1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464,

     1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466,
     1466, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
     1467, 1467, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469, 1469,

     1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
     1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471,
     1471, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1474, 1474,

     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475, 1475,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476,
     1476, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1477, 1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,

     1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1483, 1483, 1483,  712, 1483, 1483,
      711, 1483, 1483,  708, 1483, 1483, 1483, 1483,  704, 1483,
     1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484,  700, 1484,
     1484, 1484, 1484, 1484,  696, 1484, 1484, 1484, 1484, 1484,
     1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485,  692,
     1485, 1485,  689, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1485,  688, 1485, 1486, 1486, 1486,
      676, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486,

     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1487, 1487,
     1487,  674, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1488,
     1488, 1488,  673,  672,  670,  669,  668, 1488,  665,  662,
      661,  660, 1488,  659,  658, 1488, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490,
      657,  655, 1490,  654, 1490, 1490, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490,  653, 1490, 1491, 1491,
     1491,  652, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,

     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1492,
     1492, 1492,  651,  649, 1492,  645, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
     1493, 1493, 1493,  642,  636, 1493, 1493, 1493, 1493,  635,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,  628,
     1493, 1494, 1494, 1494,  621, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
     1494, 1494, 1495, 1495, 1495,  620,  611, 1495,  610, 1495,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495,  609, 1495, 1496, 1496, 1496,  608, 1496, 1496, 1496,

     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1497, 1497, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497,  607, 1497, 1497, 1497, 1497,
     1497, 1497, 1497, 1497, 1497, 1498, 1498,  606, 1498, 1498,
     1498, 1498, 1498, 1498, 1498,  605,  604, 1498, 1498, 1498,
     1498, 1498, 1498, 1498,  603, 1498, 1499, 1499, 1499,  602,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500,  590,  582,
      581,  579,  578,  574,  566, 1500,  565,  560,  559,  557,
     1500,  556,  551, 1500, 1501, 1501, 1501, 1501, 1501, 1501,

     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501,  550, 1501, 1502, 1502,  549,  548,  547,
      546,  545,  544, 1502,  543,  542,  532,  526, 1502,  525,
      521, 1502, 1502, 1503,  519,  518,  517,  516,  515,  513,
      508,  502,  490,  489, 1503,  465, 1503,  462,  455, 1503,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1506, 1507,  447, 1507,  444, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507,  439, 1507,  438, 1507, 1507,  437, 1507,
     1508, 1508, 1508,  436, 1508, 1508, 1508, 1508, 1508, 1508,

     1508, 1508,  434, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1509, 1509, 1509,  432, 1509, 1509, 1509, 1509, 1509,
     1509, 1509, 1509,  431, 1509, 1509, 1509, 1509, 1509,  425,
     1509, 1509, 1510, 1510, 1510,  424, 1510, 1510, 1510, 1510,
     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510,  413,
     1510,  404, 1510, 1511, 1511, 1511,  396, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1511, 1511, 1511,  388, 1511, 1511,
      379, 1511,  375, 1511, 1512,  367, 1512,  357, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
     1512,  348, 1512,  346, 1512, 1513,  339, 1513,  338, 1513,

     1513, 1513, 1513, 1513, 1513, 1513, 1513,  337, 1513, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1514,  336, 1514,  335,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
     1514, 1514, 1514, 1514, 1514, 1514, 1514, 1518, 1518, 1518,
      334, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1520, 1520,
     1520,  333, 1520, 1520, 1520, 1520, 1520,  332, 1520, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,
     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521,

     1522,  331,  327, 1522,  320,  314, 1522,  312, 1522, 1522,
      304, 1522,  290, 1522,  289,  284, 1522, 1523, 1523, 1523,
      283, 1523,  278, 1523, 1523, 1523, 1523, 1523, 1523,  277,
     1523,  275, 1523, 1523,  274, 1523,  272, 1523, 1526, 1526,
     1526,  270, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
     1527, 1527,  265, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
     1529, 1529, 1529,  264, 1529, 1529,  257, 1529, 1529,  255,
     1529, 1529, 1529, 1529,  249, 1529, 1529, 1529, 1529, 1529,

     1529, 1530, 1530, 1530,  240, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
      230, 1530, 1531, 1531, 1531,  227, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1532, 1532, 1532,  220, 1532, 1532,  218,
     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
     1532, 1532,  217, 1532, 1533, 1533, 1533,  216, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534,  215, 1534,
     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534,

     1534, 1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535,  212,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536,
      208,  206,  205,  196,  194, 1536,  187,  180,  174,  168,
     1536,  163,  153, 1536, 1537, 1537,  152, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537,  150, 1537, 1537, 1537, 1537,
     1537, 1537, 1537,  142, 1537, 1538, 1538, 1538,  135,  133,
     1538,  126, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538,  123, 1538, 1539, 1539, 1539,  116,
      115, 1539,  112, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540, 1540,
      111,  109, 1540, 1540, 1540, 1540,  102, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540,   99, 1540, 1541, 1541,
     1541,   89,   83, 1541,   16, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541,    0, 1541, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
        0, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1543, 1543,    0, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
        0,    0, 1543, 1543, 1543, 1543, 1543, 1543, 1543,    0,
     1543, 1544, 1544, 1544,    0, 1544, 1544, 1544, 1544, 1544,

     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1545,    0,    0,    0,    0,    0,    0,    0,
     1545,    0,    0,    0,    0, 1545,    0,    0, 1545, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,    0, 1546,
     1547, 1547,    0,    0,    0,    0,    0,    0, 1547,    0,
        0,    0,    0, 1547,    0,    0, 1547, 1547, 1548,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1548,
        0, 1548,    0,    0, 1548, 1550, 1550, 1550, 1550, 1550,
     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,

     1550, 1550, 1550, 1550, 1550, 1550, 1551,    0, 1551,    0,
     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,    0, 1551,
        0, 1551, 1551,    0, 1551, 1552, 1552, 1552,    0, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552,    0, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553,    0,
     1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,    0, 1553,
     1553, 1553, 1553, 1553,    0, 1553, 1553, 1554, 1554, 1554,
        0, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554,    0, 1554,    0, 1554, 1555, 1555,
     1555,    0, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,

     1555, 1555,    0, 1555, 1555,    0, 1555,    0, 1555, 1556,
        0, 1556,    0, 1556, 1556, 1556, 1556, 1556, 1556, 1556,
     1556, 1556, 1556, 1556, 1556, 1556,    0, 1556,    0, 1556,
     1557,    0, 1557,    0, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557,    0, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1558,    0, 1558,    0, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1563, 1563, 1563,    0, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
     1563,    0, 1563, 1564, 1564, 1564,    0, 1564, 1564, 1564,

     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
     1564, 1564, 1564, 1564, 1565,    0,    0, 1565,    0,    0,
     1565,    0, 1565, 1565,    0, 1565,    0, 1565,    0,    0,
     1565, 1566, 1566, 1566,    0, 1566,    0, 1566, 1566, 1566,
     1566, 1566, 1566,    0, 1566,    0, 1566, 1566,    0, 1566,
        0, 1566, 1567, 1567, 1567,    0, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1568, 1568, 1568,    0, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1569,    0,    0,    0,    0,    0,

        0,    0, 1569,    0,    0,    0,    0, 1569,    0,    0,
     1569, 1571, 1571, 1571,    0, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,
     1571, 1571, 1572, 1572, 1572,    0, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1574, 1574, 1574,    0, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
     1574, 1574,    0, 1574, 1575, 1575, 1575,    0, 1575, 1575,
        0, 1575, 1575,    0, 1575, 1575, 1575, 1575,    0, 1575,
     1575, 1575, 1575, 1575, 1575, 1576, 1576, 1576,    0, 1576,

     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1576, 1577, 1577, 1577,    0,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1578, 1578, 1578,
        0, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579,
     1579,    0, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
     1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1580,
     1580, 1580,    0, 1580, 1580,    0, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580,    0, 1580,

     1581, 1581,    0, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581,    0, 1581, 1581, 1581, 1581, 1581, 1581, 1581,    0,
     1581, 1582, 1582, 1582,    0,    0,    0,    0,    0, 1582,
        0,    0,    0,    0, 1582,    0,    0, 1582, 1583, 1583,
     1583,    0,    0, 1583,    0, 1583, 1583, 1583, 1583, 1583,
     1583, 1583, 1583, 1583, 1583, 1583, 1583,    0, 1583, 1584,
     1584, 1584,    0,    0, 1584,    0, 1584, 1584, 1584, 1584,
     1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
     1585, 1585, 1585,    0,    0, 1585, 1585, 1585, 1585,    0,
     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585,    0,

     1585, 1586, 1586, 1586,    0,    0, 1586,    0, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
        0, 1586, 1587, 1587,    0, 1587, 1587, 1587, 1587, 1587,
     1587, 1587,    0,    0, 1587, 1587, 1587, 1587, 1587, 1587,
     1587,    0, 1587, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588,    0, 1588, 1588, 1588, 1588, 1588,
     1588, 1588, 1588, 1588, 1589, 1589, 1589,    0, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
     1589, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,

     1590, 1590, 1590, 1590,    0, 1590, 1591,    0, 1591,    0,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,    0, 1591,
        0, 1591, 1591,    0, 1591, 1592, 1592, 1592,    0, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1592,    0, 1592, 1592,
     1592, 1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593,    0,
     1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,    0, 1593,
     1593, 1593, 1593, 1593,    0, 1593, 1593, 1594,    0, 1594,
        0, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
     1594, 1594, 1594, 1594,    0, 1594,    0, 1594, 1595, 1595,
     1595,    0, 1595, 1595, 1595, 1595, 1595, 1595, 1595, 1595,

     1595, 1595, 1595, 1595, 1595,    0, 1595,    0, 1595, 1596,
        0, 1596,    0, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1596,    0, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,
     1597,    0, 1597,    0, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
     1597, 1599, 1599, 1599,    0, 1599, 1599, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
        0, 1599, 1600, 1600, 1600,    0, 1600,    0, 1600, 1600,
     1600, 1600, 1600, 1600,    0, 1600,    0, 1600, 1600,    0,
     1600,    0, 1600, 1601, 1601, 1601,    0, 1601, 1601, 1601,

     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601, 1602, 1602, 1602,    0, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
     1602, 1602, 1602, 1602, 1602, 1603, 1603, 1603,    0, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1604,    0,    0,    0,
        0,    0,    0,    0, 1604,    0,    0,    0,    0, 1604,
        0,    0, 1604, 1606, 1606, 1606,    0, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1606, 1606, 1606, 1606, 1607,    0,    0, 1607,    0,    0,

        0,    0, 1607,    0,    0,    0,    0, 1607,    0,    0,
     1607, 1608, 1608, 1608,    0, 1608, 1608, 1608, 1608, 1608,
     1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
        0, 1608, 1609, 1609, 1609,    0, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
     1609, 1609, 1609, 1610, 1610,    0, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610,    0, 1610, 1610, 1610, 1610, 1610,
     1610, 1610,    0, 1610, 1611, 1611,    0, 1611, 1611, 1611,
     1611, 1611, 1611, 1611,    0,    0, 1611, 1611, 1611, 1611,
     1611, 1611, 1611,    0, 1611, 1612, 1612, 1612,    0, 1612,

     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
     1612, 1612, 1612, 1612,    0, 1612, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
     1613, 1613, 1613, 1613, 1613, 1613, 1613, 1614, 1614,    0,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,    0, 1614,
     1614, 1614, 1614, 1614, 1614, 1614,    0, 1614, 1615, 1615,
        0, 1615, 1615, 1615, 1615, 1615, 1615, 1615,    0,    0,
     1615, 1615, 1615, 1615, 1615, 1615, 1615,    0, 1615, 1616,
     1616,    0, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616,
        0, 1616, 1616, 1616, 1616, 1616, 1616, 1616,    0, 1616,

     1617, 1617,    0, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
        0,    0, 1617, 1617, 1617, 1617, 1617, 1617, 1617,    0,
     1617, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
     1618, 1618, 1619,    0,    0,    0, 1619,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1619,    0, 1619, 1620,
     1620,    0, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
        0, 1620, 1620, 1620, 1620, 1620, 1620, 1620,    0, 1620,
     1621, 1621, 1621, 1621, 1621, 1621,    0, 1621, 1621, 1621,
     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621,

     1621, 1622, 1622,    0, 1622, 1622, 1622, 1622, 1622, 1622,
     1622,    0,    0, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
        0, 1622, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
     1623, 1623, 1623, 1625, 1625,    0, 1625, 1625, 1625, 1625,
     1625, 1625, 1625, 1625,    0, 1625, 1625, 1625, 1625, 1625,
     1625, 1625,    0, 1625, 1626, 1626,    0, 1626, 1626, 1626,
     1626, 1626, 1626, 1626,    0,    0, 1626, 1626, 1626, 1626,
     1626, 1626, 1626,    0, 1626, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,

        0, 1627, 1627,    0, 1627, 1627, 1628, 1628, 1628, 1628,
     1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
     1628,    0, 1628, 1628,    0, 1628, 1628, 1629, 1629,    0,
     1629, 1629, 1629, 1629, 1629, 1629, 1629, 1629,    0, 1629,
     1629, 1629, 1629, 1629, 1629, 1629,    0, 1629, 1630, 1630,
        0, 1630, 1630, 1630, 1630, 1630, 1630, 1630,    0,    0,
     1630, 1630, 1630, 1630, 1630, 1630, 1630,    0, 1630, 1631,
     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631,
     1631, 1631, 1631, 1631,    0, 1631, 1631,    0, 1631, 1631,
     1632, 1632, 1632,    0, 1632, 1632, 1632, 1632, 1632, 1632,

     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
     1632, 1633, 1633,    0, 1633, 1633, 1633, 1633, 1633, 1633,
     1633, 1633,    0, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
        0, 1633, 1634, 1634,    0, 1634, 1634, 1634, 1634, 1634,
     1634, 1634,    0,    0, 1634, 1634, 1634, 1634, 1634, 1634,
     1634,    0, 1634, 1635, 1635,    0, 1635, 1635, 1635, 1635,
     1635, 1635, 1635, 1635,    0, 1635, 1635, 1635, 1635, 1635,
     1635, 1635,    0, 1635, 1636, 1636,    0, 1636, 1636, 1636,
     1636, 1636, 1636, 1636,    0,    0, 1636, 1636, 1636, 1636,
     1636, 1636, 1636,    0, 1636, 1637, 1637,    0, 1637, 1637,

     1637, 1637, 1637, 1637, 1637, 1637,    0, 1637, 1637, 1637,
     1637, 1637, 1637, 1637,    0, 1637, 1638, 1638,    0, 1638,
     1638, 1638, 1638, 1638, 1638, 1638,    0,    0, 1638, 1638,
     1638, 1638, 1638, 1638, 1638,    0, 1638, 1639, 1639,    0,
     1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,    0, 1639,
     1639, 1639, 1639, 1639, 1639, 1639,    0, 1639, 1640, 1640,
        0, 1640, 1640, 1640, 1640, 1640, 1640, 1640,    0,    0,
     1640, 1640, 1640, 1640, 1640, 1640, 1640,    0, 1640, 1641,
     1641,    0, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641,
        0, 1641, 1641, 1641, 1641, 1641, 1641, 1641,    0, 1641,

     1642, 1642,    0, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
        0,    0, 1642, 1642, 1642, 1642, 1642, 1642, 1642,    0,
     1642, 1643, 1643,    0, 1643, 1643, 1643, 1643, 1643, 1643,
     1643, 1643,    0, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
        0, 1643, 1644, 1644,    0, 1644, 1644, 1644, 1644, 1644,
     1644, 1644,    0,    0, 1644, 1644, 1644, 1644, 1644, 1644,
     1644,    0, 1644, 1645, 1645,    0, 1645, 1645, 1645, 1645,
     1645, 1645, 1645, 1645,    0, 1645, 1645, 1645, 1645, 1645,
     1645, 1645,    0, 1645, 1646, 1646,    0, 1646, 1646, 1646,
     1646, 1646, 1646, 1646,    0,    0, 1646, 1646, 1646, 1646,

     1646, 1646, 1646,    0, 1646, 1647, 1647,    0, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647,    0, 1647, 1647, 1647,
     1647, 1647, 1647, 1647,    0, 1647, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454

    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2020 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby
 * granted. No representations are made about the suitability of this software
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */

#line 28 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

/*
 *      includes
 */

#include "doxygen.h"

#include <stack>
#include <deque>
#include <algorithm>
#include <utility>
#include <mutex>
#include <thread>
#include <algorithm>

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include "qcstring.h"
#include "containers.h"
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"
#include "bufstr.h"
#include "arguments.h"
#include "entry.h"
#include "condparser.h"
#include "config.h"
#include "filedef.h"
#include "regex.h"
#include "fileinfo.h"

#define YY_NO_UNISTD_H 1

#define USE_STATE2STRING 0

// Toggle for some debugging info
//#define DBG_CTX(x) fprintf x
#define DBG_CTX(x) do { } while(0)

#if USE_STATE2STRING
static const char *stateToString(int state);
#endif

struct preYY_CondCtx
{
  preYY_CondCtx(int line,QCString id,bool b)
    : lineNr(line),sectionId(id), skip(b) {}
  int lineNr;
  QCString sectionId;
  bool skip;
};

struct FileState
{
  FileState(uint size) : fileBuf(size) {}
  int lineNr = 1;
  int curlyCount = 0;
  BufStr fileBuf;
  BufStr *oldFileBuf = 0;
  yy_size_t oldFileBufPos = 0;
  YY_BUFFER_STATE bufState = 0;
  QCString fileName;
};

struct PreIncludeInfo
{
  PreIncludeInfo(const QCString &fn,FileDef *srcFd, FileDef *dstFd,const QCString &iName,bool loc, bool imp)
    : fileName(fn), fromFileDef(srcFd), toFileDef(dstFd), includeName(iName), local(loc), imported(imp)
  {
  }
  QCString fileName;    // file name in which the include statement was found
  FileDef *fromFileDef; // filedef in which the include statement was found
  FileDef *toFileDef;   // filedef to which the include is pointing
  QCString includeName; // name used in the #include statement
  bool local;           // is it a "local" or <global> include
  bool imported;        // include via "import" keyword (Objective-C)
};

/** A dictionary of managed Define objects. */
typedef std::map< std::string, Define > DefineMap;

/** @brief Class that manages the defines available while
 *  preprocessing files.
 */
class DefineManager
{
  private:
    /** Local class used to hold the defines for a single file */
    class DefinesPerFile
    {
      public:
        /** Creates an empty container for defines */
        DefinesPerFile(DefineManager *parent)
          : m_parent(parent)
        {
        }
        void addInclude(std::string fileName)
        {
          m_includedFiles.insert(fileName);
        }
        void store(const DefineMap &fromMap)
        {
          for (auto &kv : fromMap)
          {
            m_defines.emplace(kv.first,kv.second);
          }
          //printf("  m_defines.size()=%zu\n",m_defines.size());
          m_stored=true;
        }
        void retrieve(DefineMap &toMap)
        {
          StringSet includeStack;
          retrieveRec(toMap,includeStack);
        }
        void retrieveRec(DefineMap &toMap,StringSet &includeStack)
        {
          //printf("  retrieveRec #includedFiles=%zu\n",m_includedFiles.size());
          for (auto incFile : m_includedFiles)
          {
            DefinesPerFile *dpf = m_parent->find(incFile);
            if (dpf && includeStack.find(incFile)==includeStack.end())
            {
              includeStack.insert(incFile);
              dpf->retrieveRec(toMap,includeStack);
              //printf("  retrieveRec: processing include %s: #toMap=%zu\n",qPrint(incFile),toMap.size());
            }
          }
          for (auto &kv : m_defines)
          {
            toMap.emplace(kv.first,kv.second);
          }
        }
        bool stored() const { return m_stored; }
      private:
        DefineManager *m_parent;
        DefineMap m_defines;
        StringSet m_includedFiles;
        bool m_stored = false;
    };

    friend class DefinesPerFile;
  public:

    void addInclude(std::string fromFileName,std::string toFileName)
    {
      //printf("DefineManager::addInclude('%s'->'%s')\n",fromFileName.c_str(),toFileName.c_str());
      auto it = m_fileMap.find(fromFileName);
      if (it==m_fileMap.end())
      {
        it = m_fileMap.emplace(fromFileName,std::make_unique<DefinesPerFile>(this)).first;
      }
      auto &dpf = it->second;
      dpf->addInclude(toFileName);
    }

    void store(std::string fileName,const DefineMap &fromMap)
    {
      //printf("DefineManager::store(%s,#=%zu)\n",fileName.c_str(),fromMap.size());
      auto it = m_fileMap.find(fileName);
      if (it==m_fileMap.end())
      {
        it = m_fileMap.emplace(fileName,std::make_unique<DefinesPerFile>(this)).first;
      }
      it->second->store(fromMap);
    }

    void retrieve(std::string fileName,DefineMap &toMap)
    {
      auto it = m_fileMap.find(fileName);
      if (it!=m_fileMap.end())
      {
        auto &dpf = it->second;
        dpf->retrieve(toMap);
      }
      //printf("DefineManager::retrieve(%s,#=%zu)\n",fileName.c_str(),toMap.size());
    }

    bool alreadyProcessed(std::string fileName) const
    {
      auto it = m_fileMap.find(fileName);
      if (it!=m_fileMap.end())
      {
        return it->second->stored();
      }
      return false;
    }

  private:
    /** Helper function to return the DefinesPerFile object for a given file name. */
    DefinesPerFile *find(std::string fileName) const
    {
      auto it = m_fileMap.find(fileName);
      return it!=m_fileMap.end() ? it->second.get() : nullptr;
    }

    std::unordered_map< std::string, std::unique_ptr<DefinesPerFile> > m_fileMap;
};


/* -----------------------------------------------------------------
 *
 *      global state
 */
static std::mutex            g_debugMutex;
static std::mutex            g_globalDefineMutex;
static std::mutex            g_updateGlobals;
static DefineManager         g_defineManager;


/* -----------------------------------------------------------------
 *
 *      scanner's state
 */

struct preYY_state
{
  int                yyLineNr       = 1;
  int                yyMLines       = 1;
  int                yyColNr        = 1;
  QCString           fileName;
  FileDef           *yyFileDef      = 0;
  FileDef           *inputFileDef   = 0;
  int                ifcount        = 0;
  int                defArgs        = -1;
  QCString           defName;
  QCString           defText;
  QCString           defLitText;
  QCString           defArgsStr;
  QCString           defExtraSpacing;
  bool               defContinue = false;
  bool               defVarArgs     = false;
  int                lastCContext   = 0;
  int                lastCPPContext = 0;
  BufStr            *inputBuf       = 0;
  yy_size_t          inputBufPos    = 0;
  BufStr            *outputBuf      = 0;
  int                roundCount     = 0;
  bool               quoteArg       = false;
  bool               idStart        = false;
  int                findDefArgContext = 0;
  bool               expectGuard    = false;
  QCString           guardName;
  QCString           lastGuardName;
  QCString           incName;
  QCString           guardExpr;
  int                curlyCount     = 0;
  bool               nospaces       = false; // add extra spaces during macro expansion
  int                javaBlock      = 0;

  bool               macroExpansion = false; // from the configuration
  bool               expandOnlyPredef = false; // from the configuration
  QCString           potentialDefine;
  int                commentCount   = 0;
  bool               insideComment  = false;
  bool               isImported     = false;
  QCString           blockName;
  int                condCtx        = 0;
  bool               skip           = false;
  bool               insideIDL      = false;
  bool               insideCS       = false; // C# has simpler preprocessor
  bool               insideFtn      = false;
  bool               isSource       = false;

  yy_size_t          fenceSize      = 0;
  bool               ccomment       = false;
  QCString           delimiter;
  bool               isSpecialComment = false;
  StringVector                             pathList;
  IntMap                                   argMap;
  BoolStack                                levelGuard;
  std::stack< std::unique_ptr<preYY_CondCtx> >   condStack;
  std::deque< std::unique_ptr<FileState> > includeStack;
  std::unordered_map<std::string,Define*>  expandedDict;
  StringUnorderedSet                       expanded;
  ConstExpressionParser                    constExpParser;
  DefineMap                                contextDefines; // macros imported from other files
  DefineMap                                localDefines;   // macros defined in this file
  DefineList                               macroDefinitions;
  LinkedMap<PreIncludeInfo>                includeRelations;
};

// stateless functions
static QCString escapeAt(const QCString &text);
static QCString extractTrailingComment(const QCString &s);
static char resolveTrigraph(char c);

// stateful functions
static inline void  outputArray(yyscan_t yyscanner,const char *a,yy_size_t len);
static inline void outputString(yyscan_t yyscanner,const QCString &s);
static inline void   outputChar(yyscan_t yyscanner,char c);
static inline void outputSpaces(yyscan_t yyscanner,char *s);
static inline void  outputSpace(yyscan_t yyscanner,char c);
static inline void extraSpacing(yyscan_t yyscanner);
static QCString     expandMacro(yyscan_t yyscanner,const QCString &name);
static void     readIncludeFile(yyscan_t yyscanner,const QCString &inc);
static void           incrLevel(yyscan_t yyscanner);
static void           decrLevel(yyscan_t yyscanner);
static void         setCaseDone(yyscan_t yyscanner,bool value);
static bool       otherCaseDone(yyscan_t yyscanner);
static bool   computeExpression(yyscan_t yyscanner,const QCString &expr);
static void    startCondSection(yyscan_t yyscanner,const QCString &sectId);
static void      endCondSection(yyscan_t yyscanner);
static void  addMacroDefinition(yyscan_t yyscanner);
static void           addDefine(yyscan_t yyscanner);
static void         setFileName(yyscan_t yyscanner,const QCString &name);
static yy_size_t         yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size);
static Define *       isDefined(yyscan_t yyscanner,const QCString &name);

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(yyscanner,buf,max_size);

// otherwise the filename would be the name of the converted file (*.cpp instead of *.l)
static inline const char *getLexerFILE() {return __FILE__;}
#include "doxygen_lex.h"

/* ----------------------------------------------------------------- */

#line 3194 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pre_intermediate.cpp"
#line 368 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
  // C start comment 
  // C end comment
  // Cpp comment 
  // optional characters after import
  // Optional white space








































#line 3241 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pre_intermediate.cpp"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define SkipString 5
#define CopyLine 6
#define LexCopyLine 7
#define CopyString 8
#define CopyStringCs 9
#define CopyStringFtn 10
#define CopyStringFtnDouble 11
#define CopyRawString 12
#define Include 13
#define IncludeID 14
#define EndImport 15
#define DefName 16
#define DefineArg 17
#define DefineText 18
#define SkipCPPBlock 19
#define SkipCComment 20
#define ArgCopyCComment 21
#define CopyCComment 22
#define SkipVerbatim 23
#define SkipCPPComment 24
#define JavaDocVerbatimCode 25
#define RemoveCComment 26
#define RemoveCPPComment 27
#define Guard 28
#define DefinedExpr1 29
#define DefinedExpr2 30
#define SkipDoubleQuote 31
#define SkipSingleQuote 32
#define UndefName 33
#define IgnoreLine 34
#define FindDefineArgs 35
#define ReadString 36
#define CondLineC 37
#define CondLineCpp 38
#define SkipCond 39
#define IDLquote 40

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#define YY_EXTRA_TYPE struct preYY_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int preYYlex_init (yyscan_t* scanner);

int preYYlex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int preYYlex_destroy ( yyscan_t yyscanner );

int preYYget_debug ( yyscan_t yyscanner );

void preYYset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE preYYget_extra ( yyscan_t yyscanner );

void preYYset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *preYYget_in ( yyscan_t yyscanner );

void preYYset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *preYYget_out ( yyscan_t yyscanner );

void preYYset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int preYYget_leng ( yyscan_t yyscanner );

char *preYYget_text ( yyscan_t yyscanner );

int preYYget_lineno ( yyscan_t yyscanner );

void preYYset_lineno ( int _line_number , yyscan_t yyscanner );

int preYYget_column  ( yyscan_t yyscanner );

void preYYset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap ( yyscan_t yyscanner );
#else
extern int preYYwrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (yyscan_t yyscanner);

#define YY_DECL int preYYlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in preYYlex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		preYY_load_buffer_state(yyscanner );
		}

	{
#line 422 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"


#line 3562 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pre_intermediate.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1455 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1454 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 424 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 425 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 426 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 427 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // Trigraph
                                          unput(resolveTrigraph(yytext[2]));
                                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 430 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->yyColNr+=(int)yyleng;
                                          yyextra->yyMLines=0;
                                          yyextra->potentialDefine=yytext;
                                          BEGIN(Command); 
                                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 436 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Lex) REJECT
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN(LexCopyLine);
                                        }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 441 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (yyextra->insideIDL)
                                          {
                                            BEGIN(IDLquote);
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
                                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 451 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,"\\",1);
                                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 454 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,"\"",1);
                                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 457 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 460 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 464 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 467 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN(CopyLine);
                                        }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 471 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // constructors?
                                          int i;
                                          for (i=(int)yyleng-1;i>=0;i--)
                                          {
                                            unput(yytext[i]);
                                          }
                                          BEGIN(CopyLine);
                                        }
	YY_BREAK
case 15:
/* rule 15 can match eol */
#line 480 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
case 16:
/* rule 16 can match eol */
#line 481 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
case 17:
/* rule 17 can match eol */
#line 482 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 482 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // function like macro followed by comment
                                          bool skipFuncMacros = Config_getBool(SKIP_FUNCTION_MACROS);
                                          QCString name(yytext);
                                          int pos = name.find('(');
                                          if (pos<0) pos=0; // should never happen
                                          name=name.left(pos).stripWhiteSpace();

                                          Define *def=0;
                                          if (skipFuncMacros && !yyextra->insideFtn &&
                                              name!="Q_PROPERTY" &&
                                              !(
                                                 (yyextra->includeStack.empty() || yyextra->curlyCount>0) &&
                                                 yyextra->macroExpansion &&
                                                 (def=isDefined(yyscanner,name)) &&
                                                 /*macroIsAccessible(def) &&*/
                                                 (!yyextra->expandOnlyPredef || def->isPredefined)
                                               )
                                             )
                                          {
                                            // Only when ends on \n
                                            if (yytext[yyleng-1] == '\n')
                                            {
                                              outputChar(yyscanner,'\n');
                                              yyextra->yyLineNr++;
                                            }
                                          }
                                          else // don't skip
                                          {
                                            int i;
                                            for (i=(int)yyleng-1;i>=0;i--)
                                            {
                                              unput(yytext[i]);
                                            }
                                            BEGIN(CopyLine);
                                          }
                                        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 518 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          QCString text=yytext;
                                          yyextra->yyLineNr+=text.contains('\n');
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 523 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->delimiter = yytext+2;
                                          yyextra->delimiter=yyextra->delimiter.left(yyextra->delimiter.length()-1);
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN(CopyRawString);
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 529 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // count brackets inside the main file
                                          if (yyextra->includeStack.empty())
                                          {
                                            yyextra->curlyCount++;
                                          }
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 536 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 539 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // count brackets inside the main file
                                          if (yyextra->includeStack.empty() && yyextra->curlyCount>0)
                                          {
                                            yyextra->curlyCount--;
                                          }
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 546 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 549 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 552 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 555 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_CSharp) REJECT;
                                          outputArray(yyscanner,yytext,yyleng);
                                          BEGIN( CopyStringCs );
                                        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 560 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran)
                                          {
                                            BEGIN( CopyString );
                                          }
                                          else
                                          {
                                            BEGIN( CopyStringFtnDouble );
                                          }
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 571 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran) REJECT;
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyStringFtn );
                                        }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 576 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 579 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 582 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 585 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyLine );
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 589 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 592 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 595 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyLine );
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 599 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 602 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 605 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                          BEGIN( CopyLine );
                                        }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 609 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          QCString delimiter = yytext+1;
                                          delimiter=delimiter.left(delimiter.length()-1);
                                          if (delimiter==yyextra->delimiter)
                                          {
                                            BEGIN( CopyLine );
                                          }
                                        }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 618 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 621 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 624 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                          Define *def=0;
                                          //def=yyextra->globalDefineDict->find(yytext);
                                          //def=isDefined(yyscanner,yytext);
                                          //printf("Search for define %s found=%d yyextra->includeStack.empty()=%d "
                                          //       "yyextra->curlyCount=%d yyextra->macroExpansion=%d yyextra->expandOnlyPredef=%d "
                                          //     "isPreDefined=%d\n",yytext,def ? 1 : 0,
                                          //     yyextra->includeStack.empty(),yyextra->curlyCount,yyextra->macroExpansion,yyextra->expandOnlyPredef,
                                          //     def ? def->isPredefined : -1
                                          //    );
                                          if ((yyextra->includeStack.empty() || yyextra->curlyCount>0) &&
                                              yyextra->macroExpansion &&
                                              (def=isDefined(yyscanner,yytext)) &&
                                              (!yyextra->expandOnlyPredef || def->isPredefined)
                                             )
                                          {
                                            //printf("Found it! #args=%d\n",def->nargs);
                                            yyextra->roundCount=0;
                                            yyextra->defArgsStr=yytext;
                                            if (def->nargs==-1) // no function macro
                                            {
                                              QCString result = def->isPredefined && !def->expandAsDefined ? 
                                                def->definition :
                                                expandMacro(yyscanner,yyextra->defArgsStr);
                                              outputString(yyscanner,result);
                                            }
                                            else // zero or more arguments
                                            {
                                              yyextra->findDefArgContext = CopyLine;
                                              BEGIN(FindDefineArgs);
                                            }
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                          }
                                        }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 662 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          Define *def=0;
                                          if ((yyextra->includeStack.empty() || yyextra->curlyCount>0) &&
                                              yyextra->macroExpansion &&
                                              (def=isDefined(yyscanner,yytext)) &&
                                              def->nargs==-1 &&
                                              (!yyextra->expandOnlyPredef || def->isPredefined)
                                             )
                                          {
                                            QCString result=def->isPredefined && !def->expandAsDefined ?
                                              def->definition :
                                              expandMacro(yyscanner,yytext);
                                            outputString(yyscanner,result);
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                          }
                                        }
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 681 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // strip line continuation characters
                                          if (getLanguageFromFileName(yyextra->fileName)==SrcLangExt_Fortran) outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 684 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 687 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 690 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          BEGIN(Start);
                                          yyextra->yyLineNr++;
                                          yyextra->yyColNr=1;
                                        }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 696 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+='(';
                                          yyextra->roundCount++;
                                        }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 700 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=')';
                                          yyextra->roundCount--;
                                          if (yyextra->roundCount==0)
                                          {
                                            QCString result=expandMacro(yyscanner,yyextra->defArgsStr);
                                            //printf("yyextra->defArgsStr='%s'->'%s'\n",qPrint(yyextra->defArgsStr),qPrint(result));
                                            if (yyextra->findDefArgContext==CopyLine)
                                            {
                                              outputString(yyscanner,result);
                                              BEGIN(yyextra->findDefArgContext);
                                            }
                                            else // yyextra->findDefArgContext==IncludeID
                                            {
                                              readIncludeFile(yyscanner,result);
                                              yyextra->nospaces=FALSE;
                                              BEGIN(Start);
                                            }
                                          }
                                        }
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("              {
                                          yyextra->defArgsStr+=yytext;
                                        }
  */
case 51:
YY_RULE_SETUP
#line 725 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 728 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                          BEGIN(ArgCopyCComment);
                                        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 732 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(ReadString);
                                        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 736 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran) REJECT;
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(ReadString);
                                        }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 741 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=' ';
                                          yyextra->yyLineNr++;
                                          outputChar(yyscanner,'\n');
                                        }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 746 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+="@@";
                                        }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 749 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 752 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 755 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 759 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=' ';
                                          yyextra->yyLineNr++;
                                          outputChar(yyscanner,'\n');
                                        }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 764 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 767 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 771 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (getLanguageFromFileName(yyextra->fileName)!=SrcLangExt_Fortran) REJECT;
                                          yyextra->defArgsStr+=*yytext;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 777 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 65:
/* rule 65 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 780 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // line continuation
                                        }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 782 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=yytext;
                                        }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 785 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defArgsStr+=*yytext;
                                        }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 788 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->isImported = yytext[1]=='m';
                                          if (yyextra->macroExpansion)
                                            BEGIN(IncludeID);
                                        }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 793 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->isImported = yytext[1]=='m';
                                          char c[2];
                                          c[0]=yytext[yyleng-1];c[1]='\0';
                                          yyextra->incName=c;
                                          BEGIN(Include);
                                        }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 800 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->potentialDefine += substitute(yytext,"cmake","     ");
                                          //printf("!!!DefName\n");
                                          yyextra->yyColNr+=(int)yyleng;
                                          BEGIN(DefName);
                                        }
	YY_BREAK
case 71:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 806 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr.resize(0);
                                          BEGIN(DefinedExpr2);
                                        }
	YY_BREAK
case 72:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 811 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          //printf("Pre.l: ifdef\n");
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr.resize(0);
                                          BEGIN(DefinedExpr1);
                                        }
	YY_BREAK
case 73:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 817 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr="! ";
                                          BEGIN(DefinedExpr2);
                                        }
	YY_BREAK
case 74:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 822 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr="! ";
                                          BEGIN(DefinedExpr1);
                                        }
	YY_BREAK
case 75:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 827 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->guardExpr.resize(0);
                                          BEGIN(Guard);
                                        }
	YY_BREAK
case 76:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 832 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (!otherCaseDone(yyscanner))
                                          {
                                            yyextra->guardExpr.resize(0);
                                            BEGIN(Guard);
                                          }
                                          else
                                          {
                                            yyextra->ifcount=0;
                                            BEGIN(SkipCPPBlock);
                                          }
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 844 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (otherCaseDone(yyscanner))
                                          {
                                            yyextra->ifcount=0;
                                            BEGIN(SkipCPPBlock);
                                          }
                                          else
                                          {
                                            setCaseDone(yyscanner,TRUE);
                                          }
                                        }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 855 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(UndefName);
                                        }
	YY_BREAK
case 79:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 858 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (!otherCaseDone(yyscanner))
                                          {
                                            yyextra->guardExpr.resize(0);
                                            BEGIN(Guard);
                                          }
                                        }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 865 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          //printf("Pre.l: #endif\n");
                                          decrLevel(yyscanner);
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 869 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          BEGIN(Start);
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 874 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                        }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 877 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // unknown directive
                                          BEGIN(IgnoreLine);
                                        }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 880 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 884 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 86:
YY_RULE_SETUP
#line 885 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->potentialDefine += yytext[0]=='\t' ? '\t' : ' ';
                                          yyextra->yyColNr+=(int)yyleng;
                                        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 888 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          Define *def;
                                          if ((def=isDefined(yyscanner,yytext))
                                              /*&& !def->isPredefined*/
                                              && !def->nonRecursive
                                             )
                                          {
                                            //printf("undefining %s\n",yytext);
                                            def->undef=TRUE;
                                          }
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 900 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->guardExpr+=' ';
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 89:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 905 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(DefinedExpr2);
                                        }
	YY_BREAK
case 90:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 908 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(DefinedExpr1);
                                        }
	YY_BREAK
case 91:
/* rule 91 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 4);
yyg->yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 911 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="1L"; }
	YY_BREAK
case 92:
/* rule 92 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 912 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="0L"; }
	YY_BREAK
case 93:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 913 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+='!'; }
	YY_BREAK
case 94:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 914 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="!="; }
	YY_BREAK
case 95:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 915 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="&&"; }
	YY_BREAK
case 96:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 916 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="||"; }
	YY_BREAK
case 97:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 917 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="&"; }
	YY_BREAK
case 98:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 918 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="|"; }
	YY_BREAK
case 99:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 919 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="^"; }
	YY_BREAK
case 100:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 920 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="~"; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 921 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+=yytext; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 922 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+="@@"; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 923 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->guardExpr+=*yytext; }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 924 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          unput(*yytext);
                                          //printf("Guard: '%s'\n",
                                          //    qPrint(yyextra->guardExpr));
                                          bool guard=computeExpression(yyscanner,yyextra->guardExpr);
                                          setCaseDone(yyscanner,guard);
                                          if (guard)
                                          {
                                            BEGIN(Start);
                                          }
                                          else
                                          {
                                            yyextra->ifcount=0;
                                            BEGIN(SkipCPPBlock);
                                          }
                                        }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 940 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 941 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (isDefined(yyscanner,yytext) || yyextra->guardName==yytext)
                                            yyextra->guardExpr+=" 1L ";
                                          else
                                            yyextra->guardExpr+=" 0L ";
                                          yyextra->lastGuardName=yytext;
                                          BEGIN(Guard);
                                        }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 949 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (isDefined(yyscanner,yytext) || yyextra->guardName==yytext)
                                            yyextra->guardExpr+=" 1L ";
                                          else
                                            yyextra->guardExpr+=" 0L ";
                                          yyextra->lastGuardName=yytext;
                                        }
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 956 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // should not happen, handle anyway
                                          yyextra->yyLineNr++;
                                          yyextra->ifcount=0;
                                          BEGIN(SkipCPPBlock);
                                        }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 961 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(Guard);
                                        }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 964 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 111:
YY_RULE_SETUP
#line 965 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 112:
/* rule 112 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 966 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 967 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 968 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 115:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 969 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          incrLevel(yyscanner);
                                          yyextra->ifcount++;
                                          //printf("#if... depth=%d\n",yyextra->ifcount);
                                        }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 974 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          //printf("Else! yyextra->ifcount=%d otherCaseDone=%d\n",yyextra->ifcount,otherCaseDone());
                                          if (yyextra->ifcount==0 && !otherCaseDone(yyscanner))
                                          {
                                            setCaseDone(yyscanner,TRUE);
                                            //outputChar(yyscanner,'\n');
                                            BEGIN(Start);
                                          }
                                        }
	YY_BREAK
case 117:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 983 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (yyextra->ifcount==0)
                                          {
                                            if (!otherCaseDone(yyscanner))
                                            {
                                              yyextra->guardExpr.resize(0);
                                              yyextra->lastGuardName.resize(0);
                                              BEGIN(Guard);
                                            }
                                            else
                                            {
                                              BEGIN(SkipCPPBlock);
                                            }
                                          }
                                        }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 998 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                          decrLevel(yyscanner);
                                          if (--yyextra->ifcount<0)
                                          {
                                            //outputChar(yyscanner,'\n');
                                            BEGIN(Start);
                                          }
                                        }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1007 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                          BEGIN(SkipCPPBlock);
                                        }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1012 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // unknown directive
                                          BEGIN(SkipLine);
                                        }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1015 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1016 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1017 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1018 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(SkipString);
                                        }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1021 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 126:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1022 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                        }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1024 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->lastCPPContext=YY_START;
                                          BEGIN(RemoveCPPComment);
                                        }
	YY_BREAK
case 128:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1028 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                        }
	YY_BREAK
case 129:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1030 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->lastCContext=YY_START;
                                          BEGIN(RemoveCComment);
                                        }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1034 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                          BEGIN(SkipCPPBlock);
                                        }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1039 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1040 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1041 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(SkipLine);
                                        }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1044 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ }
	YY_BREAK
case 135:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1045 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->nospaces=TRUE;
                                          yyextra->roundCount=0;
                                          yyextra->defArgsStr=yytext;
                                          yyextra->findDefArgContext = IncludeID;
                                          BEGIN(FindDefineArgs);
                                        }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1052 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->nospaces=TRUE;
                                          readIncludeFile(yyscanner,expandMacro(yyscanner,yytext));
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1057 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->incName+=yytext;
                                          readIncludeFile(yyscanner,yyextra->incName);
                                          if (yyextra->isImported)
                                          {
                                            BEGIN(EndImport);
                                          }
                                          else
                                          {
                                            BEGIN(Start);
                                          }
                                        }
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1069 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1072 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1076 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                        }
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1078 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // define with argument
                                          //printf("Define() '%s'\n",yytext);
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = 0;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defText.resize(0);
                                          yyextra->defLitText.resize(0);
                                          yyextra->defName = yytext;
                                          yyextra->defVarArgs = FALSE;
                                          yyextra->defExtraSpacing.resize(0);
                                          yyextra->defContinue = false;
                                          BEGIN(DefineArg);
                                        }
	YY_BREAK
case 142:
/* rule 142 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1091 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // special case: define with 1 -> can be "guard"
                                          //printf("Define '%s'\n",yytext);
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = -1;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defName = QCString(yytext).left(yyleng-1).stripWhiteSpace();
                                          yyextra->defVarArgs = FALSE;
                                          //printf("Guard check: %s!=%s || %d\n",
                                          //    qPrint(yyextra->defName),qPrint(yyextra->lastGuardName),yyextra->expectGuard);
                                          if (yyextra->curlyCount>0 || yyextra->defName!=yyextra->lastGuardName || !yyextra->expectGuard)
                                          { // define may appear in the output
                                            QCString def = yyextra->potentialDefine +
                                                           yyextra->defName         ;
                                            outputString(yyscanner,def);
                                            outputSpaces(yyscanner,yytext+yyextra->defName.length());
                                            yyextra->quoteArg=FALSE;
                                            yyextra->insideComment=FALSE;
                                            yyextra->lastGuardName.resize(0);
                                            yyextra->defText="1";
                                            yyextra->defLitText="1";
                                            BEGIN(DefineText);
                                          }
                                          else // define is a guard => hide
                                          {
                                            //printf("Found a guard %s\n",yytext);
                                            yyextra->defText.resize(0);
                                            yyextra->defLitText.resize(0);
                                            BEGIN(Start);
                                          }
                                          yyextra->expectGuard=FALSE;
                                        }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1122 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // empty define
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = -1;
                                          yyextra->defName = yytext;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defText.resize(0);
                                          yyextra->defLitText.resize(0);
                                          yyextra->defVarArgs = FALSE;
                                          //printf("Guard check: %s!=%s || %d\n",
                                          //    qPrint(yyextra->defName),qPrint(yyextra->lastGuardName),yyextra->expectGuard);
                                          if (yyextra->curlyCount>0 || yyextra->defName!=yyextra->lastGuardName || !yyextra->expectGuard)
                                          { // define may appear in the output
                                            QCString def = yyextra->potentialDefine + yyextra->defName;
                                            outputString(yyscanner,def);
                                            yyextra->quoteArg=FALSE;
                                            yyextra->insideComment=FALSE;
                                            if (yyextra->insideCS) yyextra->defText="1"; // for C#, use "1" as define text
                                            BEGIN(DefineText);
                                          }
                                          else // define is a guard => hide
                                          {
                                            //printf("Found a guard %s\n",yytext);
                                            yyextra->guardName = yytext;
                                            yyextra->lastGuardName.resize(0);
                                            BEGIN(Start);
                                          }
                                          yyextra->expectGuard=FALSE;
                                        }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1150 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // define with content
                                          //printf("Define '%s'\n",yytext);
                                          yyextra->argMap.clear();
                                          yyextra->defArgs = -1;
                                          yyextra->defArgsStr.resize(0);
                                          yyextra->defText.resize(0);
                                          yyextra->defLitText.resize(0);
                                          yyextra->defName = yytext;
                                          yyextra->defVarArgs = FALSE;
                                          QCString def = yyextra->potentialDefine +
                                                         yyextra->defName         +
                                                         yyextra->defArgsStr      ;
                                          outputString(yyscanner,def);
                                          yyextra->quoteArg=FALSE;
                                          yyextra->insideComment=FALSE;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1167 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defExtraSpacing+="\n";
                                          yyextra->defContinue = true;
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1172 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->defExtraSpacing+=yytext; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1173 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->defArgsStr+=yytext; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1174 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->defArgsStr+=yytext; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1175 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          extraSpacing(yyscanner);
                                          yyextra->defArgsStr+=yytext;
                                          QCString def = yyextra->potentialDefine +
                                                         yyextra->defName         +
                                                         yyextra->defArgsStr      +
                                                         yyextra->defExtraSpacing ;
                                          outputString(yyscanner,def);
                                          yyextra->quoteArg=FALSE;
                                          yyextra->insideComment=FALSE;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1187 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // Variadic macro
                                          yyextra->defVarArgs = TRUE;
                                          yyextra->defArgsStr+=yytext;
                                          yyextra->argMap.emplace(std::string("__VA_ARGS__"),yyextra->defArgs);
                                          yyextra->defArgs++;
                                        }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1193 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          //printf("Define addArg(%s)\n",yytext);
                                          QCString argName=yytext;
                                          yyextra->defVarArgs = yytext[yyleng-1]=='.';
                                          if (yyextra->defVarArgs) // strip ellipsis
                                          {
                                            argName=argName.left(argName.length()-3);
                                          }
                                          argName = argName.stripWhiteSpace();
                                          yyextra->defArgsStr+=yytext;
                                          yyextra->argMap.emplace(toStdString(argName),yyextra->defArgs);
                                          yyextra->defArgs++;
                                          extraSpacing(yyscanner);
                                        }
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"                       {
                                          yyextra->defText+=yytext;
                                          yyextra->defLitText+=yytext;
                                          yyextra->insideComment=TRUE;
                                        }
<DefineText>"* /"                       {
                                          yyextra->defText+=yytext;
                                          yyextra->defLitText+=yytext;
                                          yyextra->insideComment=FALSE;
                                        }
  */
case 152:
YY_RULE_SETUP
#line 1219 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defText+=yytext;
                                          yyextra->defLitText+=yytext;
                                          yyextra->lastCContext=YY_START;
                                          yyextra->commentCount=1;
                                          BEGIN(CopyCComment);
                                        }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1226 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          yyextra->lastCPPContext=YY_START;
                                          yyextra->defLitText+=' ';
                                          BEGIN(SkipCPPComment);
                                        }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1232 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (yytext[0]=='/') outputChar(yyscanner,'/');
                                          outputChar(yyscanner,'*');outputChar(yyscanner,'/');
                                          if (--yyextra->commentCount<=0)
                                          {
                                            if (yyextra->lastCContext==Start)
                                              // small hack to make sure that ^... rule will
                                              // match when going to Start... Example: "/*...*/ some stuff..."
                                            {
                                              YY_CURRENT_BUFFER->yy_at_bol=1;
                                            }
                                            BEGIN(yyextra->lastCContext);
                                          }
                                        }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1246 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1249 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'/');outputChar(yyscanner,'*');
                                          //yyextra->commentCount++;
                                        }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1253 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1256 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport || !yyextra->isSpecialComment)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->fenceSize=(int)yyleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1269 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          bool markdownSupport = Config_getBool(MARKDOWN_SUPPORT);
                                          if (!markdownSupport || !yyextra->isSpecialComment)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->fenceSize=(int)yyleng;
                                            BEGIN(SkipVerbatim);
                                          }
                                        }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1282 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          yyextra->yyLineNr+=QCString(yytext).contains('\n');
                                        }
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1286 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          yyextra->yyLineNr+=QCString(yytext).contains('\n');
                                          yyextra->fenceSize=0;
                                          if (yytext[1]=='f')
                                          {
                                            yyextra->blockName="f";
                                          }
                                          else
                                          {
                                            QCString bn=&yytext[1];
                                            int i = bn.find('{'); // for \code{.c}
                                            if (i!=-1) bn=bn.left(i);
                                            yyextra->blockName=bn.stripWhiteSpace();
                                          }
                                          BEGIN(SkipVerbatim);
                                        }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1303 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{}// escaped cond command
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1304 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // cond command in a skipped cond section, this section has to be skipped as well
                                          // but has to be recorded to match the endcond command
                                          startCondSection(yyscanner," ");
                                        }
	YY_BREAK
case 164:
/* rule 164 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1308 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,"@iliteral{code}",15);
                                          yyextra->javaBlock=1;
                                          BEGIN(JavaDocVerbatimCode);
                                        }
	YY_BREAK
case 165:
/* rule 165 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1313 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,"@iliteral",9);
                                          yyextra->javaBlock=1;
                                          BEGIN(JavaDocVerbatimCode);
                                        }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1318 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // escaped @cond
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1321 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // conditional section
                                          yyextra->ccomment=TRUE;
                                          yyextra->condCtx=YY_START;
                                          BEGIN(CondLineCpp);
                                        }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1326 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // conditional section
                                          yyextra->ccomment=FALSE;
                                          yyextra->condCtx=YY_START;
                                          BEGIN(CondLineC);
                                        }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1331 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          startCondSection(yyscanner,yytext);
                                          if (yyextra->skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
                                              outputArray(yyscanner,"*/",2);
                                              yyextra->ccomment=TRUE;
                                            }
                                            else
                                            {
                                              yyextra->ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1352 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // non-guard character
                                          unput(*yytext);
                                          startCondSection(yyscanner," ");
                                          if (yyextra->skip)
                                          {
                                            if (YY_START==CondLineC)
                                            {
                                              // end C comment
                                              outputArray(yyscanner,"*/",2);
                                              yyextra->ccomment=TRUE;
                                            }
                                            else
                                            {
                                              yyextra->ccomment=FALSE;
                                            }
                                            BEGIN(SkipCond);
                                          }
                                          else
                                          {
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 171:
/* rule 171 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1374 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // no guard
                                          if (YY_START==SkipCComment)
                                          {
                                            yyextra->ccomment=TRUE;
                                            // end C comment
                                            outputArray(yyscanner,"*/",2);
                                          }
                                          else
                                          {
                                            yyextra->ccomment=FALSE;
                                          }
                                          yyextra->condCtx=YY_START;
                                          startCondSection(yyscanner," ");
                                          BEGIN(SkipCond);
                                        }
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 1389 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1390 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1391 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1392 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->ccomment=FALSE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1393 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->ccomment=TRUE; }
	YY_BREAK
case 177:
/* rule 177 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 9);
yyg->yy_c_buf_p = yy_cp = yy_bp + 9;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1394 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (!yyextra->skip)
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                          }
                                        }
	YY_BREAK
case 178:
/* rule 178 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1400 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          bool oldSkip = yyextra->skip;
                                          endCondSection(yyscanner);
                                          if (oldSkip && !yyextra->skip)
                                          {
                                            if (yyextra->ccomment)
                                            {
                                              outputArray(yyscanner,"/** ",4); // */
                                            }
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 179:
/* rule 179 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
yyg->yy_c_buf_p = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1412 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          bool oldSkip = yyextra->skip;
                                          endCondSection(yyscanner);
                                          if (oldSkip && !yyextra->skip)
                                          {
                                            BEGIN(yyextra->condCtx);
                                          }
                                        }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1420 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ /* end of verbatim block */
                                          outputArray(yyscanner,yytext,yyleng);
                                          if (yytext[1]=='f' && yyextra->blockName=="f")
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                          else if (&yytext[4]==yyextra->blockName)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1431 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          if (yyextra->fenceSize==(yy_size_t)yyleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1438 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                          if (yyextra->fenceSize==(yy_size_t)yyleng)
                                          {
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1445 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 1448 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (yyextra->javaBlock==0)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            yyextra->javaBlock++;
                                            outputArray(yyscanner,yytext,(int)yyleng);
                                          }
                                        }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1459 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (yyextra->javaBlock==0)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            yyextra->javaBlock--;
                                            if (yyextra->javaBlock==0)
                                            {
                                              outputArray(yyscanner," @endiliteral ",14);
                                              BEGIN(SkipCComment);
                                            }
                                            else
                                            {
                                              outputArray(yyscanner,yytext,(int)yyleng);
                                            }
                                          }
                                        }
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 1478 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ /* new line in verbatim block */
                                          outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 1481 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ /* any other character */
                                          outputArray(yyscanner,yytext,(int)yyleng);
                                        }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 1484 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 1487 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->yyLineNr++;
                                          outputChar(yyscanner,'\n');
                                        }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 1491 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 1494 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=escapeAt(yytext);
                                        }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 1498 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=" ";
                                          yyextra->yyLineNr++;
                                          yyextra->yyMLines++;
                                        }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 1504 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=yytext;
                                          BEGIN(yyextra->lastCContext);
                                        }
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 1509 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->yyLineNr++;
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=' ';
                                        }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 1514 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ // see bug 594021 for a usecase for this rule
                                          if (yyextra->lastCContext==SkipCPPBlock)
                                          {
                                            BEGIN(SkipCommand);
                                          }
                                          else
                                          {
                                            REJECT;
                                          }
                                        }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 1524 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ BEGIN(yyextra->lastCContext); }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 1525 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 198:
YY_RULE_SETUP
#line 1526 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 199:
YY_RULE_SETUP
#line 1527 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 1528 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ yyextra->yyLineNr++; outputChar(yyscanner,'\n'); }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 1529 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 202:
YY_RULE_SETUP
#line 1530 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 1533 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          unput(*yytext);
                                          BEGIN(yyextra->lastCPPContext);
                                        }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 1537 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'/');outputChar(yyscanner,'*');
                                        }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 1540 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'/');outputChar(yyscanner,'/');
                                        }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 1543 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputArray(yyscanner,yytext,yyleng);
                                        }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 1546 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 1549 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 209:
YY_RULE_SETUP
#line 1550 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 210:
YY_RULE_SETUP
#line 1551 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 211:
YY_RULE_SETUP
#line 1552 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"

	YY_BREAK
case 212:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1553 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->quoteArg=TRUE;
                                          yyextra->idStart=true;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 1559 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          if (YY_START == DefineText) outputSpaces(yyscanner,yytext);
                                          if (yyextra->quoteArg)
                                          {
                                            yyextra->defText+="\"";
                                          }
                                          if (yyextra->defArgs>0)
                                          {
                                            auto it = yyextra->argMap.find(yytext);
                                            if (it!=yyextra->argMap.end())
                                            {
                                              int n = it->second;
                                              yyextra->defText+='@';
                                              yyextra->defText+=QCString().setNum(n);
                                            }
                                            else
                                            {
                                              if (yyextra->idStart)
                                              {
                                                warn(yyextra->fileName,yyextra->yyLineNr,
                                                  "'#' is not followed by a macro parameter '%s': '%s'",
                                                  qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                              }
                                              yyextra->defText+=yytext;
                                            }
                                          }
                                          else
                                          {
                                            yyextra->defText+=yytext;
                                          }
                                          if (yyextra->quoteArg)
                                          {
                                            yyextra->defText+="\"";
                                          }
                                          yyextra->quoteArg=FALSE;
                                          yyextra->idStart=false;
                                        }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 1597 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          yyextra->defText+=yytext;
                                        }
	YY_BREAK
case 215:
/* rule 215 can match eol */
YY_RULE_SETUP
#line 1601 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->defLitText+=yytext;
                                          outputChar(yyscanner,'\n');
                                          yyextra->defText += ' ';
                                          yyextra->yyLineNr++;
                                          yyextra->yyMLines++;
                                        }
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 1608 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          QCString comment=extractTrailingComment(yyextra->defLitText);
                                          yyextra->defText = yyextra->defText.stripWhiteSpace();
                                          if (yyextra->defText.startsWith("##"))
                                          {
                                            warn(yyextra->fileName,yyextra->yyLineNr,
                                                 "'##' cannot occur at the beginning of a macro definition '%s': '%s'",
                                                 qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                          }
                                          else if (yyextra->defText.endsWith("##"))
                                          {
                                            warn(yyextra->fileName,yyextra->yyLineNr,
                                                 "'##' cannot occur at the end of a macro definition '%s': '%s'",
                                                 qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                          }
                                          else if (yyextra->defText.endsWith("#"))
                                          {
                                            warn(yyextra->fileName,yyextra->yyLineNr,
                                                 "expected formal parameter after # in macro definition '%s': '%s'",
                                                 qPrint(yyextra->defName),qPrint(yyextra->defLitText.stripWhiteSpace()));
                                          }
                                          yyextra->defLitText+=yytext;
                                          if (!comment.isEmpty())
                                          {
                                            outputString(yyscanner,comment);
                                            yyextra->defLitText=yyextra->defLitText.left(yyextra->defLitText.length()-comment.length()-1);
                                          }
                                          outputChar(yyscanner,'\n');
                                          Define *def=0;
                                          //printf("Define name='%s' text='%s' litTexti='%s'\n",qPrint(yyextra->defName),qPrint(yyextra->defText),qPrint(yyextra->defLitText));
                                          if (yyextra->includeStack.empty() || yyextra->curlyCount>0)
                                          {
                                            addMacroDefinition(yyscanner);
                                          }
                                          def=isDefined(yyscanner,yyextra->defName);
                                          if (def==0) // new define
                                          {
                                            //printf("new define '%s'!\n",qPrint(yyextra->defName));
                                            addDefine(yyscanner);
                                          }
                                          else if (def /*&& macroIsAccessible(def)*/)
                                               // name already exists
                                          {
                                            //printf("existing define!\n");
                                            //printf("define found\n");
                                            if (def->undef) // undefined name
                                            {
                                              def->undef = FALSE;
                                              def->name = yyextra->defName;
                                              def->definition = yyextra->defText.stripWhiteSpace();
                                              def->nargs = yyextra->defArgs;
                                              def->fileName = yyextra->fileName;
                                              def->lineNr = yyextra->yyLineNr-yyextra->yyMLines;
                                              def->columnNr = yyextra->yyColNr;
                                            }
                                            else
                                            {
                                              //printf("error: define %s is defined more than once!\n",qPrint(yyextra->defName));
                                            }
                                          }
                                          yyextra->argMap.clear();
                                          yyextra->yyLineNr++;
                                          yyextra->yyColNr=1;
                                          yyextra->lastGuardName.resize(0);
                                          BEGIN(Start);
                                        }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 1674 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ outputString(yyscanner,yytext);
                                          yyextra->defText += ' ';
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 1678 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ outputString(yyscanner,substitute(yytext,"##","  "));
                                          yyextra->defText += "##";
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 1682 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ outputString(yyscanner,substitute(yytext,"@@","  "));
                                          yyextra->defText += "@@";
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 1686 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          if (!yyextra->insideComment)
                                          {
                                            BEGIN(SkipDoubleQuote);
                                          }
                                        }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 1695 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          if (!yyextra->insideComment)
                                          {
                                            BEGIN(SkipSingleQuote);
                                          }
                                        }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 1704 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ outputSpaces(yyscanner,yytext);
                                          yyextra->defText += yytext;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 1708 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ outputSpaces(yyscanner,yytext);
                                          yyextra->defText += yytext;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 1712 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 1718 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputSpaces(yyscanner,yytext);
                                          yyextra->defText += yytext;
                                          yyextra->defLitText+=yytext;
                                        }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 1723 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,' ');
                                          yyextra->defText += *yytext;
                                          yyextra->defLitText+=yytext;
                                          BEGIN(DefineText);
                                        }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 1729 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ outputSpace(yyscanner,yytext[0]);
                                          yyextra->defText    += *yytext;
                                          yyextra->defLitText += *yytext;
                                        }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 1733 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{ outputSpace(yyscanner,yytext[0]);
                                          yyextra->defText    += *yytext;
                                          yyextra->defLitText += *yytext;
                                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(LexCopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(CopyStringCs):
case YY_STATE_EOF(CopyStringFtn):
case YY_STATE_EOF(CopyStringFtnDouble):
case YY_STATE_EOF(CopyRawString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(ArgCopyCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(JavaDocVerbatimCode):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLineC):
case YY_STATE_EOF(CondLineCpp):
case YY_STATE_EOF(SkipCond):
case YY_STATE_EOF(IDLquote):
#line 1737 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          DBG_CTX((stderr,"End of include file\n"));
                                          //printf("Include stack depth=%d\n",yyextra->includeStack.size());
                                          if (yyextra->includeStack.empty())
                                          {
                                            DBG_CTX((stderr,"Terminating scanner!\n"));
                                            yyterminate();
                                          }
                                          else
                                          {
                                            QCString toFileName = yyextra->fileName;
                                            const std::unique_ptr<FileState> &fs=yyextra->includeStack.back();
                                            //fileDefineCache->merge(yyextra->fileName,fs->fileName);
                                            YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
                                            yy_switch_to_buffer( fs->bufState, yyscanner );
                                            yy_delete_buffer( oldBuf, yyscanner );
                                            yyextra->yyLineNr    = fs->lineNr;
                                            //preYYin = fs->oldYYin;
                                            yyextra->inputBuf    = fs->oldFileBuf;
                                            yyextra->inputBufPos = fs->oldFileBufPos;
                                            yyextra->curlyCount  = fs->curlyCount;
                                            setFileName(yyscanner,fs->fileName);
                                            DBG_CTX((stderr,"######## FileName %s\n",qPrint(yyextra->fileName)));

                                            // Deal with file changes due to
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+yyextra->fileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",yyextra->yyLineNr,qPrint(yyextra->fileName));
                                            outputString(yyscanner,lineStr);

                                            yyextra->includeStack.pop_back();

                                            {
                                              std::lock_guard<std::mutex> lock(g_globalDefineMutex);
                                              // to avoid deadlocks we allow multiple threads to process the same header file.
                                              // The first one to finish will store the results globally. After that the
                                              // next time the same file is encountered, the stored data is used and the file
                                              // is not processed again.
                                              if (!g_defineManager.alreadyProcessed(toFileName.str()))
                                              {
                                                // now that the file is completely processed, prevent it from processing it again
                                                g_defineManager.addInclude(yyextra->fileName.str(),toFileName.str());
                                                g_defineManager.store(toFileName.str(),yyextra->localDefines);
                                              }
                                              else
                                              {
                                                if (Debug::isFlagSet(Debug::Preprocessor))
                                                {
                                                  Debug::print(Debug::Preprocessor,0,"#include %s: was already processed by another thread! not storing data...\n",qPrint(toFileName));
                                                }
                                              }
                                            }
                                            // move the local macros definitions for in this file to the translation unit context
                                            for (const auto &kv : yyextra->localDefines)
                                            {
                                              auto pair = yyextra->contextDefines.insert(kv);
                                              if (!pair.second) // define already in context -> replace with local version
                                              {
                                                yyextra->contextDefines.erase(pair.first);
                                                yyextra->contextDefines.insert(kv);
                                              }
                                            }
                                            yyextra->localDefines.clear();
                                          }
                                        }
	YY_BREAK
case 229:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 1803 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
case 230:
YY_RULE_SETUP
#line 1803 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond || YY_START==IDLquote)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->lastCContext=YY_START;
                                            yyextra->commentCount=1;
                                            if (yyleng==3)
                                            {
                                              yyextra->isSpecialComment = true;
                                              yyextra->lastGuardName.resize(0); // reset guard in case the #define is documented!
                                            }
                                            else
                                            {
                                              yyextra->isSpecialComment = false;
                                            }
                                            BEGIN(SkipCComment);
                                          }
                                        }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 1825 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          if (YY_START==SkipVerbatim || YY_START==SkipCond || getLanguageFromFileName(yyextra->fileName)==SrcLangExt_Fortran || YY_START==IDLquote)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            outputArray(yyscanner,yytext,yyleng);
                                            yyextra->lastCPPContext=YY_START;
                                            if (yyleng==3)
                                            {
                                              yyextra->isSpecialComment = true;
                                              yyextra->lastGuardName.resize(0); // reset guard in case the #define is documented!
                                            }
                                            else
                                            {
                                              yyextra->isSpecialComment = false;
                                            }
                                            BEGIN(SkipCPPComment);
                                          }
                                        }
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 1846 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          outputChar(yyscanner,'\n');
                                          yyextra->yyLineNr++;
                                        }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 1850 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
{
                                          yyextra->expectGuard = FALSE;
                                          outputChar(yyscanner,*yytext);
                                        }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 1855 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"
ECHO;
	YY_BREAK
#line 6237 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/build/generated_src/pre_intermediate.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( preYYwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) preYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 66);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1455 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	YY_CHAR yy_c = 66;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1455 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1454);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	preYY_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void preYY_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * @param yyscanner The scanner object.
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf ,yyscanner );

	preYYfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	preYY_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack(yyscanner);

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void preYYpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)preYYrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in preYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return preYY_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) preYYalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE preYYget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int preYYget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int preYYget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *preYYget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *preYYget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int preYYget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *preYYget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void preYYset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void preYYset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "preYYset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void preYYset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "preYYset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void preYYset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int preYYget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void preYYset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* preYYlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int preYYlex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) preYYalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* preYYlex_init_extra has the same functionality as preYYlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to preYYalloc in
 * the yyextra field.
 */
int preYYlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    preYYset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) preYYalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    preYYset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	preYYfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        preYYfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    preYYfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    preYYfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *preYYrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void preYYfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1855 "C:/Users/rufob/Documents/GitHub/CollapsedFragment/docs/DoxyGeneration/doxygen-1.9.5/src/pre.l"


/////////////////////////////////////////////////////////////////////////////////////

static yy_size_t yyread(yyscan_t yyscanner,char *buf,yy_size_t max_size)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  yy_size_t bytesInBuf = state->inputBuf->curPos()-state->inputBufPos;
  yy_size_t bytesToCopy = std::min(max_size,bytesInBuf);
  memcpy(buf,state->inputBuf->data()+state->inputBufPos,bytesToCopy);
  state->inputBufPos+=bytesToCopy;
  return bytesToCopy;
}

static void setFileName(yyscan_t yyscanner,const QCString &name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  bool ambig;
  FileInfo fi(name.str());
  state->fileName=fi.absFilePath();
  state->yyFileDef=findFileDef(Doxygen::inputNameLinkedMap,state->fileName,ambig);
  if (state->yyFileDef==0) // if this is not an input file check if it is an
                      // include file
  {
    state->yyFileDef=findFileDef(Doxygen::includeNameLinkedMap,state->fileName,ambig);
  }
  //printf("setFileName(%s) state->fileName=%s state->yyFileDef=%p\n",
  //    name,qPrint(state->fileName),state->yyFileDef);
  if (state->yyFileDef && state->yyFileDef->isReference()) state->yyFileDef=0;
  state->insideIDL = getLanguageFromFileName(state->fileName)==SrcLangExt_IDL;
  state->insideCS = getLanguageFromFileName(state->fileName)==SrcLangExt_CSharp;
  state->insideFtn = getLanguageFromFileName(state->fileName)==SrcLangExt_Fortran;
  state->isSource = guessSection(state->fileName);
}

static void incrLevel(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  state->levelGuard.push(false);
  //printf("%s line %d: incrLevel %d\n",qPrint(yyextra->fileName),yyextra->yyLineNr,yyextra->levelGuard.size());
}

static void decrLevel(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("%s line %d: decrLevel %d\n",qPrint(state->fileName),state->yyLineNr,state->levelGuard.size());
  if (!state->levelGuard.empty())
  {
    state->levelGuard.pop();
  }
  else
  {
    warn(state->fileName,state->yyLineNr,"More #endif's than #if's found.\n");
  }
}

static bool otherCaseDone(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->levelGuard.empty())
  {
    warn(state->fileName,state->yyLineNr,"Found an #else without a preceding #if.\n");
    return TRUE;
  }
  else
  {
    return state->levelGuard.top();
  }
}

static void setCaseDone(yyscan_t yyscanner,bool value)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  state->levelGuard.top()=value;
}


static FileState *checkAndOpenFile(yyscan_t yyscanner,const QCString &fileName,bool &alreadyProcessed)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  alreadyProcessed = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",qPrint(fileName));
  FileInfo fi(fileName.str());
  if (fi.exists() && fi.isFile())
  {
    const StringVector &exclPatterns = Config_getList(EXCLUDE_PATTERNS);
    if (patternMatch(fi,exclPatterns)) return 0;

    QCString absName = fi.absFilePath();

    // global guard
    if (state->curlyCount==0) // not #include inside { ... }
    {
      std::lock_guard<std::mutex> lock(g_globalDefineMutex);
      if (g_defineManager.alreadyProcessed(absName.str()))
      {
        alreadyProcessed = TRUE;
        //printf("  already included 1\n");
        return 0; // already done
      }
    }
    // check include stack for absName

    alreadyProcessed = std::any_of(
      state->includeStack.begin(),
      state->includeStack.end(),
      [absName](const std::unique_ptr<FileState> &lfs)
        { return lfs->fileName==absName; }
    );

    if (alreadyProcessed)
    {
      //printf("  already included 2\n");
      return 0;
    }
    //printf("#include %s\n",qPrint(absName));

    fs = new FileState(static_cast<uint>(fi.size())+4096);
    if (!readInputFile(absName,fs->fileBuf))
    { // error
      //printf("  error reading\n");
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldFileBuf    = state->inputBuf;
      fs->oldFileBufPos = state->inputBufPos;
    }
  }
  return fs;
}

static FileState *findFile(yyscan_t yyscanner, const QCString &fileName,bool localInclude,bool &alreadyProcessed)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("** findFile(%s,%d) state->fileName=%s\n",qPrint(fileName),localInclude,qPrint(state->fileName));
  if (Portable::isAbsolutePath(fileName))
  {
    FileState *fs = checkAndOpenFile(yyscanner,fileName,alreadyProcessed);
    if (fs)
    {
      setFileName(yyscanner,fileName);
      state->yyLineNr=1;
      return fs;
    }
    else if (alreadyProcessed)
    {
      return 0;
    }
  }
  if (localInclude && !state->fileName.isEmpty())
  {
    FileInfo fi(state->fileName.str());
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE))+"/"+fileName;
      FileState *fs = checkAndOpenFile(yyscanner,absName,alreadyProcessed);
      if (fs)
      {
        setFileName(yyscanner,absName);
        state->yyLineNr=1;
        return fs;
      }
      else if (alreadyProcessed)
      {
        return 0;
      }
    }
  }
  if (state->pathList.empty())
  {
    return 0;
  }
  for (auto path : state->pathList)
  {
    std::string absName = (path+"/"+fileName).str();
    //printf("  Looking for %s in %s\n",fileName,path.c_str());
    FileState *fs = checkAndOpenFile(yyscanner,absName.c_str(),alreadyProcessed);
    if (fs)
    {
      setFileName(yyscanner,absName.c_str());
      state->yyLineNr=1;
      //printf("  -> found it\n");
      return fs;
    }
    else if (alreadyProcessed)
    {
      return 0;
    }
  }
  return 0;
}

static QCString extractTrailingComment(const QCString &s)
{
  if (s.isEmpty()) return "";
  int i=(int)s.length()-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
        {
          i--;
          if (i>=0 && s[i]=='*') // end of a comment block
          {
            i--;
            while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
            if (i==0)
            {
              i++;
            }
            // only /*!< ... */ or /**< ... */ are treated as a comment for the macro name,
            // otherwise the comment is treated as part of the macro definition
            return ((s[i+1]=='*' || s[i+1]=='!') && s[i+2]=='<') ? &s[i-1] : "";
          }
          else
          {
            return "";
          }
        }
        break;
        // whitespace or line-continuation
      case ' ':
      case '\t':
      case '\r':
      case '\n':
      case '\\':
        break;
      default:
        return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint pos);
static void unputChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos,char c);
static bool expandExpression(yyscan_t yyscanner,QCString &expr,QCString *rest,int pos,int level);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
        c=s.at(i++);
        if (c=='"')
        {
          result+="\\\"";
          inString=TRUE;
        }
        else if (c=='\'')
        {
          result+=c;
          inChar=TRUE;
        }
        else
        {
          result+=c;
        }
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
        c=s.at(i++);
        if (c=='\'')
        {
          result+='\'';
          inChar=FALSE;
        }
        else if (c=='\\')
        {
          result+="\\\\";
        }
        else
        {
          result+=c;
        }
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
        c=s.at(i++);
        if (c=='"')
        {
          result+="\\\"";
          inString= pc=='\\';
        }
        else if (c=='\\')
          result+="\\\\";
        else
          result+=c;
        pc=c;
      }
    }
  }
  //printf("stringize '%s'->'%s'\n",qPrint(s),qPrint(result));
  return result;
}

/*! Execute all ## operators in expr.
 * If the macro name before or after the operator contains a no-rescan
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  if (expr.isEmpty()) return;
  //printf("processConcatOperators: in='%s'\n",qPrint(expr));
  std::string e = expr.str();
  static const reg::Ex r(R"(\s*##\s*)");
  reg::Iterator end;

  size_t i=0;
  for (;;)
  {
    reg::Iterator it(e,r,i);
    if (it!=end)
    {
      const auto &match = *it;
      size_t n = match.position();
      size_t l = match.length();
      //printf("Match: '%s'\n",qPrint(expr.mid(i)));
      if (n+l+1<e.length() && e[static_cast<int>(n+l)]=='@' && expr[static_cast<int>(n+l+1)]=='-')
      {
        // remove no-rescan marker after ID
        l+=2;
      }
      //printf("found '%s'\n",qPrint(expr.mid(n,l)));
      // remove the ## operator and the surrounding whitespace
      e=e.substr(0,n)+e.substr(n+l);
      int k=static_cast<int>(n)-1;
      while (k>=0 && isId(e[k])) k--; 
      if (k>0 && e[k]=='-' && e[k-1]=='@')
      {
        // remove no-rescan marker before ID
        e=e.substr(0,k-1)+e.substr(k+1);
        n-=2;
      }
      i=n;
    }
    else
    {
      break;
    }
  }

  expr = e;

  //printf("processConcatOperators: out='%s'\n",qPrint(expr));
}

static void returnCharToStream(yyscan_t yyscanner,char c)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  unput(c);
}

static inline void addTillEndOfString(yyscan_t yyscanner,const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(yyscanner,expr,rest,pos))!=EOF && cc!=0)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(yyscanner,expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr.
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the
 * length of the (unexpanded) argument list is stored in \a len.
 */
static bool replaceFunctionMacro(yyscan_t yyscanner,const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result,int level)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf(">replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s') level=%d\n",qPrint(expr),rest ? qPrint(*rest) : 0,pos,qPrint(def->name),state->levelGuard.size());
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(yyscanner,expr,rest,j))!=EOF && isspace(cc))
  {
    len++;
    getNextChar(yyscanner,expr,rest,j);
  }
  if (cc!='(')
  {
    unputChar(yyscanner,expr,rest,j,' ');
    return FALSE;
  }
  getNextChar(yyscanner,expr,rest,j); // eat the '(' character

  std::map<std::string,std::string> argTable;  // list of arguments
  QCString arg;
  int argCount=0;
  bool done=FALSE;

  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) &&
        ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
          )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
        int lvl=1;
        arg+=c;
        //char term='\0';
        while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
        {
          c=(char)cc;
          //printf("processing %c: term=%c (%d)\n",c,term,term);
          if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
          {
            arg+=c;
            addTillEndOfString(yyscanner,expr,rest,j,c,arg);
          }
          if (c==')')
          {
            lvl--;
            arg+=c;
            if (lvl==0) break;
          }
          else if (c=='(')
          {
            lvl++;
            arg+=c;
          }
          else
            arg+=c;
        }
      }
      else if (c==')' || c==',') // last or next argument found
      {
        if (c==',' && argCount==def->nargs-1 && def->varArgs)
        {
          arg=arg.stripWhiteSpace();
          arg+=',';
        }
        else
        {
          QCString argKey;
          argKey.sprintf("@%d",argCount++); // key name
          arg=arg.stripWhiteSpace();
          // add argument to the lookup table
          argTable.emplace(toStdString(argKey), toStdString(arg));
          arg.resize(0);
          if (c==')') // end of the argument list
          {
            done=TRUE;
          }
        }
      }
      else if (c=='\"') // append literal strings
      {
        arg+=c;
        bool found=FALSE;
        while (!found && (cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
        {
          found = cc=='"';
          if (cc=='\\')
          {
            c=(char)cc;
            arg+=c;
            if ((cc=getNextChar(yyscanner,expr,rest,j))==EOF || cc==0) break;
          }
          c=(char)cc;
          arg+=c;
        }
      }
      else if (c=='\'') // append literal characters
      {
        arg+=c;
        bool found=FALSE;
        while (!found && (cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
        {
          found = cc=='\'';
          if (cc=='\\')
          {
            c=(char)cc;
            arg+=c;
            if ((cc=getNextChar(yyscanner,expr,rest,j))==EOF || cc==0) break;
          }
          c=(char)cc;
          arg+=c;
        }
      }
      else if (c=='/') // possible start of a comment
      {
        char prevChar = '\0';
        arg+=c;
        if ((cc=getCurrentChar(yyscanner,expr,rest,j)) == '*') // we have a comment
        {
          while ((cc=getNextChar(yyscanner,expr,rest,j))!=EOF && cc!=0)
          {
            c=(char)cc;
            arg+=c;
            if (c == '/' && prevChar == '*') break; // we have an end of comment
            prevChar = c;
          }
        }
      }
      else // append other characters
      {
        arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || // same number of arguments
      (argCount>=def->nargs-1 && def->varArgs)) // variadic macro with at least as many
                                                // params as the non-variadic part (see bug731985)
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: '%s'\n",qPrint(d));
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
        if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
        {
          k+=2;
          resExpr+="@@"; // we unescape these later
        }
        else if (d.at(k+1)=='-') // no-rescan marker
        {
          k+=2;
          resExpr+="@-";
        }
        else // argument marker => read the argument number
        {
          QCString key="@";
          bool hash=FALSE;
          int l=k-1;
          // search for ## backward
          if (l>=0 && d.at(l)=='"') l--;
          while (l>=0 && d.at(l)==' ') l--;
          if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
          k++;
          // scan the number
          while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
          if (!hash)
          {
            // search for ## forward
            l=k;
            if (l<(int)d.length() && d.at(l)=='"') l++;
            while (l<(int)d.length() && d.at(l)==' ') l++;
            if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
          }
          //printf("request key %s result %s\n",qPrint(key),argTable[key]->data());
          auto it = argTable.find(key.str());
          if (it!=argTable.end())
          {
            QCString substArg = it->second.c_str();
            //printf("substArg='%s'\n",qPrint(substArg));
            // only if no ## operator is before or after the argument
            // marker we do macro expansion.
            if (!hash)
            {
              expandExpression(yyscanner,substArg,0,0,level+1);
            }
            if (inString)
            {
              //printf("'%s'=stringize('%s')\n",qPrint(stringize(*subst)),subst->data());

              // if the marker is inside a string (because a # was put
              // before the macro name) we must escape " and \ characters
              resExpr+=stringize(substArg);
            }
            else
            {
              if (hash && substArg.isEmpty())
              {
                resExpr+="@E"; // empty argument will be remove later on
              }
              else if (state->nospaces)
              {
                resExpr+=substArg;
              }
              else
              {
                resExpr+=" "+substArg+" ";
              }
            }
          }
        }
      }
      else // no marker, just copy
      {
        if (!inString && d.at(k)=='\"')
        {
          inString=TRUE; // entering a literal string
        }
        else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
        {
          inString=FALSE; // leaving a literal string
        }
        resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("<replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s',result='%s') level=%d return=TRUE\n",qPrint(expr),rest ? qPrint(*rest) : 0,pos,qPrint(def->name),qPrint(result),state->levelGuard.size());
    return TRUE;
  }
  //printf("<replaceFunctionMacro(expr='%s',rest='%s',pos=%d,def='%s',result='%s') level=%d return=FALSE\n",qPrint(expr),rest ? qPrint(*rest) : 0,pos,qPrint(def->name),qPrint(result),state->levelGuard.size());
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n;
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\')))
        // continue as long as no " is found, but ignoring \", but not \\"
      {
        ppc=pc;
        pc=c;
        c=expr.at(p);
        p++;
      }
      if (p<(int)expr.length()) ++p; // skip closing quote
    }
    else if (c=='/') // skip C Comment
    {
      //printf("Found C comment at p=%d\n",p);
      char pc=c;
      if (p<(int)expr.length())
      {
        c=expr.at(p);
        if (c=='*')  // Start of C comment
        {
          p++;
          while (p<(int)expr.length() && !(pc=='*' && c=='/'))
          {
            pc=c;
            c=expr.at(p++);
          }
        }
      }
      //printf("Found end of C comment at p=%d\n",p);
    }
  }
  return -1;
}

#define MAX_EXPANSION_DEPTH 50

/*! performs recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 */
static bool expandExpression(yyscan_t yyscanner,QCString &expr,QCString *rest,int pos,int level)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf(">expandExpression(expr='%s',rest='%s',pos=%d,level=%d)\n",qPrint(expr),rest ? qPrint(*rest) : "", pos, level);
  if (expr.isEmpty())
  {
    //printf("<expandExpression: empty\n");
    return TRUE;
  }
  if (state->expanded.find(expr.str())!=state->expanded.end() &&
      level>MAX_EXPANSION_DEPTH) // check for too deep recursive expansions
  {
    //printf("<expandExpression: already expanded expr='%s'\n",qPrint(expr));
    return FALSE;
  }
  else
  {
    state->expanded.insert(expr.str());
  }
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  int startPos = pos;
  int samePosCount=0;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf(" p=%d macroName=%s\n",p,qPrint(macroName));
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (state->expandedDict.find(macroName.str())==state->expandedDict.end()) // expand macro
      {
        Define *def=isDefined(yyscanner,macroName);
        // In case EXPAND_ONLY_PREDEF is enabled prevent expansion unless the macro was explicitly
        // predefined
        if (yyextra->expandOnlyPredef && def && !def->isPredefined) def=nullptr;
        if (macroName=="defined")
        {
          //printf("found defined inside macro definition '%s'\n",qPrint(expr.right(expr.length()-p)));
          definedTest=TRUE;
        }
        else if (definedTest) // macro name was found after defined
        {
          if (def) expMacro = " 1 "; else expMacro = " 0 ";
          replaced=TRUE;
          len=l;
          definedTest=FALSE;
        }
        else if (def && def->nargs==-1) // simple macro
        {
          // substitute the definition of the macro
          //printf("macro '%s'->'%s'\n",qPrint(macroName),qPrint(def->definition));
          if (state->nospaces)
          {
            expMacro=def->definition.stripWhiteSpace();
          }
          else
          {
            expMacro=" "+def->definition.stripWhiteSpace()+" ";
          }
          //expMacro=def->definition.stripWhiteSpace();
          replaced=TRUE;
          len=l;
          //printf("simple macro expansion='%s'->'%s'\n",qPrint(macroName),qPrint(expMacro));
        }
        else if (def && def->nargs>=0) // function macro
        {
          //printf(" >>>> call replaceFunctionMacro expr='%s'\n",qPrint(expr));
          replaced=replaceFunctionMacro(yyscanner,expr,rest,p+l,len,def,expMacro,level);
          //printf(" <<<< call replaceFunctionMacro: replaced=%d\n",replaced);
          len+=l;
        }
        //printf(" macroName='%s' expMacro='%s' replaced=%d\n",qPrint(macroName),qPrint(expMacro),replaced);

        if (replaced) // expand the macro and rescan the expression
        {
          //printf(" replacing '%s'->'%s'\n",expr.mid(p,qPrint(len)),qPrint(expMacro));
          QCString resultExpr=expMacro;
          QCString restExpr=expr.right(expr.length()-len-p);
          processConcatOperators(resultExpr);
          //printf(" macroName=%s restExpr='%s' def->nonRecursive=%d\n",qPrint(macroName),qPrint(restExpr),def->nonRecursive);
          bool expanded=false;
          if (def && !def->nonRecursive)
          {
            state->expandedDict.emplace(toStdString(macroName),def);
            expanded = expandExpression(yyscanner,resultExpr,&restExpr,0,level+1);
            state->expandedDict.erase(toStdString(macroName));
          }
          else if (def && def->nonRecursive)
          {
            expanded = true;
          }
          if (expanded)
          {
            expr=expr.left(p)+resultExpr+restExpr;
            //printf(" new expression: '%s' old i=%d new i=%d\n",qPrint(expr),i,p);
            i=p;
          }
          else
          {
            expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
            i=p+l+2;
          }
        }
        else // move to the next macro name
        {
          //printf(" moving to the next macro old i=%d new i=%d\n",i,p+l);
          i=p+l;
        }
      }
      else // move to the next macro name
      {
        expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
        //printf("macro already expanded, moving to the next macro expr=%s\n",qPrint(expr));
        i=p+l+2;
        //i=p+l;
      }
      // check for too many inplace expansions without making progress
      if (i==startPos)
      {
        samePosCount++;
      }
      else
      {
        startPos=i;
        samePosCount=0;
      }
      if (samePosCount>MAX_EXPANSION_DEPTH)
      {
        break;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
  //printf("<expandExpression(expr='%s',rest='%s',pos=%d,level=%d)\n",qPrint(expr),rest ? qPrint(*rest) : "", pos,level);
  return TRUE;
}

/*! @brief Process string or character literal.
 *
 * \a inputStr should point to the start of a string or character literal.
 * the routine will return a pointer to just after the end of the literal
 * the character making up the literal will be added to \a result.
 */
static const char *processUntilMatchingTerminator(const char *inputStr,QCString &result)
{
  if (inputStr==0) return inputStr;
  char term = *inputStr; // capture start character of the literal
  if (term!='\'' && term!='"') return inputStr; // not a valid literal
  char c=term;
  // output start character
  result+=c;
  inputStr++;
  while ((c=*inputStr)) // while inside the literal
  {
    if (c==term) // found end marker of the literal
    {
      // output end character and stop
      result+=c;
      inputStr++;
      break;
    }
    else if (c=='\\') // escaped character, process next character
                      // as well without checking for end marker.
    {
      result+=c;
      inputStr++;
      c=*inputStr;
      if (c==0) break; // unexpected end of string after escape character
    }
    result+=c;
    inputStr++;
  }
  return inputStr;
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
static QCString removeIdsAndMarkers(const QCString &s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  if (s.isEmpty()) return s;
  const char *p=s.data();
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
        if (*(p+1)=='@')
        {
          result+=c;
        }
        else if (*(p+1)=='E')
        {
          // skip
        }
        p+=2;
      }
      else if (isdigit(c)) // number
      {
        result+=c;
        p++;
        inNum=TRUE;     
      }
      else if (c=='\'') // quoted character
      {
        p = processUntilMatchingTerminator(p,result);
      }
      else if (c=='d' && !inNum) // identifier starting with a 'd'
      {
        if (qstrncmp(p,"defined ",8)==0 || qstrncmp(p,"defined(",8)==0)
                   // defined keyword
        {
          p+=7; // skip defined
        }
        else
        {
          result+="0L";
          p++;
          while ((c=*p) && isId(c)) p++;
        }
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
        result+="0L";
        p++;
        while ((c=*p) && isId(c)) p++;
        while ((c=*p) && isspace((uchar)c)) p++;
        if (*p=='(') // undefined function macro
        {
          p++;
          int count=1;
          while ((c=*p++))
          {
            if (c=='(') count++;
            else if (c==')')
            {
              count--;
              if (count==0) break;
            }
            else if (c=='/')
            {
              char pc=c;
              c=*++p;
              if (c=='*') // start of C comment
              {
                while (*p && !(pc=='*' && c=='/')) // search end of comment
                {
                  pc=c;
                  c=*++p;
                }
                p++;
              }
            }
          }
        }
      }
      else if (c=='/') // skip C comments
      {
        char pc=c;
        c=*++p;
        if (c=='*') // start of C comment
        {
          while (*p && !(pc=='*' && c=='/')) // search end of comment
          {
            pc=c;
            c=*++p;
          }
          p++;
        }
        else // oops, not comment but division
        {
          result+=pc;
          goto nextChar;
        }
      }
      else
      {
nextChar:
        result+=c;
        char lc=(char)tolower(c);
        if (!isId(lc) && lc!='.' /*&& lc!='-' && lc!='+'*/) inNum=FALSE;
        p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,qPrint(result));
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption:
 *   \a s only contains pairs of @@'s
 */
static QCString removeMarkers(const QCString &s)
{
  if (s.isEmpty()) return s;
  const char *p=s.data();
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
        case '@': // replace @@ with @
          {
            if (*(p+1)=='@')
            {
              result+=c;
            }
            p+=2;
          }
          break;
        case '/': // skip C comments
          {
            result+=c;
            char pc=c;
            c=*++p;
            if (c=='*') // start of C comment
            {
              while (*p && !(pc=='*' && c=='/')) // search end of comment
              {
                if (*p=='@' && *(p+1)=='@')
                  result+=c,p++;
                else
                  result+=c;
                pc=c;
                c=*++p;
              }
              if (*p) result+=c,p++;
            }
          }
          break;
        case '"': // skip string literals
        case '\'': // skip char literals
          p = processUntilMatchingTerminator(p,result);
          break;
        default:
          {
            result+=c;
            p++;
          }
          break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,qPrint(result));
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

static bool computeExpression(yyscan_t yyscanner,const QCString &expr)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  QCString e=expr;
  state->expanded.clear();
  expandExpression(yyscanner,e,0,0,0);
  //printf("after expansion '%s'\n",qPrint(e));
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing '%s'\n",qPrint(e));
  return state->constExpParser.parse(state->fileName.data(),state->yyLineNr,e.str());
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

static QCString expandMacro(yyscan_t yyscanner,const QCString &name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  QCString n=name;
  state->expanded.clear();
  expandExpression(yyscanner,n,0,0,0);
  n=removeMarkers(n);
  //printf("expandMacro '%s'->'%s'\n",qPrint(name),qPrint(n));
  return n;
}

static void addDefine(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  Define def;
  def.name       = state->defName;
  def.definition = state->defText.stripWhiteSpace();
  def.nargs      = state->defArgs;
  def.fileName   = state->fileName;
  def.fileDef    = state->yyFileDef;
  def.lineNr     = state->yyLineNr-state->yyMLines;
  def.columnNr   = state->yyColNr;
  def.varArgs    = state->defVarArgs;
  //printf("newDefine: %s %s file: %s\n",qPrint(def.name),qPrint(def.definition),
  //    def.fileDef ? qPrint(def.fileDef->name()) : qPrint(def.fileName));
  //printf("newDefine: '%s'->'%s'\n",qPrint(def.name),qPrint(def.definition));
  if (!def.name.isEmpty() &&
      Doxygen::expandAsDefinedSet.find(def.name.str())!=Doxygen::expandAsDefinedSet.end())
  {
    def.isPredefined=TRUE;
    def.expandAsDefined=TRUE;
  }
  auto it = state->localDefines.find(def.name.str());
  if (it!=state->localDefines.end()) // redefine
  {
    state->localDefines.erase(it);
  }
  state->localDefines.insert(std::make_pair(def.name.str(),def));
}

static void addMacroDefinition(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->skip) return; // do not add this define as it is inside a
                      // conditional section (cond command) that is disabled.

  Define define;
  define.fileName = state->fileName;
  define.lineNr   = state->yyLineNr - state->yyMLines;
  define.columnNr = state->yyColNr;
  define.name     = state->defName;
  define.args     = state->defArgsStr;
  define.fileDef  = state->inputFileDef;

  QCString litText = state->defLitText;
  int l=litText.find('\n');
  if (l>0 && litText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    litText = litText.right(litText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=litText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    litText=litText.mid(l+1,k-l-1)+litText.stripWhiteSpace();
  }
  QCString litTextStripped = state->defLitText.stripWhiteSpace();
  if (litTextStripped.contains('\n')>=1)
  {
    define.definition = litText;
  }
  else
  {
    define.definition = litTextStripped;
  }
  {
    state->macroDefinitions.push_back(define);
  }
}

static inline void outputChar(yyscan_t yyscanner,char c)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.empty() || state->curlyCount>0) state->outputBuf->addChar(c);
}

static inline void outputArray(yyscan_t yyscanner,const char *a,yy_size_t len)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.empty() || state->curlyCount>0) state->outputBuf->addArray(a,static_cast<uint>(len));
}

static inline void outputString(yyscan_t yyscanner,const QCString &a)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->includeStack.empty() || state->curlyCount>0) state->outputBuf->addArray(a.data(),a.length());
}

static inline void outputSpace(yyscan_t yyscanner,char c)
{
  if (c=='\t') outputChar(yyscanner,'\t');
  else outputChar(yyscanner,' ');
}

static inline void outputSpaces(yyscan_t yyscanner,char *s)
{
  const char *p=s;
  char c;
  while ((c=*p++))
  {
    if (c=='\t') outputChar(yyscanner,'\t');
    else outputChar(yyscanner,' ');
  }
}

static inline void extraSpacing(yyscan_t yyscanner)
{
  struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
  if (!yyextra->defContinue) return;
  for (int i=0; i< (int)yyleng; i++)
  {
    if (yytext[i] == '\t')
      yyextra->defExtraSpacing+='\t';
    else
      yyextra->defExtraSpacing+=' ';
  }
}

static QCString determineAbsoluteIncludeName(const QCString &curFile,const QCString &incFileName)
{
  bool searchIncludes = Config_getBool(SEARCH_INCLUDES);
  QCString absIncFileName = incFileName;
  FileInfo fi(curFile.str());
  if (fi.exists())
  {
    QCString absName = QCString(fi.dirPath(TRUE))+"/"+incFileName;
    FileInfo fi2(absName.str());
    if (fi2.exists())
    {
      absIncFileName=fi2.absFilePath();
    }
    else if (searchIncludes) // search in INCLUDE_PATH as well
    {
      const StringVector &includePath = Config_getList(INCLUDE_PATH);
      for (const auto &incPath : includePath)
      {
        FileInfo fi3(incPath);
        if (fi3.exists() && fi3.isDir())
        {
          absName = QCString(fi3.absFilePath())+"/"+incFileName;
          //printf("trying absName=%s\n",qPrint(absName));
          FileInfo fi4(absName.str());
          if (fi4.exists())
          {
            absIncFileName=fi4.absFilePath();
            break;
          }
          //printf( "absIncFileName = %s\n", qPrint(absIncFileName) );
        }
      }
    }
    //printf( "absIncFileName = %s\n", qPrint(absIncFileName) );
  }
  return absIncFileName;
}

static void readIncludeFile(yyscan_t yyscanner,const QCString &inc)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() &&
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
        ) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();
    if (incFileName.endsWith(".exe") || incFileName.endsWith(".dll") || incFileName.endsWith(".tlb"))
    {
      // skip imported binary files (e.g. M$ type libraries)
      return;
    }

    QCString oldFileName = state->fileName;
    FileDef *oldFileDef  = state->yyFileDef;
    int oldLineNr        = state->yyLineNr;
    //printf("Searching for '%s'\n",qPrint(incFileName));

    QCString absIncFileName = determineAbsoluteIncludeName(state->fileName,incFileName);

    // findFile will overwrite state->yyFileDef if found
    FileState *fs;
    bool alreadyProcessed = FALSE;
    //printf("calling findFile(%s)\n",qPrint(incFileName));
    if ((fs=findFile(yyscanner,incFileName,localInclude,alreadyProcessed))) // see if the include file can be found
    {
      {
        std::lock_guard<std::mutex> lock(g_globalDefineMutex);
        g_defineManager.addInclude(oldFileName.str(),absIncFileName.str());
      }

      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<state->includeStack.size();i++)
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        Debug::print(Debug::Preprocessor,0,"#include %s: parsing...\n",qPrint(incFileName));
      }

      if (state->includeStack.empty() && oldFileDef)
      {
        PreIncludeInfo *ii = state->includeRelations.find(absIncFileName);
        if (ii==0)
        {
          bool ambig;
          FileDef *incFd = findFileDef(Doxygen::inputNameLinkedMap,absIncFileName,ambig);
          state->includeRelations.add(
              absIncFileName,
              oldFileDef,
              ambig?nullptr:incFd,
              incFileName,
              localInclude,
              state->isImported
              );
        }
      }

      struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
      fs->bufState = YY_CURRENT_BUFFER;
      fs->lineNr   = oldLineNr;
      fs->fileName = oldFileName;
      fs->curlyCount = state->curlyCount;
      state->curlyCount = 0;
      // push the state on the stack
      state->includeStack.emplace_back(fs);
      // set the scanner to the include file

      // Deal with file changes due to
      // #include's within { .. } blocks
      QCString lineStr(state->fileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",qPrint(state->fileName));
      outputString(yyscanner,lineStr);

      DBG_CTX((stderr,"Switching to include file %s\n",qPrint(incFileName)));
      state->expectGuard=TRUE;
      state->inputBuf   = &fs->fileBuf;
      state->inputBufPos=0;
      yy_switch_to_buffer(yy_create_buffer(0, YY_BUF_SIZE, yyscanner),yyscanner);
    }
    else
    {
      if (alreadyProcessed) // if this header was already process we can just copy the stored macros
                           // in the local context
      {
        std::lock_guard<std::mutex> lock(g_globalDefineMutex);
        g_defineManager.addInclude(state->fileName.str(),absIncFileName.str());
        g_defineManager.retrieve(absIncFileName.str(),state->contextDefines);
      }

      if (state->includeStack.empty() && oldFileDef)
      {
        PreIncludeInfo *ii = state->includeRelations.find(absIncFileName);
        if (ii==0)
        {
          bool ambig;
          FileDef *incFd = findFileDef(Doxygen::inputNameLinkedMap,absIncFileName,ambig);
          ii = state->includeRelations.add(absIncFileName,
              oldFileDef,
              ambig?0:incFd,
              incFileName,
              localInclude,
              state->isImported
              );
        }
      }

      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<state->includeStack.size();i++)
        {
          Debug::print(Debug::Preprocessor,0,"  ");
        }
        if (alreadyProcessed)
        {
          Debug::print(Debug::Preprocessor,0,"#include %s: already processed! skipping...\n",qPrint(incFileName));
        }
        else
        {
          Debug::print(Debug::Preprocessor,0,"#include %s: not found! skipping...\n",qPrint(incFileName));
        }
        //printf("error: include file %s not found\n",yytext);
      }
      if (state->curlyCount>0 && !alreadyProcessed) // failed to find #include inside { ... }
      {
        warn(state->fileName,state->yyLineNr,"include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",qPrint(incFileName));
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(yyscan_t yyscanner,const QCString &sectId)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  //printf("startCondSection: skip=%d stack=%d\n",state->skip,state->condStack.size());
  CondParser prs;
  bool expResult = prs.parse(state->fileName.data(),state->yyLineNr,sectId.data());
  state->condStack.emplace(std::make_unique<preYY_CondCtx>(state->yyLineNr,sectId,state->skip));
  if (!expResult)
  {
    state->skip=TRUE;
  }
  //printf("  expResult=%d skip=%d\n",expResult,state->skip);
}

static void endCondSection(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  if (state->condStack.empty())
  {
    warn(state->fileName,state->yyLineNr,"the \\endcond does not have a corresponding \\cond in this file");
    state->skip=FALSE;
  }
  else
  {
    const std::unique_ptr<preYY_CondCtx> &ctx = state->condStack.top();
    state->skip=ctx->skip;
    state->condStack.pop();
  }
  //printf("endCondSection: skip=%d stack=%d\n",state->skip,state->condStack.count());
}

static void forceEndCondSection(yyscan_t yyscanner)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);
  while (!state->condStack.empty())
  {
    state->condStack.pop();
  }
  state->skip=FALSE;
}

static QCString escapeAt(const QCString &text)
{
  QCString result;
  if (!text.isEmpty())
  {
    char c;
    const char *p=text.data();
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",qPrint(expr),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput(yyscanner);
    //printf("%d=yyinput() %d\n",cc,EOF);
    return cc;
  }
}

static int getCurrentChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",qPrint(expr),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput(yyscanner);
    returnCharToStream(yyscanner,(char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(yyscan_t yyscanner,const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",qPrint(expr),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(yyscanner,c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",qPrint(expr),rest ? rest->data() : 0,pos,c);
}

/** Returns a reference to a Define object given its name or 0 if the Define does
 *  not exist.
 */
static Define *isDefined(yyscan_t yyscanner,const QCString &name)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);

  bool undef = false;
  auto findDefine = [&undef,&name](DefineMap &map)
  {
    Define *d=0;
    auto it = map.find(name.str());
    if (it!=map.end())
    {
      d = &it->second;
      if (d->undef)
      {
        undef=true;
        d=0;
      }
    }
    return d;
  };

  Define *def = findDefine(state->localDefines);
  if (def==0 && !undef)
  {
    def = findDefine(state->contextDefines);
  }
  return def;
}

static void initPredefined(yyscan_t yyscanner,const QCString &fileName)
{
  YY_EXTRA_TYPE state = preYYget_extra(yyscanner);

  // add predefined macros
  const StringVector &predefList = Config_getList(PREDEFINED);
  for (const auto &ds : predefList)
  {
    size_t i_equals=ds.find('=');
    size_t i_obrace=ds.find('(');
    size_t i_cbrace=ds.find(')');
    bool nonRecursive = i_equals!=std::string::npos && i_equals>0 && ds[i_equals-1]==':';

    if ((i_obrace==0) || (i_equals==0) || (i_equals==1 && ds[i_equals-1]==':'))
    {
      continue; // no define name
    }

    if (i_obrace<i_equals && i_cbrace<i_equals && 
        i_obrace!=std::string::npos && i_cbrace!=std::string::npos && 
        i_obrace<i_cbrace
       ) // predefined function macro definition
    {
      static const reg::Ex reId(R"(\a\w*)");
      std::map<std::string,int> argMap;
      std::string args  = ds.substr(i_obrace+1,i_cbrace-i_obrace-1); // part between ( and )
      bool   hasVarArgs = args.find("...")!=std::string::npos;
      //printf("predefined function macro '%s'\n",ds.c_str());
      int count = 0;
      reg::Iterator arg_it(args,reId,0);
      reg::Iterator arg_end;
      // gather the formal arguments in a dictionary
      for (; arg_it!=arg_end; ++arg_it)
      {
        argMap.emplace(arg_it->str(),count++);
      }
      if (hasVarArgs) // add the variable argument if present
      {
        argMap.emplace("__VA_ARGS__",count++);
      }

      // strip definition part
      std::string definition;
      std::string in=ds.substr(i_equals+1);
      reg::Iterator re_it(in,reId);
      reg::Iterator re_end;
      size_t i=0;
      // substitute all occurrences of formal arguments by their 
      // corresponding markers
      for (; re_it!=re_end; ++re_it)
      {
        const auto &match = *re_it;
        size_t pi = match.position();
        size_t l  = match.length();
        if (pi>i) definition+=in.substr(i,pi-i);

        auto it = argMap.find(match.str());
        if (it!=argMap.end())
        {
          int argIndex = it->second;
          QCString marker;
          marker.sprintf(" @%d ",argIndex);
          definition+=marker.str();
        }
        else
        {
          definition+=match.str();
        }
        i=pi+l;
      }
      definition+=in.substr(i);

      // add define definition to the dictionary of defines for this file
      std::string dname = ds.substr(0,i_obrace);
      if (!dname.empty())
      {
        Define def;
        def.name         = dname;
        def.definition   = definition;
        def.nargs        = count;
        def.isPredefined = TRUE;
        def.nonRecursive = nonRecursive;
        def.fileDef      = state->yyFileDef;
        def.fileName     = fileName;
        def.varArgs      = hasVarArgs;
        state->contextDefines.insert(std::make_pair(def.name.str(),def));

        //printf("#define '%s' '%s' #nargs=%d hasVarArgs=%d\n",
        //  qPrint(def.name),qPrint(def.definition),def.nargs,def.varArgs);
      }
    }
    else if (!ds.empty()) // predefined non-function macro definition
    {
      //printf("predefined normal macro '%s'\n",ds.c_str());
      Define def;
      if (i_equals==std::string::npos) // simple define without argument
      {
        def.name = ds;
        def.definition = "1"; // substitute occurrences by 1 (true)
      }
      else // simple define with argument
      {
        int ine=static_cast<int>(i_equals) - (nonRecursive ? 1 : 0);
        def.name = ds.substr(0,ine);
        def.definition = ds.substr(i_equals+1);
      }
      if (!def.name.isEmpty())
      {
        def.nargs = -1;
        def.isPredefined = TRUE;
        def.nonRecursive = nonRecursive;
        def.fileDef      = state->yyFileDef;
        def.fileName     = fileName;
        state->contextDefines.insert(std::make_pair(def.name.str(),def));
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////

struct Preprocessor::Private
{
  yyscan_t yyscanner;
  preYY_state state;
};

void Preprocessor::addSearchDir(const QCString &dir)
{
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  FileInfo fi(dir.str());
  if (fi.isDir()) state->pathList.push_back(fi.absFilePath());
}

Preprocessor::Preprocessor() : p(std::make_unique<Private>())
{
  preYYlex_init_extra(&p->state,&p->yyscanner);
  addSearchDir(".");
}

Preprocessor::~Preprocessor()
{
  preYYlex_destroy(p->yyscanner);
}

void Preprocessor::processFile(const QCString &fileName,BufStr &input,BufStr &output)
{
//  printf("Preprocessor::processFile(%s)\n",fileName);
  yyscan_t yyscanner = p->yyscanner;
  YY_EXTRA_TYPE state = preYYget_extra(p->yyscanner);
  struct yyguts_t *yyg = (struct yyguts_t*)p->yyscanner;

#ifdef FLEX_DEBUG
  preYYset_debug(1,yyscanner);
#endif

  printlex(yy_flex_debug, TRUE, __FILE__, qPrint(fileName));
  size_t orgOffset=output.curPos();
  //printf("##########################\n%s\n####################\n",
  //    qPrint(input));

  state->macroExpansion = Config_getBool(MACRO_EXPANSION);
  state->expandOnlyPredef = Config_getBool(EXPAND_ONLY_PREDEF);
  state->skip=FALSE;
  state->curlyCount=0;
  state->nospaces=FALSE;
  state->inputBuf=&input;
  state->inputBufPos=0;
  state->outputBuf=&output;
  state->includeStack.clear();
  state->expandedDict.clear();
  state->contextDefines.clear();
  while (!state->condStack.empty()) state->condStack.pop();

  setFileName(yyscanner,fileName);

  state->inputFileDef = state->yyFileDef;
  //yyextra->defineManager.startContext(state->fileName);

  initPredefined(yyscanner,fileName);

  state->yyLineNr = 1;
  state->yyColNr  = 1;
  state->ifcount  = 0;

  BEGIN( Start );

  state->expectGuard = guessSection(fileName)==Entry::HEADER_SEC;
  state->guardName.resize(0);
  state->lastGuardName.resize(0);
  state->guardExpr.resize(0);

  preYYlex(yyscanner);

  while (!state->condStack.empty())
  {
    const std::unique_ptr<preYY_CondCtx> &ctx = state->condStack.top();
    QCString sectionInfo = " ";
    if (ctx->sectionId!=" ") sectionInfo.sprintf(" with label '%s' ",qPrint(ctx->sectionId.stripWhiteSpace()));
    warn(fileName,ctx->lineNr,"Conditional section%sdoes not have "
        "a corresponding \\endcond command within this file.",qPrint(sectionInfo));
    state->condStack.pop();
  }
  // make sure we don't extend a \cond with missing \endcond over multiple files (see bug 624829)
  forceEndCondSection(yyscanner);

  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    std::lock_guard<std::mutex> lock(g_debugMutex);
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    Debug::print(Debug::Preprocessor,0,"Preprocessor output of %s (size: %d bytes):\n",qPrint(fileName),newPos-orgPos);
    int line=1;
    Debug::print(Debug::Preprocessor,0,"---------\n");
    if (!Debug::isFlagSet(Debug::NoLineNo)) Debug::print(Debug::Preprocessor,0,"00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n' && !Debug::isFlagSet(Debug::NoLineNo)) Debug::print(Debug::Preprocessor,0,"%05d ",++line);
      orgPos++;
    }
    Debug::print(Debug::Preprocessor,0,"\n---------\n");
    if (yyextra->contextDefines.size()>0)
    {
      Debug::print(Debug::Preprocessor,0,"Macros accessible in this file (%s):\n", qPrint(fileName));
      Debug::print(Debug::Preprocessor,0,"---------\n");
      for (auto &kv : yyextra->contextDefines)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",qPrint(kv.second.name));
      }
      for (auto &kv : yyextra->localDefines)
      {
        Debug::print(Debug::Preprocessor,0,"%s ",qPrint(kv.second.name));
      }
      Debug::print(Debug::Preprocessor,0,"\n---------\n");
    }
    else
    {
      Debug::print(Debug::Preprocessor,0,"No macros accessible in this file (%s).\n", qPrint(fileName));
    }
  }

  {
    std::lock_guard<std::mutex> lock(g_updateGlobals);
    for (const auto &inc : state->includeRelations)
    {
      if (inc->fromFileDef)
      {
        inc->fromFileDef->addIncludeDependency(inc->toFileDef,inc->includeName,inc->local,inc->imported);
      }
      if (inc->toFileDef && inc->fromFileDef)
      {
        inc->toFileDef->addIncludedByDependency(inc->fromFileDef,inc->fromFileDef->docName(),inc->local,inc->imported);
      }
    }
    // add the macro definition for this file to the global map
    Doxygen::macroDefinitions.emplace(std::make_pair(state->fileName.str(),std::move(state->macroDefinitions)));
  }

  //yyextra->defineManager.endContext();
  printlex(yy_flex_debug, FALSE, __FILE__, qPrint(fileName));
//  printf("Preprocessor::processFile(%s) finished\n",fileName);
}

#if USE_STATE2STRING
#include "pre.l.h"
#endif

